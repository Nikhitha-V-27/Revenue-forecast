{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\DateLevel.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { useParams } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs';\n\n// const DateLevel = () => {\n//   const { projectId, associateId } = useParams();\n\n//   const allDailyHours = [\n//     { date: '2024-05-01', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 7 },\n//     { date: '2024-05-02', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 8 },\n//     { date: '2024-05-03', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 7 },\n//   ];\n\n//   const filtered = allDailyHours.filter(entry => entry.associateId === associateId);\n//   const associateName = filtered[0]?.associateName || associateId;\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 w-100\"\n//         style={{\n//           maxWidth: '850px',\n//           backgroundColor: '#ffffffee',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs\n//           path={[\n//             { name: 'PMO Dashboard', page: '' },\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\n//             { name: 'Project Level', page: 'projects' },\n//             { name: `Associates (${projectId})`, page: `projects/${projectId}/associates` },\n//             { name: `Daily View (${associateId})`, page: `projects/${projectId}/associates/${associateId}` }\n//           ]}\n//         />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n//           ðŸ“… Daily Hours â€“ {associateName}\n//         </h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n//             <thead\n//               style={{\n//                 background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\n//                 color: 'white'\n//               }}\n//             >\n//               <tr>\n//                 <th>Date</th>\n//                 <th>Associate ID</th>\n//                 <th>Name</th>\n//                 <th>CTS Hour</th>\n//                 <th>Client Hour</th>\n//                 <th>Variance</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {filtered.length > 0 ? (\n//                 filtered.map((daily, index) => (\n//                   <tr key={index} style={{ backgroundColor: '#fbfbfb' }}>\n//                     <td>{daily.date}</td>\n//                     <td>{daily.associateId}</td>\n//                     <td>{daily.associateName}</td>\n//                     <td>{daily.ctsHour}</td>\n//                     <td>{daily.clientHour}</td>\n//                     <td\n//                       className={\n//                         daily.ctsHour - daily.clientHour > 0\n//                           ? 'text-danger fw-semibold'\n//                           : daily.ctsHour - daily.clientHour < 0\n//                           ? 'text-primary fw-semibold'\n//                           : 'text-success fw-semibold'\n//                       }\n//                     >\n//                       {daily.ctsHour - daily.clientHour}\n//                     </td>\n//                   </tr>\n//                 ))\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"6\" className=\"text-center py-4 text-muted\">\n//                     No daily hour data available.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default DateLevel;\n\n// import React, { useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\n// import dailyHourData from '../../data/dailyHourData.json'; // CORRECTED PATH: data is two levels up\n// import associateData from '../../data/associateData.json'; // CORRECTED PATH: data is two levels up\n// import projectData from '../../data/projectData.json'; // CORRECTED PATH: data is two levels up\n\n// const DateLevel = () => {\n//   const { projectId, associateId } = useParams();\n\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Filter daily hours based on associateId\n//   const filteredDailyHours = dailyHourData.dailyHours.filter(entry => entry.associateId === associateId);\n\n//   // Get associate name for display\n//   const currentAssociate = associateData.associates.find(a => a.id === associateId);\n//   const associateName = currentAssociate ? currentAssociate.name : associateId;\n\n//   // Get project name and account name for breadcrumbs\n//   const currentProject = projectData.projects.find(p => p.id === projectId);\n//   const projectName = currentProject ? currentProject.name : projectId;\n//   const accountName = currentProject ? currentProject.accountName : 'Unknown Account';\n//   const accountId = currentProject ? currentProject.accountId : '';\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 w-100\"\n//         style={{\n//           maxWidth: '850px',\n//           backgroundColor: '#ffffffee',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs\n//           path={[\n//             { name: 'PMO Dashboard', page: '' },\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\n//             { name: 'Account Level', page: 'accounts' },\n//             { name: `Projects (${accountName})`, page: `accounts/${accountId}/projects` },\n//             { name: `Associates (${projectName})`, page: `projects/${projectId}/associates` },\n//             { name: `Daily View (${associateName})`, page: `projects/${projectId}/associates/${associateId}` }\n//           ]}\n//         />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n//           ðŸ“… Daily Hours â€“ {associateName}\n//         </h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n//             <thead\n//               style={{\n//                 background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\n//                 color: 'white'\n//               }}\n//             >\n//               <tr>\n//                 <th>Date</th>\n//                 <th>Associate ID</th>\n//                 <th>Name</th>\n//                 <th>CTS Hour</th>\n//                 <th>Client Hour</th>\n//                 <th>Variance</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {filteredDailyHours.length > 0 ? (\n//                 filteredDailyHours.map((daily, index) => {\n//                   const variance = daily.ctsHour - daily.clientHour;\n//                   return (\n//                     <tr key={index} style={{ backgroundColor: '#fbfbfb' }}>\n//                       <td>{daily.date}</td>\n//                       <td>{daily.associateId}</td>\n//                       <td>{daily.associateName}</td>\n//                       <td>{daily.ctsHour}</td>\n//                       <td>{daily.clientHour}</td>\n//                       <td\n//                         className={\n//                           variance > 0\n//                             ? 'text-danger fw-semibold'\n//                             : variance < 0\n//                             ? 'text-primary fw-semibold'\n//                             : 'text-success fw-semibold'\n//                         }\n//                       >\n//                         {variance}\n//                       </td>\n//                     </tr>\n//                   );\n//                 })\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"6\" className=\"text-center py-4 text-muted\">\n//                     No daily hour data available for this associate.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default DateLevel;\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DateLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    projectId: urlProjectId,\n    associateId: urlAssociateId\n  } = useParams(); // Get params from URL\n\n  const location = useLocation(); // Hook to access location state\n\n  // State for fetched daily hour data\n\n  const [dailyHours, setDailyHours] = useState([]);\n\n  // State for loading indicator\n\n  const [loading, setLoading] = useState(true);\n\n  // State for error messages\n\n  const [error, setError] = useState(null);\n\n  // States to keep track of the context for which data was last fetched\n\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeProjectId, setActiveProjectId] = useState(null);\n  const [activeProjectName, setActiveProjectName] = useState('Loading...');\n  const [activeAssociateId, setActiveAssociateId] = useState(null);\n  const [activeAssociateName, setActiveAssociateName] = useState('Loading...');\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\n\n  // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Set font family on component mount\n\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Effect to handle context and fetch data\n\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5, _location$state6;\n    const fetchDailyHoursData = async (month, year, projId, assocId) => {\n      setLoading(true);\n      setError(null);\n\n      // Construct the request body as expected by your backend\n\n      const requestBody = {\n        month: month,\n        year: year,\n        projectId: projId,\n        associateId: assocId\n      };\n      console.log(\"Fetching daily hours data with request body (POST):\", requestBody); // For debugging\n\n      try {\n        const response = await fetch(`${BACKEND_URL}/api/date-level`, {\n          method: 'POST',\n          // As per your backend spec\n\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n        }\n        const data = await response.json();\n        setDailyHours(Array.isArray(data) ? data : [data].filter(Boolean));\n\n        // Try to derive names from fetched data if available\n\n        if (data && data.length > 0) {\n          if (data[0].projectName) setActiveProjectName(data[0].projectName);\n          if (data[0].associateName) setActiveAssociateName(data[0].associateName);\n          if (data[0].accountName) setActiveAccountName(data[0].accountName);\n          if (data[0].accountId) setActiveAccountId(data[0].accountId);\n        } else {\n          // Fallback to stored names or IDs if data is empty or names are missing\n\n          const storedProjectName = sessionStorage.getItem('lastFetchedDateProjectName');\n          const storedAssociateName = sessionStorage.getItem('lastFetchedDateAssociateName');\n          const storedAccountName = sessionStorage.getItem('lastFetchedDateAccountName');\n          const storedAccountId = sessionStorage.getItem('lastFetchedDateAccountId');\n          if (storedProjectName) setActiveProjectName(storedProjectName);else setActiveProjectName(projId);\n          if (storedAssociateName) setActiveAssociateName(storedAssociateName);else setActiveAssociateName(assocId);\n          if (storedAccountName) setActiveAccountName(storedAccountName);else setActiveAccountName('Unknown Account');\n          if (storedAccountId) setActiveAccountId(storedAccountId);else setActiveAccountId('Unknown Account ID');\n        }\n      } catch (err) {\n        console.error(\"Error fetching daily hours data:\", err);\n        setError(`Failed to load daily hours data: ${err.message || \"Network error\"}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Logic to determine context for fetching\n\n    let monthToUse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let yearToUse = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    let projectIdToUse = urlProjectId;\n    let associateIdToUse = urlAssociateId;\n    let projectNameToUse = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.projectName;\n    let associateNameToUse = (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.associateName;\n    let accountIdToUse = (_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.accountId;\n    let accountNameToUse = (_location$state6 = location.state) === null || _location$state6 === void 0 ? void 0 : _location$state6.accountName;\n\n    // If context is not in location.state (e.g., on back navigation), check sessionStorage\n\n    if (!monthToUse || !yearToUse || !projectIdToUse || !associateIdToUse || !projectNameToUse || !associateNameToUse || !accountIdToUse || !accountNameToUse) {\n      const storedMonth = sessionStorage.getItem('lastFetchedDateMonth');\n      const storedYear = sessionStorage.getItem('lastFetchedDateYear');\n      const storedProjectId = sessionStorage.getItem('lastFetchedDateProjectId');\n      const storedAssociateId = sessionStorage.getItem('lastFetchedDateAssociateId');\n      const storedProjectName = sessionStorage.getItem('lastFetchedDateProjectName');\n      const storedAssociateName = sessionStorage.getItem('lastFetchedDateAssociateName');\n      const storedAccountId = sessionStorage.getItem('lastFetchedDateAccountId');\n      const storedAccountName = sessionStorage.getItem('lastFetchedDateAccountName');\n      if (storedMonth && storedYear && storedProjectId && storedAssociateId) {\n        monthToUse = parseInt(storedMonth, 10);\n        yearToUse = parseInt(storedYear, 10);\n        projectIdToUse = storedProjectId;\n        associateIdToUse = storedAssociateId;\n        if (storedProjectName) projectNameToUse = storedProjectName;\n        if (storedAssociateName) associateNameToUse = storedAssociateName;\n        if (storedAccountId) accountIdToUse = storedAccountId;\n        if (storedAccountName) accountNameToUse = storedAccountName;\n      }\n    }\n\n    // If we have valid context, set active states and fetch data if needed\n\n    if (monthToUse && yearToUse && projectIdToUse && associateIdToUse && projectNameToUse && associateNameToUse && accountIdToUse && accountNameToUse) {\n      // Only fetch if the context has changed or if dailyHours are empty\n\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || projectIdToUse !== activeProjectId || associateIdToUse !== activeAssociateId || dailyHours.length === 0) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        setActiveProjectId(projectIdToUse);\n        setActiveAssociateId(associateIdToUse);\n        setActiveProjectName(projectNameToUse);\n        setActiveAssociateName(associateNameToUse);\n        setActiveAccountId(accountIdToUse);\n        setActiveAccountName(accountNameToUse);\n\n        // Store current context in sessionStorage\n\n        sessionStorage.setItem('lastFetchedDateMonth', monthToUse.toString());\n        sessionStorage.setItem('lastFetchedDateYear', yearToUse.toString());\n        sessionStorage.setItem('lastFetchedDateProjectId', projectIdToUse);\n        sessionStorage.setItem('lastFetchedDateAssociateId', associateIdToUse);\n        sessionStorage.setItem('lastFetchedDateProjectName', projectNameToUse);\n        sessionStorage.setItem('lastFetchedDateAssociateName', associateNameToUse);\n        sessionStorage.setItem('lastFetchedDateAccountId', accountIdToUse);\n        sessionStorage.setItem('lastFetchedDateAccountName', accountNameToUse);\n        fetchDailyHoursData(monthToUse, yearToUse, projectIdToUse, associateIdToUse);\n      } else {\n        // Data is already present for the active context, no need to fetch\n\n        setLoading(false);\n      }\n    } else {\n      // No valid context found, show error\n\n      setError(\"Missing daily hours context. Please go back and select an associate.\");\n      setLoading(false);\n    }\n  }, [location.state, urlProjectId, urlAssociateId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAssociateId, activeProjectName, activeAssociateName, activeAccountId, activeAccountName, dailyHours.length]); // Dependencies for useEffect\n\n  // Adjust breadcrumb path based on active states\n\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  }, {\n    name: 'Account Level',\n    page: 'accounts'\n  }, {\n    name: `Projects (${activeAccountName})`,\n    page: `accounts/${activeAccountId}/projects`\n  }, {\n    name: `Associates (${activeProjectName})`,\n    page: `projects/${activeProjectId}/associates`\n  }, {\n    name: `Daily View (${activeAssociateName})`,\n    page: `projects/${activeProjectId}/associates/${activeAssociateId}/daily`\n  }];\n\n  // Render loading state\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading Daily Hours Data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Daily Hours Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate(`/projects/${activeProjectId}/associates`),\n        children: \"Go to Associate Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 w-100\",\n      style: {\n        maxWidth: '950px',\n        // Adjusted max-width for more columns\n\n        backgroundColor: '#ffffffee',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4 fw-semibold text-dark\",\n        children: [\"\\uD83D\\uDCC5 Daily Hours \\u2013 \", activeAssociateName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-hover table-borderless align-middle mb-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            style: {\n              background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\n              color: 'white'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 650,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Associate ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 652,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Associate Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 656,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Company Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 660,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Client Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 662,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Variance Time Units\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 664,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Comparison Result\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 666,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: dailyHours.length > 0 ? dailyHours.map((daily, index) => {\n              // Use varianceTimeUnits directly from DTO if available, otherwise calculate\n\n              const variance = daily.varianceTimeUnits !== undefined && daily.varianceTimeUnits !== null ? daily.varianceTimeUnits : daily.companyHours - daily.clientHours;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                style: {\n                  backgroundColor: '#fbfbfb'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 690,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.associateId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 692,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.associateName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 694,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.projectId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 696,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.projectName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 698,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.companyHours\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 700,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.clientHours\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `fw-semibold ${variance > 0 ? 'text-danger' : variance < 0 ? 'text-primary' : 'text-success'}`,\n                  children: variance\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 704,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.comparisonResult\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 724,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 21\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"9\",\n                className: \"text-center py-4 text-muted\",\n                children: \"No daily hour data available for this associate and period.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 736,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 592,\n    columnNumber: 5\n  }, this);\n};\n_s(DateLevel, \"GlzUA8qfvWSJ6JoW++f8835dQi4=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = DateLevel;\nexport default DateLevel;\nvar _c;\n$RefreshReg$(_c, \"DateLevel\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","useLocation","Breadcrumbs","jsxDEV","_jsxDEV","DateLevel","_s","navigate","projectId","urlProjectId","associateId","urlAssociateId","location","dailyHours","setDailyHours","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeProjectId","setActiveProjectId","activeProjectName","setActiveProjectName","activeAssociateId","setActiveAssociateId","activeAssociateName","setActiveAssociateName","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","BACKEND_URL","link","document","createElement","href","rel","head","appendChild","body","style","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","_location$state6","fetchDailyHoursData","month","year","projId","assocId","requestBody","console","log","response","fetch","method","headers","JSON","stringify","ok","errorText","text","Error","status","statusText","data","json","Array","isArray","filter","Boolean","length","projectName","associateName","accountName","accountId","storedProjectName","sessionStorage","getItem","storedAssociateName","storedAccountName","storedAccountId","err","message","monthToUse","state","yearToUse","projectIdToUse","associateIdToUse","projectNameToUse","associateNameToUse","accountIdToUse","accountNameToUse","storedMonth","storedYear","storedProjectId","storedAssociateId","parseInt","setItem","toString","breadcrumbPath","name","page","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","color","map","daily","index","variance","varianceTimeUnits","undefined","companyHours","clientHours","date","comparisonResult","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/DateLevel.js"],"sourcesContent":["// import React from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs';\r\n\r\n// const DateLevel = () => {\r\n//   const { projectId, associateId } = useParams();\r\n\r\n//   const allDailyHours = [\r\n//     { date: '2024-05-01', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 7 },\r\n//     { date: '2024-05-02', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 8 },\r\n//     { date: '2024-05-03', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 7 },\r\n//   ];\r\n\r\n//   const filtered = allDailyHours.filter(entry => entry.associateId === associateId);\r\n//   const associateName = filtered[0]?.associateName || associateId;\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 w-100\"\r\n//         style={{\r\n//           maxWidth: '850px',\r\n//           backgroundColor: '#ffffffee',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs\r\n//           path={[\r\n//             { name: 'PMO Dashboard', page: '' },\r\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//             { name: 'Project Level', page: 'projects' },\r\n//             { name: `Associates (${projectId})`, page: `projects/${projectId}/associates` },\r\n//             { name: `Daily View (${associateId})`, page: `projects/${projectId}/associates/${associateId}` }\r\n//           ]}\r\n//         />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n//           ðŸ“… Daily Hours â€“ {associateName}\r\n//         </h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n//             <thead\r\n//               style={{\r\n//                 background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\r\n//                 color: 'white'\r\n//               }}\r\n//             >\r\n//               <tr>\r\n//                 <th>Date</th>\r\n//                 <th>Associate ID</th>\r\n//                 <th>Name</th>\r\n//                 <th>CTS Hour</th>\r\n//                 <th>Client Hour</th>\r\n//                 <th>Variance</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {filtered.length > 0 ? (\r\n//                 filtered.map((daily, index) => (\r\n//                   <tr key={index} style={{ backgroundColor: '#fbfbfb' }}>\r\n//                     <td>{daily.date}</td>\r\n//                     <td>{daily.associateId}</td>\r\n//                     <td>{daily.associateName}</td>\r\n//                     <td>{daily.ctsHour}</td>\r\n//                     <td>{daily.clientHour}</td>\r\n//                     <td\r\n//                       className={\r\n//                         daily.ctsHour - daily.clientHour > 0\r\n//                           ? 'text-danger fw-semibold'\r\n//                           : daily.ctsHour - daily.clientHour < 0\r\n//                           ? 'text-primary fw-semibold'\r\n//                           : 'text-success fw-semibold'\r\n//                       }\r\n//                     >\r\n//                       {daily.ctsHour - daily.clientHour}\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"6\" className=\"text-center py-4 text-muted\">\r\n//                     No daily hour data available.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DateLevel;\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\r\n// import dailyHourData from '../../data/dailyHourData.json'; // CORRECTED PATH: data is two levels up\r\n// import associateData from '../../data/associateData.json'; // CORRECTED PATH: data is two levels up\r\n// import projectData from '../../data/projectData.json'; // CORRECTED PATH: data is two levels up\r\n\r\n// const DateLevel = () => {\r\n//   const { projectId, associateId } = useParams();\r\n\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Filter daily hours based on associateId\r\n//   const filteredDailyHours = dailyHourData.dailyHours.filter(entry => entry.associateId === associateId);\r\n\r\n//   // Get associate name for display\r\n//   const currentAssociate = associateData.associates.find(a => a.id === associateId);\r\n//   const associateName = currentAssociate ? currentAssociate.name : associateId;\r\n\r\n//   // Get project name and account name for breadcrumbs\r\n//   const currentProject = projectData.projects.find(p => p.id === projectId);\r\n//   const projectName = currentProject ? currentProject.name : projectId;\r\n//   const accountName = currentProject ? currentProject.accountName : 'Unknown Account';\r\n//   const accountId = currentProject ? currentProject.accountId : '';\r\n\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 w-100\"\r\n//         style={{\r\n//           maxWidth: '850px',\r\n//           backgroundColor: '#ffffffee',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs\r\n//           path={[\r\n//             { name: 'PMO Dashboard', page: '' },\r\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//             { name: 'Account Level', page: 'accounts' },\r\n//             { name: `Projects (${accountName})`, page: `accounts/${accountId}/projects` },\r\n//             { name: `Associates (${projectName})`, page: `projects/${projectId}/associates` },\r\n//             { name: `Daily View (${associateName})`, page: `projects/${projectId}/associates/${associateId}` }\r\n//           ]}\r\n//         />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n//           ðŸ“… Daily Hours â€“ {associateName}\r\n//         </h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n//             <thead\r\n//               style={{\r\n//                 background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\r\n//                 color: 'white'\r\n//               }}\r\n//             >\r\n//               <tr>\r\n//                 <th>Date</th>\r\n//                 <th>Associate ID</th>\r\n//                 <th>Name</th>\r\n//                 <th>CTS Hour</th>\r\n//                 <th>Client Hour</th>\r\n//                 <th>Variance</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {filteredDailyHours.length > 0 ? (\r\n//                 filteredDailyHours.map((daily, index) => {\r\n//                   const variance = daily.ctsHour - daily.clientHour;\r\n//                   return (\r\n//                     <tr key={index} style={{ backgroundColor: '#fbfbfb' }}>\r\n//                       <td>{daily.date}</td>\r\n//                       <td>{daily.associateId}</td>\r\n//                       <td>{daily.associateName}</td>\r\n//                       <td>{daily.ctsHour}</td>\r\n//                       <td>{daily.clientHour}</td>\r\n//                       <td\r\n//                         className={\r\n//                           variance > 0\r\n//                             ? 'text-danger fw-semibold'\r\n//                             : variance < 0\r\n//                             ? 'text-primary fw-semibold'\r\n//                             : 'text-success fw-semibold'\r\n//                         }\r\n//                       >\r\n//                         {variance}\r\n//                       </td>\r\n//                     </tr>\r\n//                   );\r\n//                 })\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"6\" className=\"text-center py-4 text-muted\">\r\n//                     No daily hour data available for this associate.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DateLevel;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\n\r\nimport Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\nconst DateLevel = () => {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { projectId: urlProjectId, associateId: urlAssociateId } = useParams(); // Get params from URL\r\n\r\n  const location = useLocation(); // Hook to access location state\r\n\r\n  // State for fetched daily hour data\r\n\r\n  const [dailyHours, setDailyHours] = useState([]);\r\n\r\n  // State for loading indicator\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // State for error messages\r\n\r\n  const [error, setError] = useState(null);\r\n\r\n  // States to keep track of the context for which data was last fetched\r\n\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n\r\n  const [activeYear, setActiveYear] = useState(null);\r\n\r\n  const [activeProjectId, setActiveProjectId] = useState(null);\r\n\r\n  const [activeProjectName, setActiveProjectName] = useState('Loading...');\r\n\r\n  const [activeAssociateId, setActiveAssociateId] = useState(null);\r\n\r\n  const [activeAssociateName, setActiveAssociateName] = useState('Loading...');\r\n\r\n  const [activeAccountId, setActiveAccountId] = useState(null);\r\n\r\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n\r\n  // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Set font family on component mount\r\n\r\n  useEffect(() => {\r\n\r\n    const link = document.createElement('link');\r\n\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n\r\n    link.rel = 'stylesheet';\r\n\r\n    document.head.appendChild(link);\r\n\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n  }, []);\r\n\r\n  // Effect to handle context and fetch data\r\n\r\n  useEffect(() => {\r\n\r\n    const fetchDailyHoursData = async (month, year, projId, assocId) => {\r\n\r\n      setLoading(true);\r\n\r\n      setError(null);\r\n\r\n      // Construct the request body as expected by your backend\r\n\r\n      const requestBody = {\r\n\r\n        month: month,\r\n\r\n        year: year,\r\n\r\n        projectId: projId,\r\n\r\n        associateId: assocId\r\n\r\n      };\r\n\r\n      console.log(\"Fetching daily hours data with request body (POST):\", requestBody); // For debugging\r\n\r\n      try {\r\n\r\n        const response = await fetch(`${BACKEND_URL}/api/date-level`, {\r\n\r\n          method: 'POST', // As per your backend spec\r\n\r\n          headers: {\r\n\r\n            'Content-Type': 'application/json',\r\n\r\n          },\r\n\r\n          body: JSON.stringify(requestBody),\r\n\r\n        });\r\n\r\n        if (!response.ok) {\r\n\r\n          const errorText = await response.text();\r\n\r\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setDailyHours(Array.isArray(data) ? data : [data].filter(Boolean));\r\n\r\n        // Try to derive names from fetched data if available\r\n\r\n        if (data && data.length > 0) {\r\n\r\n          if (data[0].projectName) setActiveProjectName(data[0].projectName);\r\n\r\n          if (data[0].associateName) setActiveAssociateName(data[0].associateName);\r\n\r\n          if (data[0].accountName) setActiveAccountName(data[0].accountName);\r\n\r\n          if (data[0].accountId) setActiveAccountId(data[0].accountId);\r\n\r\n        } else {\r\n\r\n          // Fallback to stored names or IDs if data is empty or names are missing\r\n\r\n          const storedProjectName = sessionStorage.getItem('lastFetchedDateProjectName');\r\n\r\n          const storedAssociateName = sessionStorage.getItem('lastFetchedDateAssociateName');\r\n\r\n          const storedAccountName = sessionStorage.getItem('lastFetchedDateAccountName');\r\n\r\n          const storedAccountId = sessionStorage.getItem('lastFetchedDateAccountId');\r\n\r\n          if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\r\n\r\n          if (storedAssociateName) setActiveAssociateName(storedAssociateName); else setActiveAssociateName(assocId);\r\n\r\n          if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\r\n\r\n          if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\r\n\r\n        }\r\n\r\n      } catch (err) {\r\n\r\n        console.error(\"Error fetching daily hours data:\", err);\r\n\r\n        setError(`Failed to load daily hours data: ${err.message || \"Network error\"}`);\r\n\r\n      } finally {\r\n\r\n        setLoading(false);\r\n\r\n      }\r\n\r\n    };\r\n\r\n    // Logic to determine context for fetching\r\n\r\n    let monthToUse = location.state?.month;\r\n\r\n    let yearToUse = location.state?.year;\r\n\r\n    let projectIdToUse = urlProjectId;\r\n\r\n    let associateIdToUse = urlAssociateId;\r\n\r\n    let projectNameToUse = location.state?.projectName;\r\n\r\n    let associateNameToUse = location.state?.associateName;\r\n\r\n    let accountIdToUse = location.state?.accountId;\r\n\r\n    let accountNameToUse = location.state?.accountName;\r\n\r\n    // If context is not in location.state (e.g., on back navigation), check sessionStorage\r\n\r\n    if (!monthToUse || !yearToUse || !projectIdToUse || !associateIdToUse || !projectNameToUse || !associateNameToUse || !accountIdToUse || !accountNameToUse) {\r\n\r\n      const storedMonth = sessionStorage.getItem('lastFetchedDateMonth');\r\n\r\n      const storedYear = sessionStorage.getItem('lastFetchedDateYear');\r\n\r\n      const storedProjectId = sessionStorage.getItem('lastFetchedDateProjectId');\r\n\r\n      const storedAssociateId = sessionStorage.getItem('lastFetchedDateAssociateId');\r\n\r\n      const storedProjectName = sessionStorage.getItem('lastFetchedDateProjectName');\r\n\r\n      const storedAssociateName = sessionStorage.getItem('lastFetchedDateAssociateName');\r\n\r\n      const storedAccountId = sessionStorage.getItem('lastFetchedDateAccountId');\r\n\r\n      const storedAccountName = sessionStorage.getItem('lastFetchedDateAccountName');\r\n\r\n      if (storedMonth && storedYear && storedProjectId && storedAssociateId) {\r\n\r\n        monthToUse = parseInt(storedMonth, 10);\r\n\r\n        yearToUse = parseInt(storedYear, 10);\r\n\r\n        projectIdToUse = storedProjectId;\r\n\r\n        associateIdToUse = storedAssociateId;\r\n\r\n        if (storedProjectName) projectNameToUse = storedProjectName;\r\n\r\n        if (storedAssociateName) associateNameToUse = storedAssociateName;\r\n\r\n        if (storedAccountId) accountIdToUse = storedAccountId;\r\n\r\n        if (storedAccountName) accountNameToUse = storedAccountName;\r\n\r\n      }\r\n\r\n    }\r\n\r\n    // If we have valid context, set active states and fetch data if needed\r\n\r\n    if (monthToUse && yearToUse && projectIdToUse && associateIdToUse && projectNameToUse && associateNameToUse && accountIdToUse && accountNameToUse) {\r\n\r\n      // Only fetch if the context has changed or if dailyHours are empty\r\n\r\n      if (\r\n\r\n        monthToUse !== activeMonth ||\r\n\r\n        yearToUse !== activeYear ||\r\n\r\n        projectIdToUse !== activeProjectId ||\r\n\r\n        associateIdToUse !== activeAssociateId ||\r\n\r\n        dailyHours.length === 0\r\n\r\n      ) {\r\n\r\n        setActiveMonth(monthToUse);\r\n\r\n        setActiveYear(yearToUse);\r\n\r\n        setActiveProjectId(projectIdToUse);\r\n\r\n        setActiveAssociateId(associateIdToUse);\r\n\r\n        setActiveProjectName(projectNameToUse);\r\n\r\n        setActiveAssociateName(associateNameToUse);\r\n\r\n        setActiveAccountId(accountIdToUse);\r\n\r\n        setActiveAccountName(accountNameToUse);\r\n\r\n        // Store current context in sessionStorage\r\n\r\n        sessionStorage.setItem('lastFetchedDateMonth', monthToUse.toString());\r\n\r\n        sessionStorage.setItem('lastFetchedDateYear', yearToUse.toString());\r\n\r\n        sessionStorage.setItem('lastFetchedDateProjectId', projectIdToUse);\r\n\r\n        sessionStorage.setItem('lastFetchedDateAssociateId', associateIdToUse);\r\n\r\n        sessionStorage.setItem('lastFetchedDateProjectName', projectNameToUse);\r\n\r\n        sessionStorage.setItem('lastFetchedDateAssociateName', associateNameToUse);\r\n\r\n        sessionStorage.setItem('lastFetchedDateAccountId', accountIdToUse);\r\n\r\n        sessionStorage.setItem('lastFetchedDateAccountName', accountNameToUse);\r\n\r\n        fetchDailyHoursData(monthToUse, yearToUse, projectIdToUse, associateIdToUse);\r\n\r\n      } else {\r\n\r\n        // Data is already present for the active context, no need to fetch\r\n\r\n        setLoading(false);\r\n\r\n      }\r\n\r\n    } else {\r\n\r\n      // No valid context found, show error\r\n\r\n      setError(\"Missing daily hours context. Please go back and select an associate.\");\r\n\r\n      setLoading(false);\r\n\r\n    }\r\n\r\n  }, [location.state, urlProjectId, urlAssociateId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAssociateId, activeProjectName, activeAssociateName, activeAccountId, activeAccountName, dailyHours.length]); // Dependencies for useEffect\r\n\r\n  // Adjust breadcrumb path based on active states\r\n\r\n  const breadcrumbPath = [\r\n\r\n    { name: 'PMO Dashboard', page: '' },\r\n\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n\r\n    { name: 'Account Level', page: 'accounts' },\r\n\r\n    { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\r\n\r\n    { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` },\r\n\r\n    { name: `Daily View (${activeAssociateName})`, page: `projects/${activeProjectId}/associates/${activeAssociateId}/daily` }\r\n\r\n  ];\r\n\r\n  // Render loading state\r\n\r\n  if (loading) {\r\n\r\n    return (\r\n\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n\r\n        <div className=\"spinner-border text-primary\" role=\"status\">\r\n\r\n          <span className=\"visually-hidden\">Loading Daily Hours Data...</span>\r\n\r\n        </div>\r\n\r\n        <p className=\"ms-3 text-primary\">Loading Daily Hours Data...</p>\r\n\r\n      </div>\r\n\r\n    );\r\n\r\n  }\r\n\r\n  // Render error state\r\n\r\n  if (error) {\r\n\r\n    return (\r\n\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n\r\n        <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/projects/${activeProjectId}/associates`)}>\r\n\r\n          Go to Associate Level\r\n\r\n        </button>\r\n\r\n      </div>\r\n\r\n    );\r\n\r\n  }\r\n\r\n  return (\r\n\r\n    <div\r\n\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n\r\n      style={{\r\n\r\n        background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\r\n\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n\r\n      }}\r\n\r\n    >\r\n\r\n      <div\r\n\r\n        className=\"card shadow p-4 w-100\"\r\n\r\n        style={{\r\n\r\n          maxWidth: '950px', // Adjusted max-width for more columns\r\n\r\n          backgroundColor: '#ffffffee',\r\n\r\n          borderRadius: '1rem'\r\n\r\n        }}\r\n\r\n      >\r\n\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n\r\n          ðŸ“… Daily Hours â€“ {activeAssociateName}\r\n\r\n        </h2>\r\n\r\n        <div className=\"table-responsive rounded\">\r\n\r\n          <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n\r\n            <thead\r\n\r\n              style={{\r\n\r\n                background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\r\n\r\n                color: 'white'\r\n\r\n              }}\r\n\r\n            >\r\n\r\n              <tr>\r\n\r\n                {/* Updated Column Headers to match your DTO */}\r\n\r\n                <th>Date</th>\r\n\r\n                <th>Associate ID</th>\r\n\r\n                <th>Associate Name</th>\r\n\r\n                <th>Project ID</th>\r\n\r\n                <th>Project Name</th>\r\n\r\n                <th>Company Hours</th>\r\n\r\n                <th>Client Hours</th>\r\n\r\n                <th>Variance Time Units</th>\r\n\r\n                <th>Comparison Result</th>\r\n\r\n              </tr>\r\n\r\n            </thead>\r\n\r\n            <tbody>\r\n\r\n              {dailyHours.length > 0 ? (\r\n\r\n                dailyHours.map((daily, index) => {\r\n\r\n                  // Use varianceTimeUnits directly from DTO if available, otherwise calculate\r\n\r\n                  const variance = daily.varianceTimeUnits !== undefined && daily.varianceTimeUnits !== null\r\n\r\n                    ? daily.varianceTimeUnits\r\n\r\n                    : (daily.companyHours - daily.clientHours);\r\n\r\n                  return (\r\n\r\n                    <tr key={index} style={{ backgroundColor: '#fbfbfb' }}>\r\n\r\n                      <td>{daily.date}</td>\r\n\r\n                      <td>{daily.associateId}</td>\r\n\r\n                      <td>{daily.associateName}</td>\r\n\r\n                      <td>{daily.projectId}</td>\r\n\r\n                      <td>{daily.projectName}</td>\r\n\r\n                      <td>{daily.companyHours}</td>\r\n\r\n                      <td>{daily.clientHours}</td>\r\n\r\n                      <td\r\n\r\n                        className={`fw-semibold ${variance > 0\r\n\r\n                            ? 'text-danger'\r\n\r\n                            : variance < 0\r\n\r\n                              ? 'text-primary'\r\n\r\n                              : 'text-success'\r\n\r\n                          }`}\r\n\r\n                      >\r\n\r\n                        {variance}\r\n\r\n                      </td>\r\n\r\n                      <td>{daily.comparisonResult}</td>\r\n\r\n                    </tr>\r\n\r\n                  );\r\n\r\n                })\r\n\r\n              ) : (\r\n\r\n                <tr>\r\n\r\n                  <td colSpan=\"9\" className=\"text-center py-4 text-muted\">\r\n\r\n                    No daily hour data available for this associate and period.\r\n\r\n                  </td>\r\n\r\n                </tr>\r\n\r\n              )}\r\n\r\n            </tbody>\r\n\r\n          </table>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n};\r\n\r\nexport default DateLevel;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,WAAW,EAAEC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AAEtE,OAAOC,WAAW,MAAM,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,I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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}