{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\Frontend\\\\Revenue-forecast\\\\src\\\\components\\\\Details\\\\ProjectTypeLevel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Container, Table, Alert, Spinner, Button } from 'react-bootstrap';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Breadcrumbs from '../Breadcrumbs'; // Assuming this path is correct\nimport commonData from '../../data/commonData.json'; // Assuming this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectTypeLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // State variables for active filters\n  const [activeAccId, setActiveAccId] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeSbu, setActiveSbu] = useState(null);\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // Define BACKEND_URL here, inside the component\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Currency settings from commonData\n  const {\n    locale,\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  } = commonData.currencySettings;\n\n  // Initialize Intl.NumberFormat for currency formatting\n  const formatter = new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  });\n\n  // Define a map for column names to display names (camelCase to readable)\n  const columnNameMap = {\n    projectType: 'Project Type',\n    totalRevenueByType: 'Total Revenue by Type'\n    // Add other mappings as needed if your DTO has more fields\n    // For example:\n    // someOtherCamelCaseField: 'Some Other Display Field',\n  };\n\n  // Helper to format values, handling exponent strings and currency\n  const formatValue = (val, columnName) => {\n    if (typeof val === 'string') {\n      const m = val.match(/^e(\\d+)$/i); // Check for \"eX\" format\n      if (m) {\n        val = Math.pow(10, Number(m[1])); // Convert \"eX\" to 10^X\n      } else if (!isNaN(val)) {\n        val = Number(val); // Convert string numbers to actual numbers\n      }\n    }\n\n    // Format as currency if it's a finite number and the specific column\n    if (typeof val === 'number' && isFinite(val) && columnName === 'totalRevenueByType') {\n      return formatter.format(val);\n    }\n    return val; // Return original value if not a number or not meant for currency formatting\n  };\n\n  // Helper to get month name from month number\n  const getMonthName = m => new Date(activeYear, m - 1).toLocaleString('en-US', {\n    month: 'long'\n  }); // Use activeYear here\n\n  // Load Poppins font from Google Fonts (good practice for consistent styling)\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Fetch Project Type data when activeAccId, activeMonth, activeYear change\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4;\n    const fetchProjectTypeData = async (accIdToUse, monthToUse, yearToUse) => {\n      setLoading(true);\n      setError(''); // Clear any previous errors\n      try {\n        const payload = {\n          accId: accIdToUse,\n          month: Number(monthToUse),\n          year: Number(yearToUse)\n        };\n        const resp = await axios.post(`${BACKEND_URL}/api/project-type-level`,\n        // API endpoint for Project Type data\n        payload);\n        setData(resp.data); // Set fetched data to state\n      } catch (err) {\n        var _err$response;\n        // Handle API errors\n        console.error(\"Error fetching Project Type data:\", err);\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message || 'Failed to fetch project type data.');\n      } finally {\n        setLoading(false); // Deactivate loading spinner\n      }\n    };\n\n    // Determine context from location.state, sessionStorage, or URL query params\n    let accIdCandidate = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.accId;\n    let monthCandidate = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.month;\n    let yearCandidate = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.year;\n    let sbuCandidate = (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.sbu;\n\n    // Fallback to sessionStorage if not in location.state\n    if (!accIdCandidate) accIdCandidate = sessionStorage.getItem('lastFetchedProjectTypeAccId');\n    if (!monthCandidate) monthCandidate = sessionStorage.getItem('lastFetchedProjectTypeMonth');\n    if (!yearCandidate) yearCandidate = sessionStorage.getItem('lastFetchedProjectTypeYear');\n    if (!sbuCandidate) sbuCandidate = sessionStorage.getItem('lastFetchedProjectTypeSbu');\n\n    // Fallback to URL query parameters if not in sessionStorage (less common for this level, but good for robustness)\n    const qs = new URLSearchParams(location.search);\n    if (!accIdCandidate) accIdCandidate = qs.get('accId');\n    if (!monthCandidate) monthCandidate = qs.get('month');\n    if (!yearCandidate) yearCandidate = qs.get('year');\n    if (!sbuCandidate) sbuCandidate = qs.get('sbu');\n\n    // Convert numeric values to integers\n    monthCandidate = monthCandidate ? parseInt(monthCandidate, 10) : null;\n    yearCandidate = yearCandidate ? parseInt(yearCandidate, 10) : null;\n\n    // Only proceed if all essential parameters are valid\n    if (accIdCandidate && monthCandidate && yearCandidate) {\n      // Check if context has actually changed to avoid unnecessary re-fetches\n      if (accIdCandidate !== activeAccId || monthCandidate !== activeMonth || yearCandidate !== activeYear || sbuCandidate !== activeSbu ||\n      // Include sbu in re-fetch condition\n      data.length === 0 // Re-fetch if data is empty (e.g., first load)\n      ) {\n        setActiveAccId(accIdCandidate);\n        setActiveMonth(monthCandidate);\n        setActiveYear(yearCandidate);\n        setActiveSbu(sbuCandidate);\n\n        // Persist context to sessionStorage for future loads\n        sessionStorage.setItem('lastFetchedProjectTypeAccId', accIdCandidate);\n        sessionStorage.setItem('lastFetchedProjectTypeMonth', monthCandidate.toString());\n        sessionStorage.setItem('lastFetchedProjectTypeYear', yearCandidate.toString());\n        if (sbuCandidate) {\n          sessionStorage.setItem('lastFetchedProjectTypeSbu', sbuCandidate);\n        }\n        fetchProjectTypeData(accIdCandidate, monthCandidate, yearCandidate);\n      } else {\n        setLoading(false); // Context hasn't changed, data already loaded\n      }\n    } else {\n      // If essential context is missing after all checks, set error\n      setError('Missing Account ID, month, or year. Please navigate here with those parameters.');\n      setLoading(false);\n    }\n  }, [location.state, location.search, activeAccId, activeMonth, activeYear, activeSbu,\n  // Add activeSbu to dependencies\n  data.length, BACKEND_URL]);\n\n  // Dynamically determine table columns based on the first data item\n  // Filters out specific fields if they are not meant for direct display\n  const columns = data.length ? Object.keys(data[0]).filter(col => col.toLowerCase() !== 'id' && col.toLowerCase() !== 'accountid' && col.toLowerCase() !== 'month' && col.toLowerCase() !== 'year') : [];\n\n  // Map the raw column names to their display names using columnNameMap\n  const mappedColumns = columns.map(col => columnNameMap[col] || col);\n\n  // Append a 'View' column to the headers for navigation\n  const headerCols = [...mappedColumns, 'View Projects'];\n\n  // Define breadcrumb path\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  },\n  // Navigates to root (e.g., your main dashboard)\n  {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  },\n  // Navigates to the upload page\n  // Conditionally add SBU Level if activeSbu is available\n  ...(activeSbu ? [{\n    name: `${activeSbu} SBU Level`,\n    page: 'sbu',\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }] : []),\n  // Account Level breadcrumb, passing necessary state back to AccountLevel\n  {\n    name: 'Account Level',\n    page: `accounts`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  },\n  // Current page breadcrumb (name changed to \"Project Type\")\n  {\n    name: `Project Type`,\n    page: `accounts/${activeAccId}/project-types`\n  } // No need to pass state to itself here\n  ].filter(Boolean); // Filter out any null/undefined entries if 'sbu' is not set\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '1100px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4 fw-semibold text-dark\",\n        children: [\"\\uD83D\\uDCCA Project Type Overview for Account \", activeAccId, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-primary\",\n          children: [\"(\", getMonthName(activeMonth), \" \", activeYear, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center align-items-center my-5\",\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\",\n          role: \"status\",\n          className: \"me-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ms-3 text-primary\",\n          children: \"Loading Project Type Data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column justify-content-center align-items-center text-danger\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-4\",\n          children: [\"Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mt-3\",\n          onClick: () => navigate('/accounts', {\n            state: {\n              month: activeMonth,\n              year: activeYear,\n              sbu: activeSbu\n            }\n          }) // Navigate back to Account Level with state\n          ,\n          children: \"Go to Account Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this) : data.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-muted py-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-5\",\n          children: [\"No Project Type data available for Account \", activeAccId, \" in \", getMonthName(activeMonth), \" \", activeYear, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please ensure data has been uploaded for this period.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          hover: true,\n          bordered: true,\n          className: \"align-middle mb-0\",\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #1d4ed8, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: headerCols.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: col\n              }, col, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: data.map((row, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [columns.map(col => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatValue(row[col], col)\n              }, col, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 25\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"sm\",\n                  variant: \"outline-primary\",\n                  className: \"rounded-circle\",\n                  onClick: () => navigate(`/accounts/${activeAccId}/projects`, {\n                    state: {\n                      accId: activeAccId,\n                      // Pass activeAccId\n                      month: activeMonth,\n                      // Pass activeMonth\n                      year: activeYear,\n                      // Pass activeYear\n                      sbu: activeSbu,\n                      // Pass activeSbu\n                      projectType: row.projectType // Pass the project type for filtering at the Project Level\n                    }\n                  }),\n                  title: `View Projects for ${row.projectType || 'this type'}`,\n                  children: \"\\uD83D\\uDD0D\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 23\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectTypeLevel, \"zChiNidGd9+rAUdQJOnvAbL7L6w=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = ProjectTypeLevel;\nexport default ProjectTypeLevel;\nvar _c;\n$RefreshReg$(_c, \"ProjectTypeLevel\");","map":{"version":3,"names":["React","useState","useEffect","axios","Container","Table","Alert","Spinner","Button","useLocation","useNavigate","Breadcrumbs","commonData","jsxDEV","_jsxDEV","ProjectTypeLevel","_s","navigate","location","activeAccId","setActiveAccId","activeMonth","setActiveMonth","activeYear","setActiveYear","activeSbu","setActiveSbu","data","setData","loading","setLoading","error","setError","BACKEND_URL","locale","currency","minimumFractionDigits","maximumFractionDigits","currencySettings","formatter","Intl","NumberFormat","style","columnNameMap","projectType","totalRevenueByType","formatValue","val","columnName","m","match","Math","pow","Number","isNaN","isFinite","format","getMonthName","Date","toLocaleString","month","link","document","createElement","href","rel","head","appendChild","body","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","fetchProjectTypeData","accIdToUse","monthToUse","yearToUse","payload","accId","year","resp","post","err","_err$response","console","response","message","accIdCandidate","state","monthCandidate","yearCandidate","sbuCandidate","sbu","sessionStorage","getItem","qs","URLSearchParams","search","get","parseInt","length","setItem","toString","columns","Object","keys","filter","col","toLowerCase","mappedColumns","map","headerCols","breadcrumbPath","name","page","Boolean","className","background","children","maxWidth","backgroundColor","borderRadius","path","fileName","_jsxFileName","lineNumber","columnNumber","animation","role","onClick","hover","bordered","width","row","idx","size","variant","title","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/Frontend/Revenue-forecast/src/components/Details/ProjectTypeLevel.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Container,\r\n  Table,\r\n  Alert,\r\n  Spinner,\r\n  Button\r\n} from 'react-bootstrap';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport Breadcrumbs from '../Breadcrumbs'; // Assuming this path is correct\r\nimport commonData from '../../data/commonData.json'; // Assuming this path is correct\r\n\r\nconst ProjectTypeLevel = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // State variables for active filters\r\n  const [activeAccId, setActiveAccId] = useState(null);\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n  const [activeSbu, setActiveSbu] = useState(null);\r\n\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  // Define BACKEND_URL here, inside the component\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Currency settings from commonData\r\n  const {\r\n    locale,\r\n    currency,\r\n    minimumFractionDigits,\r\n    maximumFractionDigits\r\n  } = commonData.currencySettings;\r\n\r\n  // Initialize Intl.NumberFormat for currency formatting\r\n  const formatter = new Intl.NumberFormat(locale, {\r\n    style: 'currency',\r\n    currency,\r\n    minimumFractionDigits,\r\n    maximumFractionDigits\r\n  });\r\n\r\n  // Define a map for column names to display names (camelCase to readable)\r\n  const columnNameMap = {\r\n    projectType: 'Project Type',\r\n    totalRevenueByType: 'Total Revenue by Type',\r\n    // Add other mappings as needed if your DTO has more fields\r\n    // For example:\r\n    // someOtherCamelCaseField: 'Some Other Display Field',\r\n  };\r\n\r\n  // Helper to format values, handling exponent strings and currency\r\n  const formatValue = (val, columnName) => {\r\n    if (typeof val === 'string') {\r\n      const m = val.match(/^e(\\d+)$/i); // Check for \"eX\" format\r\n      if (m) {\r\n        val = Math.pow(10, Number(m[1])); // Convert \"eX\" to 10^X\r\n      } else if (!isNaN(val)) {\r\n        val = Number(val); // Convert string numbers to actual numbers\r\n      }\r\n    }\r\n\r\n    // Format as currency if it's a finite number and the specific column\r\n    if (typeof val === 'number' && isFinite(val) && columnName === 'totalRevenueByType') {\r\n      return formatter.format(val);\r\n    }\r\n    return val; // Return original value if not a number or not meant for currency formatting\r\n  };\r\n\r\n  // Helper to get month name from month number\r\n  const getMonthName = (m) =>\r\n    new Date(activeYear, m - 1).toLocaleString('en-US', { month: 'long' }); // Use activeYear here\r\n\r\n  // Load Poppins font from Google Fonts (good practice for consistent styling)\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Fetch Project Type data when activeAccId, activeMonth, activeYear change\r\n  useEffect(() => {\r\n    const fetchProjectTypeData = async (accIdToUse, monthToUse, yearToUse) => {\r\n      setLoading(true);\r\n      setError(''); // Clear any previous errors\r\n      try {\r\n        const payload = {\r\n          accId: accIdToUse,\r\n          month: Number(monthToUse),\r\n          year: Number(yearToUse)\r\n        };\r\n        const resp = await axios.post(\r\n          `${BACKEND_URL}/api/project-type-level`, // API endpoint for Project Type data\r\n          payload\r\n        );\r\n        setData(resp.data); // Set fetched data to state\r\n      } catch (err) {\r\n        // Handle API errors\r\n        console.error(\"Error fetching Project Type data:\", err);\r\n        setError(err.response?.data || err.message || 'Failed to fetch project type data.');\r\n      } finally {\r\n        setLoading(false); // Deactivate loading spinner\r\n      }\r\n    };\r\n\r\n    // Determine context from location.state, sessionStorage, or URL query params\r\n    let accIdCandidate = location.state?.accId;\r\n    let monthCandidate = location.state?.month;\r\n    let yearCandidate = location.state?.year;\r\n    let sbuCandidate = location.state?.sbu;\r\n\r\n    // Fallback to sessionStorage if not in location.state\r\n    if (!accIdCandidate) accIdCandidate = sessionStorage.getItem('lastFetchedProjectTypeAccId');\r\n    if (!monthCandidate) monthCandidate = sessionStorage.getItem('lastFetchedProjectTypeMonth');\r\n    if (!yearCandidate) yearCandidate = sessionStorage.getItem('lastFetchedProjectTypeYear');\r\n    if (!sbuCandidate) sbuCandidate = sessionStorage.getItem('lastFetchedProjectTypeSbu');\r\n\r\n    // Fallback to URL query parameters if not in sessionStorage (less common for this level, but good for robustness)\r\n    const qs = new URLSearchParams(location.search);\r\n    if (!accIdCandidate) accIdCandidate = qs.get('accId');\r\n    if (!monthCandidate) monthCandidate = qs.get('month');\r\n    if (!yearCandidate) yearCandidate = qs.get('year');\r\n    if (!sbuCandidate) sbuCandidate = qs.get('sbu');\r\n\r\n    // Convert numeric values to integers\r\n    monthCandidate = monthCandidate ? parseInt(monthCandidate, 10) : null;\r\n    yearCandidate = yearCandidate ? parseInt(yearCandidate, 10) : null;\r\n\r\n    // Only proceed if all essential parameters are valid\r\n    if (accIdCandidate && monthCandidate && yearCandidate) {\r\n      // Check if context has actually changed to avoid unnecessary re-fetches\r\n      if (\r\n        accIdCandidate !== activeAccId ||\r\n        monthCandidate !== activeMonth ||\r\n        yearCandidate !== activeYear ||\r\n        sbuCandidate !== activeSbu || // Include sbu in re-fetch condition\r\n        data.length === 0 // Re-fetch if data is empty (e.g., first load)\r\n      ) {\r\n        setActiveAccId(accIdCandidate);\r\n        setActiveMonth(monthCandidate);\r\n        setActiveYear(yearCandidate);\r\n        setActiveSbu(sbuCandidate);\r\n\r\n        // Persist context to sessionStorage for future loads\r\n        sessionStorage.setItem('lastFetchedProjectTypeAccId', accIdCandidate);\r\n        sessionStorage.setItem('lastFetchedProjectTypeMonth', monthCandidate.toString());\r\n        sessionStorage.setItem('lastFetchedProjectTypeYear', yearCandidate.toString());\r\n        if (sbuCandidate) {\r\n          sessionStorage.setItem('lastFetchedProjectTypeSbu', sbuCandidate);\r\n        }\r\n\r\n        fetchProjectTypeData(accIdCandidate, monthCandidate, yearCandidate);\r\n      } else {\r\n        setLoading(false); // Context hasn't changed, data already loaded\r\n      }\r\n    } else {\r\n      // If essential context is missing after all checks, set error\r\n      setError('Missing Account ID, month, or year. Please navigate here with those parameters.');\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    location.state,\r\n    location.search,\r\n    activeAccId,\r\n    activeMonth,\r\n    activeYear,\r\n    activeSbu, // Add activeSbu to dependencies\r\n    data.length,\r\n    BACKEND_URL\r\n  ]);\r\n\r\n  // Dynamically determine table columns based on the first data item\r\n  // Filters out specific fields if they are not meant for direct display\r\n  const columns = data.length\r\n    ? Object.keys(data[0]).filter((col) => col.toLowerCase() !== 'id' && col.toLowerCase() !== 'accountid' && col.toLowerCase() !== 'month' && col.toLowerCase() !== 'year')\r\n    : [];\r\n\r\n  // Map the raw column names to their display names using columnNameMap\r\n  const mappedColumns = columns.map(col => columnNameMap[col] || col);\r\n\r\n  // Append a 'View' column to the headers for navigation\r\n  const headerCols = [...mappedColumns, 'View Projects'];\r\n\r\n  // Define breadcrumb path\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' }, // Navigates to root (e.g., your main dashboard)\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' }, // Navigates to the upload page\r\n    // Conditionally add SBU Level if activeSbu is available\r\n    ...(activeSbu ? [{ name: `${activeSbu} SBU Level`, page: 'sbu', state: { month: activeMonth, year: activeYear, sbu: activeSbu } }] : []),\r\n    // Account Level breadcrumb, passing necessary state back to AccountLevel\r\n    { name: 'Account Level', page: `accounts`, state: { month: activeMonth, year: activeYear, sbu: activeSbu } },\r\n    // Current page breadcrumb (name changed to \"Project Type\")\r\n    { name: `Project Type`, page: `accounts/${activeAccId}/project-types` } // No need to pass state to itself here\r\n  ].filter(Boolean); // Filter out any null/undefined entries if 'sbu' is not set\r\n\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif\",\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{\r\n          maxWidth: '1100px',\r\n          backgroundColor: '#ffffffdd',\r\n          borderRadius: '1rem',\r\n        }}\r\n      >\r\n        {/* Breadcrumbs component */}\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        {/* Page title */}\r\n        <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n          📊 Project Type Overview for Account {activeAccId}{' '}\r\n          <span className=\"text-primary\">\r\n            ({getMonthName(activeMonth)} {activeYear})\r\n          </span>\r\n        </h2>\r\n\r\n        {/* Conditional rendering for loading, error, or data display */}\r\n        {loading ? (\r\n          <div className=\"d-flex justify-content-center align-items-center my-5\">\r\n            <Spinner animation=\"border\" role=\"status\" className=\"me-2\" />\r\n            <p className=\"ms-3 text-primary\">Loading Project Type Data...</p>\r\n          </div>\r\n        ) : error ? (\r\n          <div className=\"d-flex flex-column justify-content-center align-items-center text-danger\">\r\n            <p className=\"fs-4\">Error: {error}</p>\r\n            <button\r\n              className=\"btn btn-primary mt-3\"\r\n              onClick={() => navigate('/accounts', { state: { month: activeMonth, year: activeYear, sbu: activeSbu } })} // Navigate back to Account Level with state\r\n            >\r\n              Go to Account Level\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          data.length === 0 ? (\r\n            <div className=\"text-center text-muted py-5\">\r\n              <p className=\"fs-5\">No Project Type data available for Account {activeAccId} in {getMonthName(activeMonth)} {activeYear}.</p>\r\n              <p>Please ensure data has been uploaded for this period.</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"table-responsive rounded\">\r\n              <Table\r\n                hover\r\n                bordered\r\n                className=\"align-middle mb-0\"\r\n                style={{ width: '100%' }}\r\n              >\r\n                <thead\r\n                  className=\"text-white\"\r\n                  style={{\r\n                    background: 'linear-gradient(to right, #1d4ed8, #2563eb)',\r\n                  }}\r\n                >\r\n                  <tr>\r\n                    {headerCols.map((col) => (\r\n                      <th key={col}>{col}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {data.map((row, idx) => (\r\n                    <tr key={idx}>\r\n                      {columns.map((col) => (\r\n                        <td key={col}>{formatValue(row[col], col)}</td>\r\n                      ))}\r\n                      <td className=\"text-center\">\r\n                        {/* Button to navigate to Project Level for the specific Project Type */}\r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"outline-primary\"\r\n                          className=\"rounded-circle\"\r\n                          onClick={() =>\r\n                            navigate(`/accounts/${activeAccId}/projects`, {\r\n                              state: {\r\n                                accId: activeAccId, // Pass activeAccId\r\n                                month: activeMonth, // Pass activeMonth\r\n                                year: activeYear,   // Pass activeYear\r\n                                sbu: activeSbu,     // Pass activeSbu\r\n                                projectType: row.projectType // Pass the project type for filtering at the Project Level\r\n                              }\r\n                            })\r\n                          }\r\n                          title={`View Projects for ${row.projectType || 'this type'}`}\r\n                        >\r\n                          🔍\r\n                        </Button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectTypeLevel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}