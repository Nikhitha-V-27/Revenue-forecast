{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\Frontend\\\\Revenue-forecast\\\\src\\\\components\\\\Details\\\\ProjectLevel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport $ from 'jquery';\nimport 'datatables.net';\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\nimport Breadcrumbs from '../Breadcrumbs';\nimport commonData from '../../data/commonData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    accountId: urlAccountId\n  } = useParams();\n  const location = useLocation();\n  const tableRef = useRef(null);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\n  const [activeSbu, setActiveSbu] = useState(null);\n  const [activeProjectType, setActiveProjectType] = useState(null);\n\n  // New state to manage column filters\n  const [columnFilters, setColumnFilters] = useState({});\n\n  // Backend URL for API calls\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Currency formatting function\n  const formatCurrency = (value = 0) => value.toLocaleString(commonData.currencySettings.locale, {\n    style: 'currency',\n    currency: commonData.currencySettings.currency,\n    minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\n    maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\n  });\n\n  // Utility to get month name (for file naming)\n  const getMonthName = monthNumber => {\n    if (!monthNumber) return '';\n    const date = new Date();\n    date.setMonth(monthNumber - 1);\n    return date.toLocaleString('en-US', {\n      month: 'long'\n    });\n  };\n\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data and triggers a download.\r\n   */\n  const handleDownloadData = () => {\n    // Note: This will now download the currently displayed, filtered data.\n    const dtInstance = $(tableRef.current).DataTable();\n    const headers = [\"Project ID\", \"Project Name\", \"Total Associates\", \"Company Hours\", \"Client Hours\", \"Variance Hours\", \"Revenue\"];\n\n    // Get the data from the currently visible rows in the table\n    const csvRows = dtInstance.rows({\n      search: 'applied'\n    }).data().toArray().map(row => {\n      return [`\"${row[0]}\"`, `\"${row[1]}\"`, row[2], row[3], row[4], row[5], `\"${row[6]}\"`].join(',');\n    });\n    const csvContent = [headers.join(','), ...csvRows].join('\\n');\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    const monthName = getMonthName(activeMonth);\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`;\n    link.setAttribute('href', url);\n    link.setAttribute('download', fileName);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  /**\r\n   * Generates a unique list of options for a given column key.\r\n   * @param {string} columnKey The key of the column to get unique values for.\r\n   * @returns {string[]} An array of unique values, including an 'All' option.\r\n   */\n  const getUniqueOptions = columnKey => {\n    // Only use the raw projects data to get the full list of options\n    const options = projects.map(project => project[columnKey]);\n    const uniqueOptions = [...new Set(options)].sort();\n    return ['All', ...uniqueOptions];\n  };\n\n  /**\r\n   * Handles changes to a column's filter dropdown.\r\n   * Updates the `columnFilters` state with the new value.\r\n   * @param {string} columnKey The key of the column being filtered.\r\n   * @param {string} value The selected filter value.\r\n   */\n  const handleFilterChange = (columnKey, value) => {\n    setColumnFilters(prevFilters => ({\n      ...prevFilters,\n      [columnKey]: value === 'All' ? '' : value\n    }));\n  };\n\n  // Load Poppins font from Google Fonts\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Fetch project data when context changes\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5;\n    const fetchProjectData = async (month, year, accId, projectType) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const payload = {\n          month,\n          year,\n          accId,\n          projectType\n        };\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(payload)\n        });\n        if (!resp.ok) {\n          const errText = await resp.text();\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\n        }\n        const data = await resp.json();\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\n        setProjects(list);\n        if (list.length > 0 && list[0].accountName) {\n          setActiveAccountName(list[0].accountName);\n        } else {\n          const storedName = sessionStorage.getItem('lastFetchedProjectAccountName');\n          setActiveAccountName(storedName || accId);\n        }\n      } catch (e) {\n        console.error('Error fetching project data:', e);\n        setError(`Failed to load project data: ${e.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    let monthToUse = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month) || sessionStorage.getItem('lastFetchedProjectMonth');\n    let yearToUse = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year) || sessionStorage.getItem('lastFetchedProjectYear');\n    let accountIdToUse = urlAccountId;\n    let accountNameToUse = ((_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.accountName) || sessionStorage.getItem('lastFetchedProjectAccountName');\n    let sbuToUse = ((_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.sbu) || sessionStorage.getItem('lastFetchedProjectSbu');\n    let projectTypeToUse = ((_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.projectType) || sessionStorage.getItem('lastFetchedProjectType');\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\n    if (monthToUse && yearToUse && accountIdToUse) {\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accountIdToUse !== activeAccountId || sbuToUse !== activeSbu || projectTypeToUse !== activeProjectType || projects.length === 0) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        setActiveAccountId(accountIdToUse);\n        if (accountNameToUse) setActiveAccountName(accountNameToUse);\n        setActiveSbu(sbuToUse);\n        setActiveProjectType(projectTypeToUse);\n        sessionStorage.setItem('lastFetchedProjectMonth', monthToUse.toString());\n        sessionStorage.setItem('lastFetchedProjectYear', yearToUse.toString());\n        sessionStorage.setItem('lastFetchedProjectAccountId', accountIdToUse);\n        if (accountNameToUse) sessionStorage.setItem('lastFetchedProjectAccountName', accountNameToUse);\n        if (sbuToUse) sessionStorage.setItem('lastFetchedProjectSbu', sbuToUse);\n        if (projectTypeToUse) sessionStorage.setItem('lastFetchedProjectType', projectTypeToUse);\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse);\n      } else {\n        setLoading(false);\n      }\n    } else {\n      setError('Missing month, year, or Account ID. Please navigate here with all parameters.');\n      setLoading(false);\n    }\n  }, [location.state, urlAccountId, activeMonth, activeYear, activeAccountId, activeSbu, activeProjectType, projects.length]);\n\n  // Use a map to connect the column key to its index in the DataTable\n  const columnMap = {\n    projectId: 0,\n    projectName: 1,\n    totalAssociatesCount: 2,\n    totalCompanyHours: 3,\n    totalClientHours: 4,\n    varianceHours: 5,\n    revenue: 6\n  };\n\n  // Initialize DataTable when projects data is first loaded\n  useEffect(() => {\n    if (!loading && projects.length > 0 && tableRef.current) {\n      const $tbl = $(tableRef.current);\n      if ($.fn.DataTable.isDataTable($tbl)) {\n        $tbl.DataTable().destroy();\n      }\n      $tbl.DataTable({\n        data: projects.map(p => [p.projectId, p.projectName, p.totalAssociatesCount, p.totalCompanyHours, p.totalClientHours, p.varianceHours, formatCurrency(p.revenue),\n        // Add a placeholder for the \"View\" button column\n        null]),\n        columns: [{\n          title: \"Project ID\"\n        }, {\n          title: \"Project Name\"\n        }, {\n          title: \"Total Associates\"\n        }, {\n          title: \"Company Hours\"\n        }, {\n          title: \"Client Hours\"\n        }, {\n          title: \"Variance Hours\"\n        }, {\n          title: \"Revenue\"\n        }, {\n          title: \"View\",\n          orderable: false,\n          searchable: false,\n          className: 'text-center'\n        }],\n        paging: true,\n        searching: true,\n        ordering: true,\n        info: true,\n        autoWidth: false,\n        // Manually render the \"View\" button for each row\n        columnDefs: [{\n          targets: 7,\n          // The \"View\" column\n          render: function (data, type, row, meta) {\n            const project = projects[meta.row];\n            return `<button\n                        class=\"btn btn-sm btn-outline-primary rounded-circle\"\n                        onclick=\"window.handleViewClick('${project.projectId}', '${project.projectName}', '${project.accountId}', '${project.accountName}', '${activeMonth}', '${activeYear}', '${activeSbu}', '${activeProjectType}')\"\n                        title=\"View Associates\"\n                    >\n                        🔍\n                    </button>`;\n          }\n        }],\n        drawCallback: function () {\n          // Re-attach the click handler after each draw to a global function\n          window.handleViewClick = (projectId, projectName, accountId, accountName, month, year, sbu, projectType) => {\n            navigate(`/projects/${projectId}/associates`, {\n              state: {\n                projectId,\n                projectName,\n                accountId,\n                accountName,\n                month,\n                year,\n                sbu,\n                projectType\n              }\n            });\n          };\n        }\n      });\n    }\n    return () => {\n      if (tableRef.current) {\n        const $tbl = $(tableRef.current);\n        if ($.fn.DataTable.isDataTable($tbl)) {\n          $tbl.DataTable().destroy();\n        }\n      }\n    };\n  }, [projects, navigate, activeMonth, activeYear, activeSbu, activeProjectType, formatCurrency]);\n\n  // Apply filters using DataTable's API when `columnFilters` state changes\n  useEffect(() => {\n    if (!loading && projects.length > 0 && tableRef.current) {\n      const dtInstance = $(tableRef.current).DataTable();\n      Object.keys(columnFilters).forEach(columnKey => {\n        const columnIndex = columnMap[columnKey];\n        if (columnIndex !== undefined) {\n          const filterValue = columnFilters[columnKey] || '';\n          dtInstance.column(columnIndex).search(filterValue).draw();\n        }\n      });\n    }\n  }, [columnFilters, loading, projects]);\n\n  // Define breadcrumb path for navigation\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  }, ...(activeSbu ? [{\n    name: `${activeSbu} SBU Level`,\n    page: 'sbu',\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }] : []), {\n    name: 'Account Level',\n    page: `accounts`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }, ...(activeProjectType ? [{\n    name: `${activeProjectType} Project Type`,\n    page: `accounts/${activeAccountId}/project-types`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu,\n      accId: activeAccountId\n    }\n  }] : []), {\n    name: `Projects (${activeAccountName})`,\n    page: `accounts/${activeAccountId}/projects`\n  }].filter(Boolean);\n\n  // Render loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Project Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate('/accounts', {\n          state: {\n            month: activeMonth,\n            year: activeYear,\n            sbu: activeSbu\n          }\n        }),\n        children: \"Go to Account Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Main component render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '1200px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-0 fw-semibold text-dark\",\n          children: [\"\\uD83D\\uDCC1 Project Level Overview\", ' ', activeAccountId ? `for ${activeAccountName}` : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this), projects.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-success rounded-pill px-3\",\n          onClick: handleDownloadData,\n          title: \"Download Project Data\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-download me-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 15\n          }, this), \" Download Data\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          ref: tableRef,\n          className: \"display table table-hover align-middle table-borderless mb-0\",\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #3b82f6, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Project ID\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('projectId', e.target.value),\n                  value: columnFilters.projectId || 'All',\n                  children: getUniqueOptions('projectId').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 415,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Project Name\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('projectName', e.target.value),\n                  value: columnFilters.projectName || 'All',\n                  children: getUniqueOptions('projectName').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 427,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 421,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Total Associates\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('totalAssociatesCount', e.target.value),\n                  value: columnFilters.totalAssociatesCount || 'All',\n                  children: getUniqueOptions('totalAssociatesCount').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 439,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Company Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('totalCompanyHours', e.target.value),\n                  value: columnFilters.totalCompanyHours || 'All',\n                  children: getUniqueOptions('totalCompanyHours').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 450,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 444,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Client Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('totalClientHours', e.target.value),\n                  value: columnFilters.totalClientHours || 'All',\n                  children: getUniqueOptions('totalClientHours').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 461,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Variance Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('varianceHours', e.target.value),\n                  value: columnFilters.varianceHours || 'All',\n                  children: getUniqueOptions('varianceHours').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 472,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 466,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 465,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Revenue\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('revenue', e.target.value),\n                  value: columnFilters.revenue || 'All',\n                  children: getUniqueOptions('revenue').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 483,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 477,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-center\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 360,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectLevel, \"6O6aTl7DTcAebSMhXQLD6/Qh8fE=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = ProjectLevel;\nexport default ProjectLevel;\nvar _c;\n$RefreshReg$(_c, \"ProjectLevel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","useParams","useLocation","$","Breadcrumbs","commonData","jsxDEV","_jsxDEV","ProjectLevel","_s","navigate","accountId","urlAccountId","location","tableRef","projects","setProjects","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","activeSbu","setActiveSbu","activeProjectType","setActiveProjectType","columnFilters","setColumnFilters","BACKEND_URL","formatCurrency","value","toLocaleString","currencySettings","locale","style","currency","minimumFractionDigits","maximumFractionDigits","getMonthName","monthNumber","date","Date","setMonth","month","handleDownloadData","dtInstance","current","DataTable","headers","csvRows","rows","search","data","toArray","map","row","join","csvContent","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","monthName","fileName","setAttribute","visibility","body","appendChild","click","removeChild","revokeObjectURL","getUniqueOptions","columnKey","options","project","uniqueOptions","Set","sort","handleFilterChange","prevFilters","href","rel","head","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","fetchProjectData","year","accId","projectType","payload","resp","fetch","method","JSON","stringify","ok","errText","text","Error","status","statusText","json","list","Array","isArray","filter","Boolean","length","accountName","storedName","sessionStorage","getItem","e","console","message","monthToUse","state","yearToUse","accountIdToUse","accountNameToUse","sbuToUse","sbu","projectTypeToUse","parseInt","setItem","toString","columnMap","projectId","projectName","totalAssociatesCount","totalCompanyHours","totalClientHours","varianceHours","revenue","$tbl","fn","isDataTable","destroy","p","columns","title","orderable","searchable","className","paging","searching","ordering","info","autoWidth","columnDefs","targets","render","meta","drawCallback","window","handleViewClick","Object","keys","forEach","columnIndex","undefined","filterValue","column","draw","breadcrumbPath","name","page","children","role","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","ref","width","onChange","target","option","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/Frontend/Revenue-forecast/src/components/Details/ProjectLevel.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport $ from 'jquery';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\nimport Breadcrumbs from '../Breadcrumbs';\r\nimport commonData from '../../data/commonData.json';\r\n\r\nconst ProjectLevel = () => {\r\n  const navigate = useNavigate();\r\n  const { accountId: urlAccountId } = useParams();\r\n  const location = useLocation();\r\n  const tableRef = useRef(null);\r\n\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n  const [activeAccountId, setActiveAccountId] = useState(null);\r\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n  const [activeSbu, setActiveSbu] = useState(null);\r\n  const [activeProjectType, setActiveProjectType] = useState(null);\r\n\r\n  // New state to manage column filters\r\n  const [columnFilters, setColumnFilters] = useState({});\r\n\r\n  // Backend URL for API calls\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Currency formatting function\r\n  const formatCurrency = (value = 0) =>\r\n    value.toLocaleString(commonData.currencySettings.locale, {\r\n      style: 'currency',\r\n      currency: commonData.currencySettings.currency,\r\n      minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\r\n      maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\r\n    });\r\n\r\n  // Utility to get month name (for file naming)\r\n  const getMonthName = (monthNumber) => {\r\n    if (!monthNumber) return '';\r\n    const date = new Date();\r\n    date.setMonth(monthNumber - 1);\r\n    return date.toLocaleString('en-US', { month: 'long' });\r\n  };\r\n\r\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data and triggers a download.\r\n   */\r\n  const handleDownloadData = () => {\r\n    // Note: This will now download the currently displayed, filtered data.\r\n    const dtInstance = $(tableRef.current).DataTable();\r\n    const headers = [\r\n      \"Project ID\", \"Project Name\", \"Total Associates\", \"Company Hours\",\r\n      \"Client Hours\", \"Variance Hours\", \"Revenue\"\r\n    ];\r\n    \r\n    // Get the data from the currently visible rows in the table\r\n    const csvRows = dtInstance.rows({ search: 'applied' }).data().toArray().map(row => {\r\n        return [\r\n            `\"${row[0]}\"`,\r\n            `\"${row[1]}\"`,\r\n            row[2],\r\n            row[3],\r\n            row[4],\r\n            row[5],\r\n            `\"${row[6]}\"`\r\n        ].join(',');\r\n    });\r\n\r\n    const csvContent = [headers.join(','), ...csvRows].join('\\n');\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n    const monthName = getMonthName(activeMonth);\r\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`;\r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', fileName);\r\n    link.style.visibility = 'hidden';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n  \r\n  /**\r\n   * Generates a unique list of options for a given column key.\r\n   * @param {string} columnKey The key of the column to get unique values for.\r\n   * @returns {string[]} An array of unique values, including an 'All' option.\r\n   */\r\n  const getUniqueOptions = (columnKey) => {\r\n    // Only use the raw projects data to get the full list of options\r\n    const options = projects.map(project => project[columnKey]);\r\n    const uniqueOptions = [...new Set(options)].sort();\r\n    return ['All', ...uniqueOptions];\r\n  };\r\n\r\n  /**\r\n   * Handles changes to a column's filter dropdown.\r\n   * Updates the `columnFilters` state with the new value.\r\n   * @param {string} columnKey The key of the column being filtered.\r\n   * @param {string} value The selected filter value.\r\n   */\r\n  const handleFilterChange = (columnKey, value) => {\r\n    setColumnFilters(prevFilters => ({\r\n      ...prevFilters,\r\n      [columnKey]: value === 'All' ? '' : value\r\n    }));\r\n  };\r\n\r\n  // Load Poppins font from Google Fonts\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Fetch project data when context changes\r\n  useEffect(() => {\r\n    const fetchProjectData = async (month, year, accId, projectType) => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const payload = { month, year, accId, projectType };\r\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(payload)\r\n        });\r\n\r\n        if (!resp.ok) {\r\n          const errText = await resp.text();\r\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\r\n        }\r\n\r\n        const data = await resp.json();\r\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\r\n        setProjects(list);\r\n\r\n        if (list.length > 0 && list[0].accountName) {\r\n          setActiveAccountName(list[0].accountName);\r\n        } else {\r\n          const storedName = sessionStorage.getItem('lastFetchedProjectAccountName');\r\n          setActiveAccountName(storedName || accId);\r\n        }\r\n      } catch (e) {\r\n        console.error('Error fetching project data:', e);\r\n        setError(`Failed to load project data: ${e.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    let monthToUse = location.state?.month || sessionStorage.getItem('lastFetchedProjectMonth');\r\n    let yearToUse = location.state?.year || sessionStorage.getItem('lastFetchedProjectYear');\r\n    let accountIdToUse = urlAccountId;\r\n    let accountNameToUse = location.state?.accountName || sessionStorage.getItem('lastFetchedProjectAccountName');\r\n    let sbuToUse = location.state?.sbu || sessionStorage.getItem('lastFetchedProjectSbu');\r\n    let projectTypeToUse = location.state?.projectType || sessionStorage.getItem('lastFetchedProjectType');\r\n\r\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\r\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\r\n\r\n    if (monthToUse && yearToUse && accountIdToUse) {\r\n      if (\r\n        monthToUse !== activeMonth ||\r\n        yearToUse !== activeYear ||\r\n        accountIdToUse !== activeAccountId ||\r\n        sbuToUse !== activeSbu ||\r\n        projectTypeToUse !== activeProjectType ||\r\n        projects.length === 0\r\n      ) {\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        setActiveAccountId(accountIdToUse);\r\n        if (accountNameToUse) setActiveAccountName(accountNameToUse);\r\n        setActiveSbu(sbuToUse);\r\n        setActiveProjectType(projectTypeToUse);\r\n\r\n        sessionStorage.setItem('lastFetchedProjectMonth', monthToUse.toString());\r\n        sessionStorage.setItem('lastFetchedProjectYear', yearToUse.toString());\r\n        sessionStorage.setItem('lastFetchedProjectAccountId', accountIdToUse);\r\n        if (accountNameToUse) sessionStorage.setItem('lastFetchedProjectAccountName', accountNameToUse);\r\n        if (sbuToUse) sessionStorage.setItem('lastFetchedProjectSbu', sbuToUse);\r\n        if (projectTypeToUse) sessionStorage.setItem('lastFetchedProjectType', projectTypeToUse);\r\n\r\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setError('Missing month, year, or Account ID. Please navigate here with all parameters.');\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    location.state,\r\n    urlAccountId,\r\n    activeMonth,\r\n    activeYear,\r\n    activeAccountId,\r\n    activeSbu,\r\n    activeProjectType,\r\n    projects.length\r\n  ]);\r\n\r\n  // Use a map to connect the column key to its index in the DataTable\r\n  const columnMap = {\r\n    projectId: 0,\r\n    projectName: 1,\r\n    totalAssociatesCount: 2,\r\n    totalCompanyHours: 3,\r\n    totalClientHours: 4,\r\n    varianceHours: 5,\r\n    revenue: 6,\r\n  };\r\n\r\n  // Initialize DataTable when projects data is first loaded\r\n  useEffect(() => {\r\n    if (!loading && projects.length > 0 && tableRef.current) {\r\n      const $tbl = $(tableRef.current);\r\n      if ($.fn.DataTable.isDataTable($tbl)) {\r\n        $tbl.DataTable().destroy();\r\n      }\r\n      $tbl.DataTable({\r\n        data: projects.map(p => [\r\n          p.projectId,\r\n          p.projectName,\r\n          p.totalAssociatesCount,\r\n          p.totalCompanyHours,\r\n          p.totalClientHours,\r\n          p.varianceHours,\r\n          formatCurrency(p.revenue),\r\n          // Add a placeholder for the \"View\" button column\r\n          null,\r\n        ]),\r\n        columns: [\r\n          { title: \"Project ID\" },\r\n          { title: \"Project Name\" },\r\n          { title: \"Total Associates\" },\r\n          { title: \"Company Hours\" },\r\n          { title: \"Client Hours\" },\r\n          { title: \"Variance Hours\" },\r\n          { title: \"Revenue\" },\r\n          { title: \"View\", orderable: false, searchable: false, className: 'text-center' },\r\n        ],\r\n        paging: true,\r\n        searching: true,\r\n        ordering: true,\r\n        info: true,\r\n        autoWidth: false,\r\n        // Manually render the \"View\" button for each row\r\n        columnDefs: [\r\n            {\r\n                targets: 7, // The \"View\" column\r\n                render: function (data, type, row, meta) {\r\n                    const project = projects[meta.row];\r\n                    return `<button\r\n                        class=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n                        onclick=\"window.handleViewClick('${project.projectId}', '${project.projectName}', '${project.accountId}', '${project.accountName}', '${activeMonth}', '${activeYear}', '${activeSbu}', '${activeProjectType}')\"\r\n                        title=\"View Associates\"\r\n                    >\r\n                        🔍\r\n                    </button>`;\r\n                }\r\n            }\r\n        ],\r\n        drawCallback: function() {\r\n            // Re-attach the click handler after each draw to a global function\r\n            window.handleViewClick = (projectId, projectName, accountId, accountName, month, year, sbu, projectType) => {\r\n                navigate(\r\n                    `/projects/${projectId}/associates`,\r\n                    {\r\n                        state: {\r\n                            projectId,\r\n                            projectName,\r\n                            accountId,\r\n                            accountName,\r\n                            month,\r\n                            year,\r\n                            sbu,\r\n                            projectType\r\n                        }\r\n                    }\r\n                );\r\n            };\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (tableRef.current) {\r\n        const $tbl = $(tableRef.current);\r\n        if ($.fn.DataTable.isDataTable($tbl)) {\r\n          $tbl.DataTable().destroy();\r\n        }\r\n      }\r\n    };\r\n  }, [projects, navigate, activeMonth, activeYear, activeSbu, activeProjectType, formatCurrency]);\r\n\r\n  // Apply filters using DataTable's API when `columnFilters` state changes\r\n  useEffect(() => {\r\n    if (!loading && projects.length > 0 && tableRef.current) {\r\n      const dtInstance = $(tableRef.current).DataTable();\r\n      Object.keys(columnFilters).forEach(columnKey => {\r\n        const columnIndex = columnMap[columnKey];\r\n        if (columnIndex !== undefined) {\r\n          const filterValue = columnFilters[columnKey] || '';\r\n          dtInstance.column(columnIndex).search(filterValue).draw();\r\n        }\r\n      });\r\n    }\r\n  }, [columnFilters, loading, projects]);\r\n\r\n\r\n  // Define breadcrumb path for navigation\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' },\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n    ...(activeSbu ? [{ name: `${activeSbu} SBU Level`, page: 'sbu', state: { month: activeMonth, year: activeYear, sbu: activeSbu } }] : []),\r\n    { name: 'Account Level', page: `accounts`, state: { month: activeMonth, year: activeYear, sbu: activeSbu } },\r\n    ...(activeProjectType ? [{ name: `${activeProjectType} Project Type`, page: `accounts/${activeAccountId}/project-types`, state: { month: activeMonth, year: activeYear, sbu: activeSbu, accId: activeAccountId } }] : []),\r\n    {\r\n      name: `Projects (${activeAccountName})`,\r\n      page: `accounts/${activeAccountId}/projects`\r\n    }\r\n  ].filter(Boolean);\r\n\r\n  // Render loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\" />\r\n        <p className=\"ms-3 text-primary\">Loading Project Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        <button\r\n          className=\"btn btn-primary mt-3\"\r\n          onClick={() => navigate('/accounts', { state: { month: activeMonth, year: activeYear, sbu: activeSbu } })}\r\n        >\r\n          Go to Account Level\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main component render\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{\r\n          maxWidth: '1200px',\r\n          backgroundColor: '#ffffffdd',\r\n          borderRadius: '1rem'\r\n        }}\r\n      >\r\n        {/* Breadcrumbs component */}\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n          <h2 className=\"mb-0 fw-semibold text-dark\">\r\n            📁 Project Level Overview{' '}\r\n            {activeAccountId ? `for ${activeAccountName}` : ''}\r\n          </h2>\r\n          {/* Download button, visible only if projects are loaded */}\r\n          {projects.length > 0 && (\r\n            <button\r\n              className=\"btn btn-outline-success rounded-pill px-3\"\r\n              onClick={handleDownloadData}\r\n              title=\"Download Project Data\"\r\n            >\r\n              <i className=\"bi bi-download me-2\"></i> Download Data\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Responsive table container */}\r\n        <div className=\"table-responsive rounded\">\r\n          <table\r\n            ref={tableRef}\r\n            className=\"display table table-hover align-middle table-borderless mb-0\"\r\n            style={{ width: '100%' }}\r\n          >\r\n            <thead\r\n              className=\"text-white\"\r\n              style={{ background: 'linear-gradient(to right, #3b82f6, #2563eb)' }}\r\n            >\r\n              <tr>\r\n                <th>\r\n                  Project ID\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('projectId', e.target.value)}\r\n                    value={columnFilters.projectId || 'All'}\r\n                  >\r\n                    {getUniqueOptions('projectId').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Project Name\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('projectName', e.target.value)}\r\n                    value={columnFilters.projectName || 'All'}\r\n                  >\r\n                    {getUniqueOptions('projectName').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Total Associates\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('totalAssociatesCount', e.target.value)}\r\n                    value={columnFilters.totalAssociatesCount || 'All'}\r\n                  >\r\n                    {getUniqueOptions('totalAssociatesCount').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>Company Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('totalCompanyHours', e.target.value)}\r\n                    value={columnFilters.totalCompanyHours || 'All'}\r\n                  >\r\n                    {getUniqueOptions('totalCompanyHours').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>Client Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('totalClientHours', e.target.value)}\r\n                    value={columnFilters.totalClientHours || 'All'}\r\n                  >\r\n                    {getUniqueOptions('totalClientHours').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>Variance Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('varianceHours', e.target.value)}\r\n                    value={columnFilters.varianceHours || 'All'}\r\n                  >\r\n                    {getUniqueOptions('varianceHours').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>Revenue\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('revenue', e.target.value)}\r\n                    value={columnFilters.revenue || 'All'}\r\n                  >\r\n                    {getUniqueOptions('revenue').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th className=\"text-center\">View</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {/* DataTables will now handle populating the tbody */}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectLevel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}