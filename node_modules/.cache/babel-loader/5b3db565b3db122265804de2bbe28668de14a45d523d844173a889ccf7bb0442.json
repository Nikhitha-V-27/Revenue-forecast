{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\AssociateLevel.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs';\n\n// const AssociateLevel = () => {\n//   const navigate = useNavigate();\n//   const { projectId } = useParams();\n\n//   const associates = [\n//     {\n//       id: 'A001',\n//       name: 'Alice',\n//       ctsHour: 160,\n//       clientHour: 155,\n//       managerId: 'M001',\n//       managerName: 'John Doe',\n//       rate: 50,\n//       projectId: 'P001'\n//     },\n//     {\n//       id: 'A002',\n//       name: 'Bob',\n//       ctsHour: 140,\n//       clientHour: 140,\n//       managerId: 'M002',\n//       managerName: 'Jane Smith',\n//       rate: 60,\n//       projectId: 'P001'\n//     }\n//   ].filter(a => a.projectId === projectId);\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 w-100\"\n//         style={{\n//           maxWidth: '1100px',\n//           backgroundColor: '#ffffffee',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs\n//           path={[\n//             { name: 'PMO Dashboard', page: '' },\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\n//             { name: 'Project Level', page: 'projects' },\n//             { name: `Associates (${projectId})`, page: `projects/${projectId}/associates` }\n//           ]}\n//         />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n//           üë§ Associate Details ‚Äì Project: {projectId}\n//         </h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n//             <thead\n//               style={{\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\n//                 color: 'white'\n//               }}\n//             >\n//               <tr>\n//                 <th>ID</th>\n//                 <th>Name</th>\n//                 <th>CTS Hours</th>\n//                 <th>Client Hours</th>\n//                 <th>Variance</th>\n//                 <th>Manager</th>\n//                 <th>Rate</th>\n//                 <th className=\"text-center\">Notify</th>\n//                 <th className=\"text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {associates.map((a) => (\n//                 <tr key={a.id}>\n//                   <td>{a.id}</td>\n//                   <td>{a.name}</td>\n//                   <td>{a.ctsHour}</td>\n//                   <td>{a.clientHour}</td>\n//                   <td\n//                     className={`fw-semibold ${\n//                       a.ctsHour - a.clientHour > 0\n//                         ? 'text-danger'\n//                         : a.ctsHour - a.clientHour < 0\n//                         ? 'text-primary'\n//                         : 'text-success'\n//                     }`}\n//                   >\n//                     {a.ctsHour - a.clientHour}\n//                   </td>\n//                   <td>{a.managerName}</td>\n//                   <td>${a.rate}</td>\n//                   <td className=\"text-center\">\n//                     <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\n//                       Notify\n//                     </button>\n//                   </td>\n//                   <td className=\"text-center\">\n//                     <button\n//                       onClick={() => navigate(`/projects/${projectId}/associates/${a.id}`)}\n//                       className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                       title=\"View Associate\"\n//                     >\n//                       üîç\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//               {associates.length === 0 && (\n//                 <tr>\n//                   <td colSpan=\"9\" className=\"text-center text-muted py-4\">\n//                     No associates found for this project.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AssociateLevel;\n\n// import React, { useEffect } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\n// import associateData from '../../data/associateData.json'; // CORRECTED PATH: data is two levels up\n// import projectData from '../../data/projectData.json'; // CORRECTED PATH: data is two levels up\n\n// const AssociateLevel = () => {\n//   const navigate = useNavigate();\n//   const { projectId } = useParams(); // Get projectId from URL parameters\n\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Filter associates based on projectId\n//   const associates = associateData.associates.filter(a => a.projectId === projectId);\n\n//   // Get project name for breadcrumbs\n//   const currentProject = projectData.projects.find(p => p.id === projectId);\n//   const projectName = currentProject ? currentProject.name : projectId; // Fallback to ID if not found\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 w-100\"\n//         style={{\n//           maxWidth: '1100px',\n//           backgroundColor: '#ffffffee',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs\n//           path={[\n//             { name: 'PMO Dashboard', page: '' },\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\n//             { name: 'Account Level', page: 'accounts' }, // Added for full path\n//             { name: `Projects (${currentProject?.accountName})`, page: `accounts/${currentProject?.accountId}/projects` }, // Added for full path\n//             { name: `Associates (${projectName})`, page: `projects/${projectId}/associates` }\n//           ]}\n//         />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n//           üë§ Associate Details ‚Äì Project: {projectName}\n//         </h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n//             <thead\n//               style={{\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\n//                 color: 'white'\n//               }}\n//             >\n//               <tr>\n//                 <th>ID</th>\n//                 <th>Name</th>\n//                 <th>CTS Hours</th>\n//                 <th>Client Hours</th>\n//                 <th>Variance</th>\n//                 <th>Manager</th>\n//                 <th>Rate</th>\n//                 <th className=\"text-center\">Notify</th>\n//                 <th className=\"text-center\">View Daily</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {associates.length > 0 ? (\n//                 associates.map((a) => {\n//                   const variance = a.ctsHour - a.clientHour;\n//                   return (\n//                     <tr key={a.id}>\n//                       <td>{a.id}</td>\n//                       <td>{a.name}</td>\n//                       <td>{a.ctsHour}</td>\n//                       <td>{a.clientHour}</td>\n//                       <td\n//                         className={`fw-semibold ${\n//                           variance > 0\n//                             ? 'text-danger'\n//                             : variance < 0\n//                             ? 'text-primary'\n//                             : 'text-success'\n//                         }`}\n//                       >\n//                         {variance}\n//                       </td>\n//                       <td>{a.managerName}</td>\n//                       <td>${a.rate}</td>\n//                       <td className=\"text-center\">\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\n//                           Notify\n//                         </button>\n//                       </td>\n//                       <td className=\"text-center\">\n//                         <button\n//                           onClick={() => navigate(`/projects/${projectId}/associates/${a.id}`)}\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                           title=\"View Daily Hours\"\n//                         >\n//                           üîç\n//                         </button>\n//                       </td>\n//                     </tr>\n//                   );\n//                 })\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"9\" className=\"text-center text-muted py-4\">\n//                     No associates found for this project.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AssociateLevel;\n// import React, { useEffect, useState } from 'react';\n\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\n\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n\n// const AssociateLevel = () => {\n\n//   const navigate = useNavigate();\n\n//   const { projectId: urlProjectId } = useParams(); // Get projectId from URL parameters\n\n//   const location = useLocation(); // Hook to access location state\n\n//   // State for fetched associate data\n\n//   const [associates, setAssociates] = useState([]);\n\n//   // State for loading indicator\n\n//   const [loading, setLoading] = useState(true);\n\n//   // State for error messages\n\n//   const [error, setError] = useState(null);\n\n//   // States to keep track of the context (month, year, projectId, accountId) for which data was last fetched\n\n//   const [activeMonth, setActiveMonth] = useState(null);\n\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   const [activeProjectId, setActiveProjectId] = useState(null);\n\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\n\n//   const [activeAccountId, setActiveAccountId] = useState(null);\n\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\n\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Set font family on component mount\n\n//   useEffect(() => {\n\n//     const link = document.createElement('link');\n\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n\n//     link.rel = 'stylesheet';\n\n//     document.head.appendChild(link);\n\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n\n//   }, []);\n\n//   // Effect to handle context and fetch data\n\n//   useEffect(() => {\n\n//     const fetchAssociateData = async (month, year, projId) => {\n\n//       setLoading(true);\n\n//       setError(null);\n\n//       // Construct the request body as expected by your backend\n\n//       const requestBody = {\n\n//         month: month,\n\n//         year: year,\n\n//         projectId: projId // Pass the project ID\n\n//       };\n\n//       console.log(\"Fetching associate data with request body (POST):\", requestBody); // For debugging\n\n//       try {\n\n//         const response = await fetch(`${BACKEND_URL}/api/associate`, {\n\n//           method: 'POST', // As per your backend spec\n\n//           headers: {\n\n//             'Content-Type': 'application/json',\n\n//           },\n\n//           body: JSON.stringify(requestBody),\n\n//         });\n\n//         if (!response.ok) {\n\n//           const errorText = await response.text();\n\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n\n//         }\n\n//         const data = await response.json();\n\n//         setAssociates(Array.isArray(data) ? data : [data].filter(Boolean));\n\n//         // Try to derive project and account names from fetched data if available\n\n//         if (data && data.length > 0) {\n\n//           if (data[0].projectName) setActiveProjectName(data[0].projectName);\n\n//           if (data[0].accountName) setActiveAccountName(data[0].accountName);\n\n//           if (data[0].accountId) setActiveAccountId(data[0].accountId); // Ensure accountId is set\n\n//         } else {\n\n//           // Fallback to stored names or IDs if data is empty or names are missing\n\n//           const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\n\n//           const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\n\n//           const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\n\n//           if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\n\n//           if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\n\n//           if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\n\n//         }\n\n//       } catch (err) {\n\n//         console.error(\"Error fetching associate data:\", err);\n\n//         setError(`Failed to load associate data: ${err.message || \"Network error\"}`);\n\n//       } finally {\n\n//         setLoading(false);\n\n//       }\n\n//     };\n\n//     // Logic to determine context for fetching\n\n//     let monthToUse = location.state?.month;\n\n//     let yearToUse = location.state?.year;\n\n//     let projectIdToUse = urlProjectId; // Always get projectId from URL params\n\n//     let accountIdToUse = location.state?.accountId; // Get accountId from state for breadcrumbs\n\n//     let accountNameToUse = location.state?.accountName; // Get accountName from state for breadcrumbs\n\n//     let projectNameToUse = location.state?.projectName; // Get project name from state for breadcrumbs\n\n//     // If context is not in location.state (e.g., on back navigation), check sessionStorage\n\n//     if (!monthToUse || !yearToUse || !projectIdToUse || !accountIdToUse || !projectNameToUse) {\n\n//       const storedMonth = sessionStorage.getItem('lastFetchedAssociateMonth');\n\n//       const storedYear = sessionStorage.getItem('lastFetchedAssociateYear');\n\n//       const storedProjectId = sessionStorage.getItem('lastFetchedAssociateProjectId');\n\n//       const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\n\n//       const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\n\n//       const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\n\n//       if (storedMonth && storedYear && storedProjectId) {\n\n//         monthToUse = parseInt(storedMonth, 10);\n\n//         yearToUse = parseInt(storedYear, 10);\n\n//         projectIdToUse = storedProjectId;\n\n//         if (storedProjectName) projectNameToUse = storedProjectName;\n\n//         if (storedAccountId) accountIdToUse = storedAccountId;\n\n//         if (storedAccountName) accountNameToUse = storedAccountName;\n\n//       }\n\n//     }\n\n//     // If we have valid context, set active states and fetch data if needed\n\n//     if (monthToUse && yearToUse && projectIdToUse && accountIdToUse && projectNameToUse) {\n\n//       // Only fetch if the context has changed or if associates are empty\n\n//       if (\n\n//         monthToUse !== activeMonth ||\n\n//         yearToUse !== activeYear ||\n\n//         projectIdToUse !== activeProjectId ||\n\n//         associates.length === 0\n\n//       ) {\n\n//         setActiveMonth(monthToUse);\n\n//         setActiveYear(yearToUse);\n\n//         setActiveProjectId(projectIdToUse);\n\n//         setActiveProjectName(projectNameToUse); // Set project name from state\n\n//         setActiveAccountId(accountIdToUse); // Set account ID from state\n\n//         setActiveAccountName(accountNameToUse); // Set account name from state\n\n//         // Store current context in sessionStorage\n\n//         sessionStorage.setItem('lastFetchedAssociateMonth', monthToUse.toString());\n\n//         sessionStorage.setItem('lastFetchedAssociateYear', yearToUse.toString());\n\n//         sessionStorage.setItem('lastFetchedAssociateProjectId', projectIdToUse);\n\n//         sessionStorage.setItem('lastFetchedAssociateProjectName', projectNameToUse);\n\n//         sessionStorage.setItem('lastFetchedAssociateAccountId', accountIdToUse);\n\n//         sessionStorage.setItem('lastFetchedAssociateAccountName', accountNameToUse);\n\n//         fetchAssociateData(monthToUse, yearToUse, projectIdToUse);\n\n//       } else {\n\n//         // Data is already present for the active context, no need to fetch\n\n//         setLoading(false);\n\n//       }\n\n//     } else {\n\n//       // No valid context found, show error\n\n//       setError(\"Missing associate context (month, year, project ID, or account ID). Please go back and select a project.\");\n\n//       setLoading(false);\n\n//     }\n\n//   }, [location.state, urlProjectId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAccountId, activeAccountName, activeProjectName, associates.length]); // Dependencies for useEffect\n\n//   // Adjust breadcrumb path based on active states\n\n//   const breadcrumbPath = [\n\n//     { name: 'PMO Dashboard', page: '' },\n\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n\n//     { name: 'Account Level', page: 'accounts' },\n\n//     { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\n\n//     { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` }\n\n//   ];\n\n//   // Render loading state\n\n//   if (loading) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n\n//           <span className=\"visually-hidden\">Loading Associate Data...</span>\n\n//         </div>\n\n//         <p className=\"ms-3 text-primary\">Loading Associate Data...</p>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   // Render error state\n\n//   if (error) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n\n//         <p className=\"fs-4\">Error: {error}</p>\n\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/accounts/${activeAccountId}/projects`)}>\n\n//           Go to Project Level\n\n//         </button>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   return (\n\n//     <div\n\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n\n//       style={{\n\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n\n//         fontFamily: \"'Poppins', sans-serif\"\n\n//       }}\n\n//     >\n\n//       <div\n\n//         className=\"card shadow p-4 w-100\"\n\n//         style={{\n\n//           maxWidth: '1100px',\n\n//           backgroundColor: '#ffffffee',\n\n//           borderRadius: '1rem'\n\n//         }}\n\n//       >\n\n//         <Breadcrumbs path={breadcrumbPath} />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n\n//           üë§ Associate Details ‚Äì Project: {activeProjectName}\n\n//         </h2>\n\n//         <div className=\"table-responsive rounded\">\n\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n\n//             <thead\n\n//               style={{\n\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\n\n//                 color: 'white'\n\n//               }}\n\n//             >\n\n//               <tr>\n\n//                 <th>Associate ID</th>\n\n//                 <th>Associate Name</th>\n\n//                 <th>Project ID</th>\n\n//                 <th>Project Name</th>\n\n//                 <th>PM ID</th>\n\n//                 <th>Total Company Hours (Monthly)</th>\n\n//                 <th>Total Client Hours (Monthly)</th>\n\n//                 <th>Variance Hours (Monthly)</th>\n\n//                 <th>Actual Revenue</th>\n\n//                 <th>Associate Rate</th>\n\n//                 <th className=\"text-center\">Notify</th>\n\n//                 <th className=\"text-center\">View Daily</th>\n\n//               </tr>\n\n//             </thead>\n\n//             <tbody>\n\n//               {associates.length > 0 ? (\n\n//                 associates.map((associate) => {\n\n//                   // const variance = associate.totalCompanyHoursMonthly - associate.totalClientHoursMonthly; // Assuming variance is Company - Client\n\n//                   return (\n\n//                     <tr key={associate.associateId}>\n\n//                       <td>{associate.associateId}</td>\n\n//                       <td>{associate.associateName}</td>\n\n//                       <td>{associate.projectId}</td>\n\n//                       <td>{associate.projectName}</td>\n\n//                       <td>{associate.esaID}</td>\n\n//                       <td>{associate.totalCompanyHoursMonthly}</td>\n\n//                       <td>{associate.totalClientHoursMonthly}</td>\n\n//                       <td>{associate.varianceHoursMonthly}</td>\n\n//                       {/* <td\n\n//             className={`fw-semibold ${\n\n//              variance > 0\n\n//               ? 'text-danger'\n\n//               : variance < 0\n\n//               ? 'text-primary'\n\n//               : 'text-success'\n\n//             }`}\n\n//            >\n\n//             {variance}\n\n//            </td> */}\n\n//                       <td>${associate.actualRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n\n//                       <td>${associate.associateRtRate.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n\n//                       <td className=\"text-center\">\n\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\n\n//                           Notify\n\n//                         </button>\n\n//                       </td>\n\n//                       <td className=\"text-center\">\n\n//                         <button\n\n//                           // Navigate to DateLevel, passing full context\n\n//                           onClick={() => {\n\n//                             const targetPath = `/projects/${associate.projectId}/associates/${associate.associateId}/daily`;\n\n//                             const stateToPass = {\n\n//                               month: activeMonth,\n\n//                               year: activeYear,\n\n//                               projectId: associate.projectId, // Use from current associate object\n\n//                               projectName: associate.projectName, // Use from current associate object\n\n//                               accountId: activeAccountId, // Use from AssociateLevel's state\n\n//                               accountName: activeAccountName, // Use from AssociateLevel's state\n\n//                               associateId: associate.associateId,\n\n//                               associateName: associate.associateName\n\n//                             };\n\n//                             // ADD THIS LOG: Check the path and state before navigation\n\n//                             console.log(\"Navigating to DateLevel with path:\", targetPath, \"and state:\", stateToPass);\n\n//                             navigate(targetPath, { state: stateToPass });\n\n//                           }}\n\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\n\n//                           title=\"View Daily Hours\"\n\n//                         >\n\n//                           üîç\n\n//                         </button>\n\n//                       </td>\n\n//                     </tr>\n\n//                   );\n\n//                 })\n\n//               ) : (\n\n//                 <tr>\n\n//                   <td colSpan=\"11\" className=\"text-center text-muted py-4\">\n\n//                     No associates found for this project and period.\n\n//                   </td>\n\n//                 </tr>\n\n//               )}\n\n//             </tbody>\n\n//           </table>\n\n//         </div>\n\n//       </div>\n\n//     </div>\n\n//   );\n\n// };\n\n// export default AssociateLevel;\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssociateLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    projectId: urlProjectId\n  } = useParams(); // Get projectId from URL parameters\n  const location = useLocation(); // Hook to access location state\n\n  // State for fetched associate data\n  const [associates, setAssociates] = useState([]);\n  // State for loading indicator\n  const [loading, setLoading] = useState(true);\n  // State for error messages\n  const [error, setError] = useState(null);\n\n  // States to keep track of the context (month, year, projectId, accountId) for which data was last fetched\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeProjectId, setActiveProjectId] = useState(null);\n  const [activeProjectName, setActiveProjectName] = useState('Loading...');\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\n\n  // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Set font family on component mount\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Effect to handle context and fetch data\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5;\n    const fetchAssociateData = async (month, year, projId) => {\n      setLoading(true);\n      setError(null);\n\n      // Construct the request body as expected by your backend\n      const requestBody = {\n        month: month,\n        year: year,\n        projectId: projId // Pass the project ID\n      };\n      console.log(\"Fetching associate data with request body (POST):\", requestBody); // For debugging\n\n      try {\n        const response = await fetch(`${BACKEND_URL}/api/associate`, {\n          method: 'POST',\n          // As per your backend spec\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n        }\n        const data = await response.json();\n        setAssociates(Array.isArray(data) ? data : [data].filter(Boolean));\n\n        // Try to derive project and account names from fetched data if available\n        if (data && data.length > 0) {\n          if (data[0].projectName) setActiveProjectName(data[0].projectName);\n          if (data[0].accountName) setActiveAccountName(data[0].accountName);\n          if (data[0].accountId) setActiveAccountId(data[0].accountId); // Ensure accountId is set\n        } else {\n          // Fallback to stored names or IDs if data is empty or names are missing\n          const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\n          const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\n          const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\n          if (storedProjectName) setActiveProjectName(storedProjectName);else setActiveProjectName(projId);\n          if (storedAccountName) setActiveAccountName(storedAccountName);else setActiveAccountName('Unknown Account');\n          if (storedAccountId) setActiveAccountId(storedAccountId);else setActiveAccountId('Unknown Account ID');\n        }\n      } catch (err) {\n        console.error(\"Error fetching associate data:\", err);\n        setError(`Failed to load associate data: ${err.message || \"Network error\"}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Logic to determine context for fetching\n    let monthToUse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let yearToUse = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    let projectIdToUse = urlProjectId; // Always get projectId from URL params\n    let accountIdToUse = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.accountId; // Get accountId from state for breadcrumbs\n    let accountNameToUse = (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.accountName; // Get accountName from state for breadcrumbs\n    let projectNameToUse = (_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.projectName; // Get project name from state for breadcrumbs\n\n    // If context is not in location.state (e.g., on back navigation), check sessionStorage\n    if (!monthToUse || !yearToUse || !projectIdToUse || !accountIdToUse || !projectNameToUse) {\n      const storedMonth = sessionStorage.getItem('lastFetchedAssociateMonth');\n      const storedYear = sessionStorage.getItem('lastFetchedAssociateYear');\n      const storedProjectId = sessionStorage.getItem('lastFetchedAssociateProjectId');\n      const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\n      const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\n      const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\n      if (storedMonth && storedYear && storedProjectId) {\n        monthToUse = parseInt(storedMonth, 10);\n        yearToUse = parseInt(storedYear, 10);\n        projectIdToUse = storedProjectId;\n        if (storedProjectName) projectNameToUse = storedProjectName;\n        if (storedAccountId) accountIdToUse = storedAccountId;\n        if (storedAccountName) accountNameToUse = storedAccountName;\n      }\n    }\n\n    // If we have valid context, set active states and fetch data if needed\n    if (monthToUse && yearToUse && projectIdToUse && accountIdToUse && projectNameToUse) {\n      // Only fetch if the context has changed or if associates are empty\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || projectIdToUse !== activeProjectId || associates.length === 0) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        setActiveProjectId(projectIdToUse);\n        setActiveProjectName(projectNameToUse); // Set project name from state\n        setActiveAccountId(accountIdToUse); // Set account ID from state\n        setActiveAccountName(accountNameToUse); // Set account name from state\n\n        // Store current context in sessionStorage\n        sessionStorage.setItem('lastFetchedAssociateMonth', monthToUse.toString());\n        sessionStorage.setItem('lastFetchedAssociateYear', yearToUse.toString());\n        sessionStorage.setItem('lastFetchedAssociateProjectId', projectIdToUse);\n        sessionStorage.setItem('lastFetchedAssociateProjectName', projectNameToUse);\n        sessionStorage.setItem('lastFetchedAssociateAccountId', accountIdToUse);\n        sessionStorage.setItem('lastFetchedAssociateAccountName', accountNameToUse);\n        fetchAssociateData(monthToUse, yearToUse, projectIdToUse);\n      } else {\n        // Data is already present for the active context, no need to fetch\n        setLoading(false);\n      }\n    } else {\n      // No valid context found, show error\n      setError(\"Missing associate context (month, year, project ID, or account ID). Please go back and select a project.\");\n      setLoading(false);\n    }\n  }, [location.state, urlProjectId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAccountId, activeAccountName, activeProjectName, associates.length]); // Dependencies for useEffect\n\n  // Adjust breadcrumb path based on active states\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  }, {\n    name: 'Account Level',\n    page: 'accounts'\n  }, {\n    name: `Projects (${activeAccountName})`,\n    page: `accounts/${activeAccountId}/projects`\n  }, {\n    name: `Associates (${activeProjectName})`,\n    page: `projects/${activeProjectId}/associates`\n  }];\n\n  // Placeholder function for Notify All\n  const handleNotifyAll = () => {\n    alert('Notifying all associates for this project!');\n    // Implement your actual notification logic here\n  };\n\n  // Placeholder function for Download Data\n  const handleDownloadData = () => {\n    alert('Downloading associate data for this project!');\n    // Implement your actual data download logic here\n    // You might want to format 'associates' data into CSV or Excel and trigger a download\n  };\n\n  // Render loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading Associate Data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1010,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Associate Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1012,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1008,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate(`/accounts/${activeAccountId}/projects`),\n        children: \"Go to Project Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1020,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 w-100\",\n      style: {\n        maxWidth: '1100px',\n        backgroundColor: '#ffffffee',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1045,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-0 fw-semibold text-dark\",\n          children: [\"\\uD83D\\uDC64 Associate Details \\u2013 Project: \", activeProjectName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1048,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-outline-info rounded-pill px-3\",\n            onClick: handleNotifyAll,\n            children: \"Notify All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1052,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-outline-success rounded-pill px-3\",\n            onClick: handleDownloadData,\n            children: \"Download Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1058,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1051,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1047,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-hover table-borderless align-middle mb-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            style: {\n              background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\n              color: 'white'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Associate ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1076,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Associate Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1077,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1078,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1079,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PM ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1080,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Total Company Hours (Monthly)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1081,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Total Client Hours (Monthly)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1082,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Variance Hours (Monthly)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1083,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Actual Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1084,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Associate Rate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1085,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-center\",\n                children: \"Notify\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1086,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-center\",\n                children: \"View Daily\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1087,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1075,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1069,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: associates.length > 0 ? associates.map(associate => {\n              // const variance = associate.totalCompanyHoursMonthly - associate.totalClientHoursMonthly; // Assuming variance is Company - Client\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: associate.associateId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1096,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: associate.associateName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1097,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: associate.projectId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1098,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: associate.projectName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1099,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: associate.esaID\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1100,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: associate.totalCompanyHoursMonthly\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1101,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: associate.totalClientHoursMonthly\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1102,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: associate.varianceHoursMonthly\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1103,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [\"$\", associate.actualRevenue.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1115,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [\"$\", associate.associateRtRate.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1116,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-sm btn-outline-info rounded-pill px-3\",\n                    children: \"Notify\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1118,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1117,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    // Navigate to DateLevel, passing full context\n                    onClick: () => {\n                      const targetPath = `/projects/${associate.projectId}/associates/${associate.associateId}/daily`;\n                      const stateToPass = {\n                        month: activeMonth,\n                        year: activeYear,\n                        projectId: associate.projectId,\n                        // Use from current associate object\n                        projectName: associate.projectName,\n                        // Use from current associate object\n                        accountId: activeAccountId,\n                        // Use from AssociateLevel's state\n                        accountName: activeAccountName,\n                        // Use from AssociateLevel's state\n                        associateId: associate.associateId,\n                        associateName: associate.associateName\n                      };\n                      // ADD THIS LOG: Check the path and state before navigation\n                      console.log(\"Navigating to DateLevel with path:\", targetPath, \"and state:\", stateToPass);\n                      navigate(targetPath, {\n                        state: stateToPass\n                      });\n                    },\n                    className: \"btn btn-sm btn-outline-primary rounded-circle\",\n                    title: \"View Daily Hours\",\n                    children: \"\\uD83D\\uDD0D\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1123,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1122,\n                  columnNumber: 23\n                }, this)]\n              }, associate.associateId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1095,\n                columnNumber: 21\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"11\",\n                className: \"text-center text-muted py-4\",\n                children: \"No associates found for this project and period.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1152,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1151,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1090,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1068,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1037,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1030,\n    columnNumber: 5\n  }, this);\n};\n_s(AssociateLevel, \"s5t78uHiJZtCkp2J+27EAfD/fgc=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = AssociateLevel;\nexport default AssociateLevel;\nvar _c;\n$RefreshReg$(_c, \"AssociateLevel\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","useLocation","Breadcrumbs","jsxDEV","_jsxDEV","AssociateLevel","_s","navigate","projectId","urlProjectId","location","associates","setAssociates","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeProjectId","setActiveProjectId","activeProjectName","setActiveProjectName","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","BACKEND_URL","link","document","createElement","href","rel","head","appendChild","body","style","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","fetchAssociateData","month","year","projId","requestBody","console","log","response","fetch","method","headers","JSON","stringify","ok","errorText","text","Error","status","statusText","data","json","Array","isArray","filter","Boolean","length","projectName","accountName","accountId","storedProjectName","sessionStorage","getItem","storedAccountName","storedAccountId","err","message","monthToUse","state","yearToUse","projectIdToUse","accountIdToUse","accountNameToUse","projectNameToUse","storedMonth","storedYear","storedProjectId","parseInt","setItem","toString","breadcrumbPath","name","page","handleNotifyAll","alert","handleDownloadData","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","color","map","associate","associateId","associateName","esaID","totalCompanyHoursMonthly","totalClientHoursMonthly","varianceHoursMonthly","actualRevenue","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","associateRtRate","targetPath","stateToPass","title","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/AssociateLevel.js"],"sourcesContent":["// import React from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs';\r\n\r\n// const AssociateLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const { projectId } = useParams();\r\n\r\n//   const associates = [\r\n//     {\r\n//       id: 'A001',\r\n//       name: 'Alice',\r\n//       ctsHour: 160,\r\n//       clientHour: 155,\r\n//       managerId: 'M001',\r\n//       managerName: 'John Doe',\r\n//       rate: 50,\r\n//       projectId: 'P001'\r\n//     },\r\n//     {\r\n//       id: 'A002',\r\n//       name: 'Bob',\r\n//       ctsHour: 140,\r\n//       clientHour: 140,\r\n//       managerId: 'M002',\r\n//       managerName: 'Jane Smith',\r\n//       rate: 60,\r\n//       projectId: 'P001'\r\n//     }\r\n//   ].filter(a => a.projectId === projectId);\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 w-100\"\r\n//         style={{\r\n//           maxWidth: '1100px',\r\n//           backgroundColor: '#ffffffee',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs\r\n//           path={[\r\n//             { name: 'PMO Dashboard', page: '' },\r\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//             { name: 'Project Level', page: 'projects' },\r\n//             { name: `Associates (${projectId})`, page: `projects/${projectId}/associates` }\r\n//           ]}\r\n//         />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n//           üë§ Associate Details ‚Äì Project: {projectId}\r\n//         </h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n//             <thead\r\n//               style={{\r\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\r\n//                 color: 'white'\r\n//               }}\r\n//             >\r\n//               <tr>\r\n//                 <th>ID</th>\r\n//                 <th>Name</th>\r\n//                 <th>CTS Hours</th>\r\n//                 <th>Client Hours</th>\r\n//                 <th>Variance</th>\r\n//                 <th>Manager</th>\r\n//                 <th>Rate</th>\r\n//                 <th className=\"text-center\">Notify</th>\r\n//                 <th className=\"text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {associates.map((a) => (\r\n//                 <tr key={a.id}>\r\n//                   <td>{a.id}</td>\r\n//                   <td>{a.name}</td>\r\n//                   <td>{a.ctsHour}</td>\r\n//                   <td>{a.clientHour}</td>\r\n//                   <td\r\n//                     className={`fw-semibold ${\r\n//                       a.ctsHour - a.clientHour > 0\r\n//                         ? 'text-danger'\r\n//                         : a.ctsHour - a.clientHour < 0\r\n//                         ? 'text-primary'\r\n//                         : 'text-success'\r\n//                     }`}\r\n//                   >\r\n//                     {a.ctsHour - a.clientHour}\r\n//                   </td>\r\n//                   <td>{a.managerName}</td>\r\n//                   <td>${a.rate}</td>\r\n//                   <td className=\"text-center\">\r\n//                     <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\r\n//                       Notify\r\n//                     </button>\r\n//                   </td>\r\n//                   <td className=\"text-center\">\r\n//                     <button\r\n//                       onClick={() => navigate(`/projects/${projectId}/associates/${a.id}`)}\r\n//                       className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                       title=\"View Associate\"\r\n//                     >\r\n//                       üîç\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//               {associates.length === 0 && (\r\n//                 <tr>\r\n//                   <td colSpan=\"9\" className=\"text-center text-muted py-4\">\r\n//                     No associates found for this project.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AssociateLevel;\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\r\n// import associateData from '../../data/associateData.json'; // CORRECTED PATH: data is two levels up\r\n// import projectData from '../../data/projectData.json'; // CORRECTED PATH: data is two levels up\r\n\r\n// const AssociateLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const { projectId } = useParams(); // Get projectId from URL parameters\r\n\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Filter associates based on projectId\r\n//   const associates = associateData.associates.filter(a => a.projectId === projectId);\r\n\r\n//   // Get project name for breadcrumbs\r\n//   const currentProject = projectData.projects.find(p => p.id === projectId);\r\n//   const projectName = currentProject ? currentProject.name : projectId; // Fallback to ID if not found\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 w-100\"\r\n//         style={{\r\n//           maxWidth: '1100px',\r\n//           backgroundColor: '#ffffffee',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs\r\n//           path={[\r\n//             { name: 'PMO Dashboard', page: '' },\r\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//             { name: 'Account Level', page: 'accounts' }, // Added for full path\r\n//             { name: `Projects (${currentProject?.accountName})`, page: `accounts/${currentProject?.accountId}/projects` }, // Added for full path\r\n//             { name: `Associates (${projectName})`, page: `projects/${projectId}/associates` }\r\n//           ]}\r\n//         />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n//           üë§ Associate Details ‚Äì Project: {projectName}\r\n//         </h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n//             <thead\r\n//               style={{\r\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\r\n//                 color: 'white'\r\n//               }}\r\n//             >\r\n//               <tr>\r\n//                 <th>ID</th>\r\n//                 <th>Name</th>\r\n//                 <th>CTS Hours</th>\r\n//                 <th>Client Hours</th>\r\n//                 <th>Variance</th>\r\n//                 <th>Manager</th>\r\n//                 <th>Rate</th>\r\n//                 <th className=\"text-center\">Notify</th>\r\n//                 <th className=\"text-center\">View Daily</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {associates.length > 0 ? (\r\n//                 associates.map((a) => {\r\n//                   const variance = a.ctsHour - a.clientHour;\r\n//                   return (\r\n//                     <tr key={a.id}>\r\n//                       <td>{a.id}</td>\r\n//                       <td>{a.name}</td>\r\n//                       <td>{a.ctsHour}</td>\r\n//                       <td>{a.clientHour}</td>\r\n//                       <td\r\n//                         className={`fw-semibold ${\r\n//                           variance > 0\r\n//                             ? 'text-danger'\r\n//                             : variance < 0\r\n//                             ? 'text-primary'\r\n//                             : 'text-success'\r\n//                         }`}\r\n//                       >\r\n//                         {variance}\r\n//                       </td>\r\n//                       <td>{a.managerName}</td>\r\n//                       <td>${a.rate}</td>\r\n//                       <td className=\"text-center\">\r\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\r\n//                           Notify\r\n//                         </button>\r\n//                       </td>\r\n//                       <td className=\"text-center\">\r\n//                         <button\r\n//                           onClick={() => navigate(`/projects/${projectId}/associates/${a.id}`)}\r\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                           title=\"View Daily Hours\"\r\n//                         >\r\n//                           üîç\r\n//                         </button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   );\r\n//                 })\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"9\" className=\"text-center text-muted py-4\">\r\n//                     No associates found for this project.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AssociateLevel;\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\r\n\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\n// const AssociateLevel = () => {\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   const { projectId: urlProjectId } = useParams(); // Get projectId from URL parameters\r\n\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State for fetched associate data\r\n\r\n//   const [associates, setAssociates] = useState([]);\r\n\r\n//   // State for loading indicator\r\n\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // State for error messages\r\n\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // States to keep track of the context (month, year, projectId, accountId) for which data was last fetched\r\n\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   const [activeProjectId, setActiveProjectId] = useState(null);\r\n\r\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\r\n\r\n//   const [activeAccountId, setActiveAccountId] = useState(null);\r\n\r\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n\r\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Set font family on component mount\r\n\r\n//   useEffect(() => {\r\n\r\n//     const link = document.createElement('link');\r\n\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n\r\n//     link.rel = 'stylesheet';\r\n\r\n//     document.head.appendChild(link);\r\n\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n//   }, []);\r\n\r\n//   // Effect to handle context and fetch data\r\n\r\n//   useEffect(() => {\r\n\r\n//     const fetchAssociateData = async (month, year, projId) => {\r\n\r\n//       setLoading(true);\r\n\r\n//       setError(null);\r\n\r\n//       // Construct the request body as expected by your backend\r\n\r\n//       const requestBody = {\r\n\r\n//         month: month,\r\n\r\n//         year: year,\r\n\r\n//         projectId: projId // Pass the project ID\r\n\r\n//       };\r\n\r\n//       console.log(\"Fetching associate data with request body (POST):\", requestBody); // For debugging\r\n\r\n//       try {\r\n\r\n//         const response = await fetch(`${BACKEND_URL}/api/associate`, {\r\n\r\n//           method: 'POST', // As per your backend spec\r\n\r\n//           headers: {\r\n\r\n//             'Content-Type': 'application/json',\r\n\r\n//           },\r\n\r\n//           body: JSON.stringify(requestBody),\r\n\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n\r\n//           const errorText = await response.text();\r\n\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n\r\n//         }\r\n\r\n//         const data = await response.json();\r\n\r\n//         setAssociates(Array.isArray(data) ? data : [data].filter(Boolean));\r\n\r\n//         // Try to derive project and account names from fetched data if available\r\n\r\n//         if (data && data.length > 0) {\r\n\r\n//           if (data[0].projectName) setActiveProjectName(data[0].projectName);\r\n\r\n//           if (data[0].accountName) setActiveAccountName(data[0].accountName);\r\n\r\n//           if (data[0].accountId) setActiveAccountId(data[0].accountId); // Ensure accountId is set\r\n\r\n//         } else {\r\n\r\n//           // Fallback to stored names or IDs if data is empty or names are missing\r\n\r\n//           const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n\r\n//           const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n\r\n//           const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n\r\n//           if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\r\n\r\n//           if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\r\n\r\n//           if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\r\n\r\n//         }\r\n\r\n//       } catch (err) {\r\n\r\n//         console.error(\"Error fetching associate data:\", err);\r\n\r\n//         setError(`Failed to load associate data: ${err.message || \"Network error\"}`);\r\n\r\n//       } finally {\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     };\r\n\r\n//     // Logic to determine context for fetching\r\n\r\n//     let monthToUse = location.state?.month;\r\n\r\n//     let yearToUse = location.state?.year;\r\n\r\n//     let projectIdToUse = urlProjectId; // Always get projectId from URL params\r\n\r\n//     let accountIdToUse = location.state?.accountId; // Get accountId from state for breadcrumbs\r\n\r\n//     let accountNameToUse = location.state?.accountName; // Get accountName from state for breadcrumbs\r\n\r\n//     let projectNameToUse = location.state?.projectName; // Get project name from state for breadcrumbs\r\n\r\n//     // If context is not in location.state (e.g., on back navigation), check sessionStorage\r\n\r\n//     if (!monthToUse || !yearToUse || !projectIdToUse || !accountIdToUse || !projectNameToUse) {\r\n\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAssociateMonth');\r\n\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAssociateYear');\r\n\r\n//       const storedProjectId = sessionStorage.getItem('lastFetchedAssociateProjectId');\r\n\r\n//       const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n\r\n//       const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n\r\n//       const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n\r\n//       if (storedMonth && storedYear && storedProjectId) {\r\n\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n\r\n//         yearToUse = parseInt(storedYear, 10);\r\n\r\n//         projectIdToUse = storedProjectId;\r\n\r\n//         if (storedProjectName) projectNameToUse = storedProjectName;\r\n\r\n//         if (storedAccountId) accountIdToUse = storedAccountId;\r\n\r\n//         if (storedAccountName) accountNameToUse = storedAccountName;\r\n\r\n//       }\r\n\r\n//     }\r\n\r\n//     // If we have valid context, set active states and fetch data if needed\r\n\r\n//     if (monthToUse && yearToUse && projectIdToUse && accountIdToUse && projectNameToUse) {\r\n\r\n//       // Only fetch if the context has changed or if associates are empty\r\n\r\n//       if (\r\n\r\n//         monthToUse !== activeMonth ||\r\n\r\n//         yearToUse !== activeYear ||\r\n\r\n//         projectIdToUse !== activeProjectId ||\r\n\r\n//         associates.length === 0\r\n\r\n//       ) {\r\n\r\n//         setActiveMonth(monthToUse);\r\n\r\n//         setActiveYear(yearToUse);\r\n\r\n//         setActiveProjectId(projectIdToUse);\r\n\r\n//         setActiveProjectName(projectNameToUse); // Set project name from state\r\n\r\n//         setActiveAccountId(accountIdToUse); // Set account ID from state\r\n\r\n//         setActiveAccountName(accountNameToUse); // Set account name from state\r\n\r\n//         // Store current context in sessionStorage\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateMonth', monthToUse.toString());\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateYear', yearToUse.toString());\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateProjectId', projectIdToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateProjectName', projectNameToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateAccountId', accountIdToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateAccountName', accountNameToUse);\r\n\r\n//         fetchAssociateData(monthToUse, yearToUse, projectIdToUse);\r\n\r\n//       } else {\r\n\r\n//         // Data is already present for the active context, no need to fetch\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     } else {\r\n\r\n//       // No valid context found, show error\r\n\r\n//       setError(\"Missing associate context (month, year, project ID, or account ID). Please go back and select a project.\");\r\n\r\n//       setLoading(false);\r\n\r\n//     }\r\n\r\n//   }, [location.state, urlProjectId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAccountId, activeAccountName, activeProjectName, associates.length]); // Dependencies for useEffect\r\n\r\n//   // Adjust breadcrumb path based on active states\r\n\r\n//   const breadcrumbPath = [\r\n\r\n//     { name: 'PMO Dashboard', page: '' },\r\n\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n\r\n//     { name: 'Account Level', page: 'accounts' },\r\n\r\n//     { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\r\n\r\n//     { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` }\r\n\r\n//   ];\r\n\r\n//   // Render loading state\r\n\r\n//   if (loading) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n\r\n//           <span className=\"visually-hidden\">Loading Associate Data...</span>\r\n\r\n//         </div>\r\n\r\n//         <p className=\"ms-3 text-primary\">Loading Associate Data...</p>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   // Render error state\r\n\r\n//   if (error) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/accounts/${activeAccountId}/projects`)}>\r\n\r\n//           Go to Project Level\r\n\r\n//         </button>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   return (\r\n\r\n//     <div\r\n\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n\r\n//       style={{\r\n\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n\r\n//       }}\r\n\r\n//     >\r\n\r\n//       <div\r\n\r\n//         className=\"card shadow p-4 w-100\"\r\n\r\n//         style={{\r\n\r\n//           maxWidth: '1100px',\r\n\r\n//           backgroundColor: '#ffffffee',\r\n\r\n//           borderRadius: '1rem'\r\n\r\n//         }}\r\n\r\n//       >\r\n\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n\r\n//           üë§ Associate Details ‚Äì Project: {activeProjectName}\r\n\r\n//         </h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n\r\n//             <thead\r\n\r\n//               style={{\r\n\r\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\r\n\r\n//                 color: 'white'\r\n\r\n//               }}\r\n\r\n//             >\r\n\r\n//               <tr>\r\n\r\n//                 <th>Associate ID</th>\r\n\r\n//                 <th>Associate Name</th>\r\n\r\n//                 <th>Project ID</th>\r\n\r\n//                 <th>Project Name</th>\r\n\r\n//                 <th>PM ID</th>\r\n\r\n//                 <th>Total Company Hours (Monthly)</th>\r\n\r\n//                 <th>Total Client Hours (Monthly)</th>\r\n\r\n//                 <th>Variance Hours (Monthly)</th>\r\n\r\n//                 <th>Actual Revenue</th>\r\n\r\n//                 <th>Associate Rate</th>\r\n\r\n//                 <th className=\"text-center\">Notify</th>\r\n\r\n//                 <th className=\"text-center\">View Daily</th>\r\n\r\n//               </tr>\r\n\r\n//             </thead>\r\n\r\n//             <tbody>\r\n\r\n//               {associates.length > 0 ? (\r\n\r\n//                 associates.map((associate) => {\r\n\r\n//                   // const variance = associate.totalCompanyHoursMonthly - associate.totalClientHoursMonthly; // Assuming variance is Company - Client\r\n\r\n//                   return (\r\n\r\n//                     <tr key={associate.associateId}>\r\n\r\n//                       <td>{associate.associateId}</td>\r\n\r\n//                       <td>{associate.associateName}</td>\r\n\r\n//                       <td>{associate.projectId}</td>\r\n\r\n//                       <td>{associate.projectName}</td>\r\n\r\n//                       <td>{associate.esaID}</td>\r\n\r\n//                       <td>{associate.totalCompanyHoursMonthly}</td>\r\n\r\n//                       <td>{associate.totalClientHoursMonthly}</td>\r\n\r\n//                       <td>{associate.varianceHoursMonthly}</td>\r\n\r\n//                       {/* <td\r\n\r\n//             className={`fw-semibold ${\r\n\r\n//              variance > 0\r\n\r\n//               ? 'text-danger'\r\n\r\n//               : variance < 0\r\n\r\n//               ? 'text-primary'\r\n\r\n//               : 'text-success'\r\n\r\n//             }`}\r\n\r\n//            >\r\n\r\n//             {variance}\r\n\r\n//            </td> */}\r\n\r\n//                       <td>${associate.actualRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n\r\n//                       <td>${associate.associateRtRate.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n\r\n//                       <td className=\"text-center\">\r\n\r\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\r\n\r\n//                           Notify\r\n\r\n//                         </button>\r\n\r\n//                       </td>\r\n\r\n//                       <td className=\"text-center\">\r\n\r\n//                         <button\r\n\r\n//                           // Navigate to DateLevel, passing full context\r\n\r\n//                           onClick={() => {\r\n\r\n//                             const targetPath = `/projects/${associate.projectId}/associates/${associate.associateId}/daily`;\r\n\r\n//                             const stateToPass = {\r\n\r\n//                               month: activeMonth,\r\n\r\n//                               year: activeYear,\r\n\r\n//                               projectId: associate.projectId, // Use from current associate object\r\n\r\n//                               projectName: associate.projectName, // Use from current associate object\r\n\r\n//                               accountId: activeAccountId, // Use from AssociateLevel's state\r\n\r\n//                               accountName: activeAccountName, // Use from AssociateLevel's state\r\n\r\n//                               associateId: associate.associateId,\r\n\r\n//                               associateName: associate.associateName\r\n\r\n//                             };\r\n\r\n//                             // ADD THIS LOG: Check the path and state before navigation\r\n\r\n//                             console.log(\"Navigating to DateLevel with path:\", targetPath, \"and state:\", stateToPass);\r\n\r\n//                             navigate(targetPath, { state: stateToPass });\r\n\r\n//                           }}\r\n\r\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n\r\n//                           title=\"View Daily Hours\"\r\n\r\n//                         >\r\n\r\n//                           üîç\r\n\r\n//                         </button>\r\n\r\n//                       </td>\r\n\r\n//                     </tr>\r\n\r\n//                   );\r\n\r\n//                 })\r\n\r\n//               ) : (\r\n\r\n//                 <tr>\r\n\r\n//                   <td colSpan=\"11\" className=\"text-center text-muted py-4\">\r\n\r\n//                     No associates found for this project and period.\r\n\r\n//                   </td>\r\n\r\n//                 </tr>\r\n\r\n//               )}\r\n\r\n//             </tbody>\r\n\r\n//           </table>\r\n\r\n//         </div>\r\n\r\n//       </div>\r\n\r\n//     </div>\r\n\r\n//   );\r\n\r\n// };\r\n\r\n// export default AssociateLevel;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\nconst AssociateLevel = () => {\r\n  const navigate = useNavigate();\r\n  const { projectId: urlProjectId } = useParams(); // Get projectId from URL parameters\r\n  const location = useLocation(); // Hook to access location state\r\n\r\n  // State for fetched associate data\r\n  const [associates, setAssociates] = useState([]);\r\n  // State for loading indicator\r\n  const [loading, setLoading] = useState(true);\r\n  // State for error messages\r\n  const [error, setError] = useState(null);\r\n\r\n  // States to keep track of the context (month, year, projectId, accountId) for which data was last fetched\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n  const [activeProjectId, setActiveProjectId] = useState(null);\r\n  const [activeProjectName, setActiveProjectName] = useState('Loading...');\r\n  const [activeAccountId, setActiveAccountId] = useState(null);\r\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n\r\n  // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Set font family on component mount\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Effect to handle context and fetch data\r\n  useEffect(() => {\r\n    const fetchAssociateData = async (month, year, projId) => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Construct the request body as expected by your backend\r\n      const requestBody = {\r\n        month: month,\r\n        year: year,\r\n        projectId: projId // Pass the project ID\r\n      };\r\n\r\n      console.log(\"Fetching associate data with request body (POST):\", requestBody); // For debugging\r\n\r\n      try {\r\n        const response = await fetch(`${BACKEND_URL}/api/associate`, {\r\n          method: 'POST', // As per your backend spec\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(requestBody),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setAssociates(Array.isArray(data) ? data : [data].filter(Boolean));\r\n        \r\n        // Try to derive project and account names from fetched data if available\r\n        if (data && data.length > 0) {\r\n          if (data[0].projectName) setActiveProjectName(data[0].projectName);\r\n          if (data[0].accountName) setActiveAccountName(data[0].accountName);\r\n          if (data[0].accountId) setActiveAccountId(data[0].accountId); // Ensure accountId is set\r\n        } else {\r\n          // Fallback to stored names or IDs if data is empty or names are missing\r\n          const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n          const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n          const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n\r\n          if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\r\n          if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\r\n          if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\r\n        }\r\n\r\n      } catch (err) {\r\n        console.error(\"Error fetching associate data:\", err);\r\n        setError(`Failed to load associate data: ${err.message || \"Network error\"}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Logic to determine context for fetching\r\n    let monthToUse = location.state?.month;\r\n    let yearToUse = location.state?.year;\r\n    let projectIdToUse = urlProjectId; // Always get projectId from URL params\r\n    let accountIdToUse = location.state?.accountId; // Get accountId from state for breadcrumbs\r\n    let accountNameToUse = location.state?.accountName; // Get accountName from state for breadcrumbs\r\n    let projectNameToUse = location.state?.projectName; // Get project name from state for breadcrumbs\r\n\r\n    // If context is not in location.state (e.g., on back navigation), check sessionStorage\r\n    if (!monthToUse || !yearToUse || !projectIdToUse || !accountIdToUse || !projectNameToUse) {\r\n      const storedMonth = sessionStorage.getItem('lastFetchedAssociateMonth');\r\n      const storedYear = sessionStorage.getItem('lastFetchedAssociateYear');\r\n      const storedProjectId = sessionStorage.getItem('lastFetchedAssociateProjectId');\r\n      const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n      const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n      const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n\r\n      if (storedMonth && storedYear && storedProjectId) {\r\n        monthToUse = parseInt(storedMonth, 10);\r\n        yearToUse = parseInt(storedYear, 10);\r\n        projectIdToUse = storedProjectId;\r\n        if (storedProjectName) projectNameToUse = storedProjectName;\r\n        if (storedAccountId) accountIdToUse = storedAccountId;\r\n        if (storedAccountName) accountNameToUse = storedAccountName;\r\n      }\r\n    }\r\n\r\n    // If we have valid context, set active states and fetch data if needed\r\n    if (monthToUse && yearToUse && projectIdToUse && accountIdToUse && projectNameToUse) {\r\n      // Only fetch if the context has changed or if associates are empty\r\n      if (\r\n        monthToUse !== activeMonth || \r\n        yearToUse !== activeYear || \r\n        projectIdToUse !== activeProjectId || \r\n        associates.length === 0\r\n      ) {\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        setActiveProjectId(projectIdToUse);\r\n        setActiveProjectName(projectNameToUse); // Set project name from state\r\n        setActiveAccountId(accountIdToUse);     // Set account ID from state\r\n        setActiveAccountName(accountNameToUse); // Set account name from state\r\n        \r\n        // Store current context in sessionStorage\r\n        sessionStorage.setItem('lastFetchedAssociateMonth', monthToUse.toString());\r\n        sessionStorage.setItem('lastFetchedAssociateYear', yearToUse.toString());\r\n        sessionStorage.setItem('lastFetchedAssociateProjectId', projectIdToUse);\r\n        sessionStorage.setItem('lastFetchedAssociateProjectName', projectNameToUse);\r\n        sessionStorage.setItem('lastFetchedAssociateAccountId', accountIdToUse);\r\n        sessionStorage.setItem('lastFetchedAssociateAccountName', accountNameToUse);\r\n\r\n        fetchAssociateData(monthToUse, yearToUse, projectIdToUse);\r\n      } else {\r\n        // Data is already present for the active context, no need to fetch\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      // No valid context found, show error\r\n      setError(\"Missing associate context (month, year, project ID, or account ID). Please go back and select a project.\");\r\n      setLoading(false);\r\n    }\r\n\r\n  }, [location.state, urlProjectId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAccountId, activeAccountName, activeProjectName, associates.length]); // Dependencies for useEffect\r\n\r\n  // Adjust breadcrumb path based on active states\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' },\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n    { name: 'Account Level', page: 'accounts' },\r\n    { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\r\n    { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` }\r\n  ];\r\n\r\n  // Placeholder function for Notify All\r\n  const handleNotifyAll = () => {\r\n    alert('Notifying all associates for this project!');\r\n    // Implement your actual notification logic here\r\n  };\r\n\r\n  // Placeholder function for Download Data\r\n  const handleDownloadData = () => {\r\n    alert('Downloading associate data for this project!');\r\n    // Implement your actual data download logic here\r\n    // You might want to format 'associates' data into CSV or Excel and trigger a download\r\n  };\r\n\r\n  // Render loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\">\r\n          <span className=\"visually-hidden\">Loading Associate Data...</span>\r\n        </div>\r\n        <p className=\"ms-3 text-primary\">Loading Associate Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/accounts/${activeAccountId}/projects`)}>\r\n          Go to Project Level\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 w-100\"\r\n        style={{\r\n          maxWidth: '1100px',\r\n          backgroundColor: '#ffffffee',\r\n          borderRadius: '1rem'\r\n        }}\r\n      >\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n          <h2 className=\"mb-0 fw-semibold text-dark\">\r\n            üë§ Associate Details ‚Äì Project: {activeProjectName}\r\n          </h2>\r\n          <div className=\"d-flex gap-2\">\r\n            <button \r\n              className=\"btn btn-outline-info rounded-pill px-3\"\r\n              onClick={handleNotifyAll}\r\n            >\r\n              Notify All\r\n            </button>\r\n            <button \r\n              className=\"btn btn-outline-success rounded-pill px-3\"\r\n              onClick={handleDownloadData}\r\n            >\r\n              Download Data\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"table-responsive rounded\">\r\n          <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n            <thead\r\n              style={{\r\n                background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\r\n                color: 'white'\r\n              }}\r\n            >\r\n              <tr>\r\n                <th>Associate ID</th>\r\n                <th>Associate Name</th>\r\n                <th>Project ID</th>\r\n                <th>Project Name</th>\r\n                <th>PM ID</th>\r\n                <th>Total Company Hours (Monthly)</th>\r\n                <th>Total Client Hours (Monthly)</th>\r\n                <th>Variance Hours (Monthly)</th>\r\n                <th>Actual Revenue</th>\r\n                <th>Associate Rate</th>\r\n                <th className=\"text-center\">Notify</th>\r\n                <th className=\"text-center\">View Daily</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {associates.length > 0 ? (\r\n                associates.map((associate) => {\r\n                  // const variance = associate.totalCompanyHoursMonthly - associate.totalClientHoursMonthly; // Assuming variance is Company - Client\r\n                  return (\r\n                    <tr key={associate.associateId}>\r\n                      <td>{associate.associateId}</td>\r\n                      <td>{associate.associateName}</td>\r\n                      <td>{associate.projectId}</td>\r\n                      <td>{associate.projectName}</td>\r\n                      <td>{associate.esaID}</td>\r\n                      <td>{associate.totalCompanyHoursMonthly}</td>\r\n                      <td>{associate.totalClientHoursMonthly}</td>\r\n                      <td>{associate.varianceHoursMonthly}</td>\r\n                      {/* <td\r\n            className={`fw-semibold ${\r\n              variance > 0\r\n                ? 'text-danger'\r\n                : variance < 0\r\n                ? 'text-primary'\r\n                : 'text-success'\r\n            }`}\r\n           >\r\n            {variance}\r\n           </td> */}\r\n                      <td>${associate.actualRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n                      <td>${associate.associateRtRate.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n                      <td className=\"text-center\">\r\n                        <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\r\n                          Notify\r\n                        </button>\r\n                      </td>\r\n                      <td className=\"text-center\">\r\n                        <button\r\n                          // Navigate to DateLevel, passing full context\r\n                          onClick={() => {\r\n                            const targetPath = `/projects/${associate.projectId}/associates/${associate.associateId}/daily`;\r\n                            const stateToPass = {\r\n                              month: activeMonth,\r\n                              year: activeYear,\r\n                              projectId: associate.projectId, // Use from current associate object\r\n                              projectName: associate.projectName, // Use from current associate object\r\n                              accountId: activeAccountId, // Use from AssociateLevel's state\r\n                              accountName: activeAccountName, // Use from AssociateLevel's state\r\n                              associateId: associate.associateId,\r\n                              associateName: associate.associateName\r\n                            };\r\n                            // ADD THIS LOG: Check the path and state before navigation\r\n                            console.log(\"Navigating to DateLevel with path:\", targetPath, \"and state:\", stateToPass);\r\n                            navigate(targetPath, { state: stateToPass });\r\n                          }}\r\n                          className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n                          title=\"View Daily Hours\"\r\n                        >\r\n                          üîç\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan=\"11\" className=\"text-center text-muted py-4\">\r\n                    No associates found for this project and period.\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssociateLevel;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}