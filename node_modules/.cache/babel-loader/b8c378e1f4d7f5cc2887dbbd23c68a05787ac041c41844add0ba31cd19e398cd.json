{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\DateLevel.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { useParams } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs';\n\n// const DateLevel = () => {\n//   const { projectId, associateId } = useParams();\n\n//   const allDailyHours = [\n//     { date: '2024-05-01', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 7 },\n//     { date: '2024-05-02', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 8 },\n//     { date: '2024-05-03', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 7 },\n//   ];\n\n//   const filtered = allDailyHours.filter(entry => entry.associateId === associateId);\n//   const associateName = filtered[0]?.associateName || associateId;\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 w-100\"\n//         style={{\n//           maxWidth: '850px',\n//           backgroundColor: '#ffffffee',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs\n//           path={[\n//             { name: 'PMO Dashboard', page: '' },\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\n//             { name: 'Project Level', page: 'projects' },\n//             { name: `Associates (${projectId})`, page: `projects/${projectId}/associates` },\n//             { name: `Daily View (${associateId})`, page: `projects/${projectId}/associates/${associateId}` }\n//           ]}\n//         />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n//           ðŸ“… Daily Hours â€“ {associateName}\n//         </h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n//             <thead\n//               style={{\n//                 background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\n//                 color: 'white'\n//               }}\n//             >\n//               <tr>\n//                 <th>Date</th>\n//                 <th>Associate ID</th>\n//                 <th>Name</th>\n//                 <th>CTS Hour</th>\n//                 <th>Client Hour</th>\n//                 <th>Variance</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {filtered.length > 0 ? (\n//                 filtered.map((daily, index) => (\n//                   <tr key={index} style={{ backgroundColor: '#fbfbfb' }}>\n//                     <td>{daily.date}</td>\n//                     <td>{daily.associateId}</td>\n//                     <td>{daily.associateName}</td>\n//                     <td>{daily.ctsHour}</td>\n//                     <td>{daily.clientHour}</td>\n//                     <td\n//                       className={\n//                         daily.ctsHour - daily.clientHour > 0\n//                           ? 'text-danger fw-semibold'\n//                           : daily.ctsHour - daily.clientHour < 0\n//                           ? 'text-primary fw-semibold'\n//                           : 'text-success fw-semibold'\n//                       }\n//                     >\n//                       {daily.ctsHour - daily.clientHour}\n//                     </td>\n//                   </tr>\n//                 ))\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"6\" className=\"text-center py-4 text-muted\">\n//                     No daily hour data available.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default DateLevel;\n\n// import React, { useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\n// import dailyHourData from '../../data/dailyHourData.json'; // CORRECTED PATH: data is two levels up\n// import associateData from '../../data/associateData.json'; // CORRECTED PATH: data is two levels up\n// import projectData from '../../data/projectData.json'; // CORRECTED PATH: data is two levels up\n\n// const DateLevel = () => {\n//   const { projectId, associateId } = useParams();\n\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Filter daily hours based on associateId\n//   const filteredDailyHours = dailyHourData.dailyHours.filter(entry => entry.associateId === associateId);\n\n//   // Get associate name for display\n//   const currentAssociate = associateData.associates.find(a => a.id === associateId);\n//   const associateName = currentAssociate ? currentAssociate.name : associateId;\n\n//   // Get project name and account name for breadcrumbs\n//   const currentProject = projectData.projects.find(p => p.id === projectId);\n//   const projectName = currentProject ? currentProject.name : projectId;\n//   const accountName = currentProject ? currentProject.accountName : 'Unknown Account';\n//   const accountId = currentProject ? currentProject.accountId : '';\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 w-100\"\n//         style={{\n//           maxWidth: '850px',\n//           backgroundColor: '#ffffffee',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs\n//           path={[\n//             { name: 'PMO Dashboard', page: '' },\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\n//             { name: 'Account Level', page: 'accounts' },\n//             { name: `Projects (${accountName})`, page: `accounts/${accountId}/projects` },\n//             { name: `Associates (${projectName})`, page: `projects/${projectId}/associates` },\n//             { name: `Daily View (${associateName})`, page: `projects/${projectId}/associates/${associateId}` }\n//           ]}\n//         />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n//           ðŸ“… Daily Hours â€“ {associateName}\n//         </h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n//             <thead\n//               style={{\n//                 background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\n//                 color: 'white'\n//               }}\n//             >\n//               <tr>\n//                 <th>Date</th>\n//                 <th>Associate ID</th>\n//                 <th>Name</th>\n//                 <th>CTS Hour</th>\n//                 <th>Client Hour</th>\n//                 <th>Variance</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {filteredDailyHours.length > 0 ? (\n//                 filteredDailyHours.map((daily, index) => {\n//                   const variance = daily.ctsHour - daily.clientHour;\n//                   return (\n//                     <tr key={index} style={{ backgroundColor: '#fbfbfb' }}>\n//                       <td>{daily.date}</td>\n//                       <td>{daily.associateId}</td>\n//                       <td>{daily.associateName}</td>\n//                       <td>{daily.ctsHour}</td>\n//                       <td>{daily.clientHour}</td>\n//                       <td\n//                         className={\n//                           variance > 0\n//                             ? 'text-danger fw-semibold'\n//                             : variance < 0\n//                             ? 'text-primary fw-semibold'\n//                             : 'text-success fw-semibold'\n//                         }\n//                       >\n//                         {variance}\n//                       </td>\n//                     </tr>\n//                   );\n//                 })\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"6\" className=\"text-center py-4 text-muted\">\n//                     No daily hour data available for this associate.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default DateLevel;\n\n// import React, { useEffect, useState } from 'react';\n\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\n\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n\n// const DateLevel = () => {\n\n//   const navigate = useNavigate();\n\n//   const { projectId: urlProjectId, associateId: urlAssociateId } = useParams(); // Get params from URL\n\n//   const location = useLocation(); // Hook to access location state\n\n//   // State for fetched daily hour data\n\n//   const [dailyHours, setDailyHours] = useState([]);\n\n//   // State for loading indicator\n\n//   const [loading, setLoading] = useState(true);\n\n//   // State for error messages\n\n//   const [error, setError] = useState(null);\n\n//   // States to keep track of the context for which data was last fetched\n\n//   const [activeMonth, setActiveMonth] = useState(null);\n\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   const [activeProjectId, setActiveProjectId] = useState(null);\n\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\n\n//   const [activeAssociateId, setActiveAssociateId] = useState(null);\n\n//   const [activeAssociateName, setActiveAssociateName] = useState('Loading...');\n\n//   const [activeAccountId, setActiveAccountId] = useState(null);\n\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\n\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Set font family on component mount\n\n//   useEffect(() => {\n\n//     const link = document.createElement('link');\n\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n\n//     link.rel = 'stylesheet';\n\n//     document.head.appendChild(link);\n\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n\n//   }, []);\n\n//   // Effect to handle context and fetch data\n\n//   useEffect(() => {\n\n//     const fetchDailyHoursData = async (month, year, projId, assocId) => {\n\n//       setLoading(true);\n\n//       setError(null);\n\n//       // Construct the request body as expected by your backend\n\n//       const requestBody = {\n\n//         month: month,\n\n//         year: year,\n\n//         projectId: projId,\n\n//         associateId: assocId\n\n//       };\n\n//       console.log(\"Fetching daily hours data with request body (POST):\", requestBody); // For debugging\n\n//       try {\n\n//         const response = await fetch(`${BACKEND_URL}/api/date-level`, {\n\n//           method: 'POST', // As per your backend spec\n\n//           headers: {\n\n//             'Content-Type': 'application/json',\n\n//           },\n\n//           body: JSON.stringify(requestBody),\n\n//         });\n\n//         if (!response.ok) {\n\n//           const errorText = await response.text();\n\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n\n//         }\n\n//         const data = await response.json();\n\n//         setDailyHours(Array.isArray(data) ? data : [data].filter(Boolean));\n\n//         // Try to derive names from fetched data if available\n\n//         if (data && data.length > 0) {\n\n//           if (data[0].projectName) setActiveProjectName(data[0].projectName);\n\n//           if (data[0].associateName) setActiveAssociateName(data[0].associateName);\n\n//           if (data[0].accountName) setActiveAccountName(data[0].accountName);\n\n//           if (data[0].accountId) setActiveAccountId(data[0].accountId);\n\n//         } else {\n\n//           // Fallback to stored names or IDs if data is empty or names are missing\n\n//           const storedProjectName = sessionStorage.getItem('lastFetchedDateProjectName');\n\n//           const storedAssociateName = sessionStorage.getItem('lastFetchedDateAssociateName');\n\n//           const storedAccountName = sessionStorage.getItem('lastFetchedDateAccountName');\n\n//           const storedAccountId = sessionStorage.getItem('lastFetchedDateAccountId');\n\n//           if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\n\n//           if (storedAssociateName) setActiveAssociateName(storedAssociateName); else setActiveAssociateName(assocId);\n\n//           if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\n\n//           if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\n\n//         }\n\n//       } catch (err) {\n\n//         console.error(\"Error fetching daily hours data:\", err);\n\n//         setError(`Failed to load daily hours data: ${err.message || \"Network error\"}`);\n\n//       } finally {\n\n//         setLoading(false);\n\n//       }\n\n//     };\n\n//     // Logic to determine context for fetching\n\n//     let monthToUse = location.state?.month;\n\n//     let yearToUse = location.state?.year;\n\n//     let projectIdToUse = urlProjectId;\n\n//     let associateIdToUse = urlAssociateId;\n\n//     let projectNameToUse = location.state?.projectName;\n\n//     let associateNameToUse = location.state?.associateName;\n\n//     let accountIdToUse = location.state?.accountId;\n\n//     let accountNameToUse = location.state?.accountName;\n\n//     // If context is not in location.state (e.g., on back navigation), check sessionStorage\n\n//     if (!monthToUse || !yearToUse || !projectIdToUse || !associateIdToUse || !projectNameToUse || !associateNameToUse || !accountIdToUse || !accountNameToUse) {\n\n//       const storedMonth = sessionStorage.getItem('lastFetchedDateMonth');\n\n//       const storedYear = sessionStorage.getItem('lastFetchedDateYear');\n\n//       const storedProjectId = sessionStorage.getItem('lastFetchedDateProjectId');\n\n//       const storedAssociateId = sessionStorage.getItem('lastFetchedDateAssociateId');\n\n//       const storedProjectName = sessionStorage.getItem('lastFetchedDateProjectName');\n\n//       const storedAssociateName = sessionStorage.getItem('lastFetchedDateAssociateName');\n\n//       const storedAccountId = sessionStorage.getItem('lastFetchedDateAccountId');\n\n//       const storedAccountName = sessionStorage.getItem('lastFetchedDateAccountName');\n\n//       if (storedMonth && storedYear && storedProjectId && storedAssociateId) {\n\n//         monthToUse = parseInt(storedMonth, 10);\n\n//         yearToUse = parseInt(storedYear, 10);\n\n//         projectIdToUse = storedProjectId;\n\n//         associateIdToUse = storedAssociateId;\n\n//         if (storedProjectName) projectNameToUse = storedProjectName;\n\n//         if (storedAssociateName) associateNameToUse = storedAssociateName;\n\n//         if (storedAccountId) accountIdToUse = storedAccountId;\n\n//         if (storedAccountName) accountNameToUse = storedAccountName;\n\n//       }\n\n//     }\n\n//     // If we have valid context, set active states and fetch data if needed\n\n//     if (monthToUse && yearToUse && projectIdToUse && associateIdToUse && projectNameToUse && associateNameToUse && accountIdToUse && accountNameToUse) {\n\n//       // Only fetch if the context has changed or if dailyHours are empty\n\n//       if (\n\n//         monthToUse !== activeMonth ||\n\n//         yearToUse !== activeYear ||\n\n//         projectIdToUse !== activeProjectId ||\n\n//         associateIdToUse !== activeAssociateId ||\n\n//         dailyHours.length === 0\n\n//       ) {\n\n//         setActiveMonth(monthToUse);\n\n//         setActiveYear(yearToUse);\n\n//         setActiveProjectId(projectIdToUse);\n\n//         setActiveAssociateId(associateIdToUse);\n\n//         setActiveProjectName(projectNameToUse);\n\n//         setActiveAssociateName(associateNameToUse);\n\n//         setActiveAccountId(accountIdToUse);\n\n//         setActiveAccountName(accountNameToUse);\n\n//         // Store current context in sessionStorage\n\n//         sessionStorage.setItem('lastFetchedDateMonth', monthToUse.toString());\n\n//         sessionStorage.setItem('lastFetchedDateYear', yearToUse.toString());\n\n//         sessionStorage.setItem('lastFetchedDateProjectId', projectIdToUse);\n\n//         sessionStorage.setItem('lastFetchedDateAssociateId', associateIdToUse);\n\n//         sessionStorage.setItem('lastFetchedDateProjectName', projectNameToUse);\n\n//         sessionStorage.setItem('lastFetchedDateAssociateName', associateNameToUse);\n\n//         sessionStorage.setItem('lastFetchedDateAccountId', accountIdToUse);\n\n//         sessionStorage.setItem('lastFetchedDateAccountName', accountNameToUse);\n\n//         fetchDailyHoursData(monthToUse, yearToUse, projectIdToUse, associateIdToUse);\n\n//       } else {\n\n//         // Data is already present for the active context, no need to fetch\n\n//         setLoading(false);\n\n//       }\n\n//     } else {\n\n//       // No valid context found, show error\n\n//       setError(\"Missing daily hours context. Please go back and select an associate.\");\n\n//       setLoading(false);\n\n//     }\n\n//   }, [location.state, urlProjectId, urlAssociateId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAssociateId, activeProjectName, activeAssociateName, activeAccountId, activeAccountName, dailyHours.length]); // Dependencies for useEffect\n\n//   // Adjust breadcrumb path based on active states\n\n//   const breadcrumbPath = [\n\n//     { name: 'PMO Dashboard', page: '' },\n\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n\n//     { name: 'Account Level', page: 'accounts' },\n\n//     { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\n\n//     { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` },\n\n//     { name: `Daily View (${activeAssociateName})`, page: `projects/${activeProjectId}/associates/${activeAssociateId}/daily` }\n\n//   ];\n\n//   // Render loading state\n\n//   if (loading) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n\n//           <span className=\"visually-hidden\">Loading Daily Hours Data...</span>\n\n//         </div>\n\n//         <p className=\"ms-3 text-primary\">Loading Daily Hours Data...</p>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   // Render error state\n\n//   if (error) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n\n//         <p className=\"fs-4\">Error: {error}</p>\n\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/projects/${activeProjectId}/associates`)}>\n\n//           Go to Associate Level\n\n//         </button>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   return (\n\n//     <div\n\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n\n//       style={{\n\n//         background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\n\n//         fontFamily: \"'Poppins', sans-serif\"\n\n//       }}\n\n//     >\n\n//       <div\n\n//         className=\"card shadow p-4 w-100\"\n\n//         style={{\n\n//           maxWidth: '950px', // Adjusted max-width for more columns\n\n//           backgroundColor: '#ffffffee',\n\n//           borderRadius: '1rem'\n\n//         }}\n\n//       >\n\n//         <Breadcrumbs path={breadcrumbPath} />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n\n//           ðŸ“… Daily Hours â€“ {activeAssociateName}\n\n//         </h2>\n\n//         <div className=\"table-responsive rounded\">\n\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n\n//             <thead\n\n//               style={{\n\n//                 background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\n\n//                 color: 'white'\n\n//               }}\n\n//             >\n\n//               <tr>\n\n//                 {/* Updated Column Headers to match your DTO */}\n\n//                 <th>Date</th>\n\n//                 <th>Associate ID</th>\n\n//                 <th>Associate Name</th>\n\n//                 <th>Project ID</th>\n\n//                 <th>Project Name</th>\n\n//                 <th>Company Hours</th>\n\n//                 <th>Client Hours</th>\n\n//                 <th>Variance Time Units</th>\n\n//                 <th>Comparison Result</th>\n\n//               </tr>\n\n//             </thead>\n\n//             <tbody>\n\n//               {dailyHours.length > 0 ? (\n\n//                 dailyHours.map((daily, index) => {\n\n//                   // Use varianceTimeUnits directly from DTO if available, otherwise calculate\n\n//                   const variance = daily.varianceTimeUnits !== undefined && daily.varianceTimeUnits !== null\n\n//                     ? daily.varianceTimeUnits\n\n//                     : (daily.companyHours - daily.clientHours);\n\n//                   return (\n\n//                     <tr key={index} style={{ backgroundColor: '#fbfbfb' }}>\n\n//                       <td>{daily.date}</td>\n\n//                       <td>{daily.associateId}</td>\n\n//                       <td>{daily.associateName}</td>\n\n//                       <td>{daily.projectId}</td>\n\n//                       <td>{daily.projectName}</td>\n\n//                       <td>{daily.companyHours}</td>\n\n//                       <td>{daily.clientHours}</td>\n\n//                       <td\n\n//                         className={`fw-semibold ${variance > 0\n\n//                             ? 'text-danger'\n\n//                             : variance < 0\n\n//                               ? 'text-primary'\n\n//                               : 'text-success'\n\n//                           }`}\n\n//                       >\n\n//                         {variance}\n\n//                       </td>\n\n//                       <td>{daily.comparisonResult}</td>\n\n//                     </tr>\n\n//                   );\n\n//                 })\n\n//               ) : (\n\n//                 <tr>\n\n//                   <td colSpan=\"9\" className=\"text-center py-4 text-muted\">\n\n//                     No daily hour data available for this associate and period.\n\n//                   </td>\n\n//                 </tr>\n\n//               )}\n\n//             </tbody>\n\n//           </table>\n\n//         </div>\n\n//       </div>\n\n//     </div>\n\n//   );\n\n// };\n\n// export default DateLevel;\n\n// src/components/Details/DateLevel.js\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport $ from 'jquery';\nimport 'datatables.net';\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\nimport Breadcrumbs from '../Breadcrumbs';\nimport commonData from '../../data/commonData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DateLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    projectId: urlProjectId,\n    associateId: urlAssociateId\n  } = useParams();\n  const location = useLocation();\n  const tableRef = useRef(null);\n  const [dailyHours, setDailyHours] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeProjectId, setActiveProjectId] = useState(null);\n  const [activeProjectName, setActiveProjectName] = useState('Loading...');\n  const [activeAssociateId, setActiveAssociateId] = useState(null);\n  const [activeAssociateName, setActiveAssociateName] = useState('Loading...');\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Currency formatter from commonData.json\n  const {\n    locale,\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  } = commonData.currencySettings;\n  const formatCurrency = (val = 0) => val.toLocaleString(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  });\n\n  // Load Poppins font once\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Fetch daily hours data\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5, _location$state6;\n    const fetchDailyHoursData = async (month, year, projId, assocId) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`${BACKEND_URL}/api/date-level`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            month,\n            year,\n            projectId: projId,\n            associateId: assocId\n          })\n        });\n        if (!response.ok) {\n          const errText = await response.text();\n          throw new Error(`status: ${response.status}, message: ${errText || response.statusText}`);\n        }\n        const data = await response.json();\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\n        setDailyHours(list);\n        if (list.length > 0) {\n          setActiveProjectName(list[0].projectName || projId);\n          setActiveAssociateName(list[0].associateName || assocId);\n          setActiveAccountName(list[0].accountName || activeAccountName);\n          setActiveAccountId(list[0].accountId || activeAccountId);\n        }\n      } catch (err) {\n        console.error('Error fetching daily hours data:', err);\n        setError(`Failed to load daily hours data: ${err.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    let monthToUse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let yearToUse = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    let projectIdToUse = urlProjectId;\n    let associateIdToUse = urlAssociateId;\n    let projectNameToUse = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.projectName;\n    let associateNameToUse = (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.associateName;\n    let accountIdToUse = (_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.accountId;\n    let accountNameToUse = (_location$state6 = location.state) === null || _location$state6 === void 0 ? void 0 : _location$state6.accountName;\n    if (!monthToUse || !yearToUse || !projectIdToUse || !associateIdToUse || !projectNameToUse || !associateNameToUse || !accountIdToUse || !accountNameToUse) {\n      const sm = sessionStorage.getItem('lastFetchedDateMonth');\n      const sy = sessionStorage.getItem('lastFetchedDateYear');\n      const sp = sessionStorage.getItem('lastFetchedDateProjectId');\n      const sa = sessionStorage.getItem('lastFetchedDateAssociateId');\n      const spn = sessionStorage.getItem('lastFetchedDateProjectName');\n      const san = sessionStorage.getItem('lastFetchedDateAssociateName');\n      const saccId = sessionStorage.getItem('lastFetchedDateAccountId');\n      const saccName = sessionStorage.getItem('lastFetchedDateAccountName');\n      if (sm && sy && sp && sa) {\n        monthToUse = parseInt(sm, 10);\n        yearToUse = parseInt(sy, 10);\n        projectIdToUse = sp;\n        associateIdToUse = sa;\n        projectNameToUse = spn || projectNameToUse;\n        associateNameToUse = san || associateNameToUse;\n        accountIdToUse = saccId || accountIdToUse;\n        accountNameToUse = saccName || accountNameToUse;\n      }\n    }\n    if (monthToUse && yearToUse && projectIdToUse && associateIdToUse && projectNameToUse && associateNameToUse && accountIdToUse && accountNameToUse) {\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || projectIdToUse !== activeProjectId || associateIdToUse !== activeAssociateId || dailyHours.length === 0) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        setActiveProjectId(projectIdToUse);\n        setActiveAssociateId(associateIdToUse);\n        setActiveProjectName(projectNameToUse);\n        setActiveAssociateName(associateNameToUse);\n        setActiveAccountId(accountIdToUse);\n        setActiveAccountName(accountNameToUse);\n        sessionStorage.setItem('lastFetchedDateMonth', monthToUse.toString());\n        sessionStorage.setItem('lastFetchedDateYear', yearToUse.toString());\n        sessionStorage.setItem('lastFetchedDateProjectId', projectIdToUse);\n        sessionStorage.setItem('lastFetchedDateAssociateId', associateIdToUse);\n        sessionStorage.setItem('lastFetchedDateProjectName', projectNameToUse);\n        sessionStorage.setItem('lastFetchedDateAssociateName', associateNameToUse);\n        sessionStorage.setItem('lastFetchedDateAccountId', accountIdToUse);\n        sessionStorage.setItem('lastFetchedDateAccountName', accountNameToUse);\n        fetchDailyHoursData(monthToUse, yearToUse, projectIdToUse, associateIdToUse);\n      } else {\n        setLoading(false);\n      }\n    } else {\n      setError('Missing daily hours context. Please go back and select an associate.');\n      setLoading(false);\n    }\n  }, [location.state, urlProjectId, urlAssociateId, activeMonth, activeYear, activeProjectId, activeAssociateId, dailyHours.length]);\n\n  // Initialize & destroy DataTable whenever data changes\n  useEffect(() => {\n    if (!loading && dailyHours.length > 0 && tableRef.current) {\n      const $tbl = $(tableRef.current);\n      if ($.fn.DataTable.isDataTable($tbl)) {\n        $tbl.DataTable().destroy();\n      }\n      $tbl.DataTable({\n        paging: true,\n        searching: true,\n        ordering: true,\n        info: true,\n        autoWidth: false\n      });\n    }\n    return () => {\n      if (tableRef.current) {\n        const $tbl = $(tableRef.current);\n        if ($.fn.DataTable.isDataTable($tbl)) {\n          $tbl.DataTable().destroy();\n        }\n      }\n    };\n  }, [loading, dailyHours]);\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  }, {\n    name: 'Account Level',\n    page: 'accounts'\n  }, {\n    name: `Projects (${activeAccountName})`,\n    page: `accounts/${activeAccountId}/projects`\n  }, {\n    name: `Associates (${activeProjectName})`,\n    page: `projects/${activeProjectId}/associates`\n  }, {\n    name: `Daily View (${activeAssociateName})`,\n    page: `projects/${activeProjectId}/associates/${activeAssociateId}/daily`\n  }];\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 991,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Daily Hours Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 992,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 990,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1000,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate(`/projects/${activeProjectId}/associates`),\n        children: \"Go to Associate Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 999,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 w-100\",\n      style: {\n        maxWidth: '950px',\n        backgroundColor: '#ffffffee',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1027,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4 fw-semibold text-dark\",\n        children: [\"\\uD83D\\uDCC5 Daily Hours \\u2013 \", activeAssociateName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          ref: tableRef,\n          className: \"display table table-hover table-borderless align-middle mb-0\",\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            style: {\n              background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\n              color: 'white'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1046,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Associate ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1047,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Associate Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1048,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1049,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1050,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Company Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1051,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Client Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1052,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Variance Time Units\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1053,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Comparison Result\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1054,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1045,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1039,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: dailyHours.map((daily, idx) => {\n              const variance = daily.varianceTimeUnits != null ? daily.varianceTimeUnits : daily.companyHours - daily.clientHours;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1065,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.associateId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1066,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.associateName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1067,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.projectId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1068,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.projectName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1069,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.companyHours\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1070,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.clientHours\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1071,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `fw-semibold ${variance > 0 ? 'text-danger' : variance < 0 ? 'text-primary' : 'text-success'}`,\n                  children: variance\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1072,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: daily.comparisonResult\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1083,\n                  columnNumber: 21\n                }, this)]\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1064,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1057,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1034,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1019,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1012,\n    columnNumber: 5\n  }, this);\n};\n_s(DateLevel, \"VPw6u0Imoc38LZbjcMsOtZ/m6Xg=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = DateLevel;\nexport default DateLevel;\nvar _c;\n$RefreshReg$(_c, \"DateLevel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","useParams","useLocation","$","Breadcrumbs","commonData","jsxDEV","_jsxDEV","DateLevel","_s","navigate","projectId","urlProjectId","associateId","urlAssociateId","location","tableRef","dailyHours","setDailyHours","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeProjectId","setActiveProjectId","activeProjectName","setActiveProjectName","activeAssociateId","setActiveAssociateId","activeAssociateName","setActiveAssociateName","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","BACKEND_URL","locale","currency","minimumFractionDigits","maximumFractionDigits","currencySettings","formatCurrency","val","toLocaleString","style","link","document","createElement","href","rel","head","appendChild","body","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","_location$state6","fetchDailyHoursData","month","year","projId","assocId","response","fetch","method","headers","JSON","stringify","ok","errText","text","Error","status","statusText","data","json","list","Array","isArray","filter","Boolean","length","projectName","associateName","accountName","accountId","err","console","message","monthToUse","state","yearToUse","projectIdToUse","associateIdToUse","projectNameToUse","associateNameToUse","accountIdToUse","accountNameToUse","sm","sessionStorage","getItem","sy","sp","sa","spn","san","saccId","saccName","parseInt","setItem","toString","current","$tbl","fn","DataTable","isDataTable","destroy","paging","searching","ordering","info","autoWidth","breadcrumbPath","name","page","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","ref","width","color","map","daily","idx","variance","varianceTimeUnits","companyHours","clientHours","date","comparisonResult","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/DateLevel.js"],"sourcesContent":["// import React from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs';\r\n\r\n// const DateLevel = () => {\r\n//   const { projectId, associateId } = useParams();\r\n\r\n//   const allDailyHours = [\r\n//     { date: '2024-05-01', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 7 },\r\n//     { date: '2024-05-02', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 8 },\r\n//     { date: '2024-05-03', associateId: 'A001', associateName: 'Alice Smith', ctsHour: 8, clientHour: 7 },\r\n//   ];\r\n\r\n//   const filtered = allDailyHours.filter(entry => entry.associateId === associateId);\r\n//   const associateName = filtered[0]?.associateName || associateId;\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 w-100\"\r\n//         style={{\r\n//           maxWidth: '850px',\r\n//           backgroundColor: '#ffffffee',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs\r\n//           path={[\r\n//             { name: 'PMO Dashboard', page: '' },\r\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//             { name: 'Project Level', page: 'projects' },\r\n//             { name: `Associates (${projectId})`, page: `projects/${projectId}/associates` },\r\n//             { name: `Daily View (${associateId})`, page: `projects/${projectId}/associates/${associateId}` }\r\n//           ]}\r\n//         />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n//           ðŸ“… Daily Hours â€“ {associateName}\r\n//         </h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n//             <thead\r\n//               style={{\r\n//                 background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\r\n//                 color: 'white'\r\n//               }}\r\n//             >\r\n//               <tr>\r\n//                 <th>Date</th>\r\n//                 <th>Associate ID</th>\r\n//                 <th>Name</th>\r\n//                 <th>CTS Hour</th>\r\n//                 <th>Client Hour</th>\r\n//                 <th>Variance</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {filtered.length > 0 ? (\r\n//                 filtered.map((daily, index) => (\r\n//                   <tr key={index} style={{ backgroundColor: '#fbfbfb' }}>\r\n//                     <td>{daily.date}</td>\r\n//                     <td>{daily.associateId}</td>\r\n//                     <td>{daily.associateName}</td>\r\n//                     <td>{daily.ctsHour}</td>\r\n//                     <td>{daily.clientHour}</td>\r\n//                     <td\r\n//                       className={\r\n//                         daily.ctsHour - daily.clientHour > 0\r\n//                           ? 'text-danger fw-semibold'\r\n//                           : daily.ctsHour - daily.clientHour < 0\r\n//                           ? 'text-primary fw-semibold'\r\n//                           : 'text-success fw-semibold'\r\n//                       }\r\n//                     >\r\n//                       {daily.ctsHour - daily.clientHour}\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"6\" className=\"text-center py-4 text-muted\">\r\n//                     No daily hour data available.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DateLevel;\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\r\n// import dailyHourData from '../../data/dailyHourData.json'; // CORRECTED PATH: data is two levels up\r\n// import associateData from '../../data/associateData.json'; // CORRECTED PATH: data is two levels up\r\n// import projectData from '../../data/projectData.json'; // CORRECTED PATH: data is two levels up\r\n\r\n// const DateLevel = () => {\r\n//   const { projectId, associateId } = useParams();\r\n\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Filter daily hours based on associateId\r\n//   const filteredDailyHours = dailyHourData.dailyHours.filter(entry => entry.associateId === associateId);\r\n\r\n//   // Get associate name for display\r\n//   const currentAssociate = associateData.associates.find(a => a.id === associateId);\r\n//   const associateName = currentAssociate ? currentAssociate.name : associateId;\r\n\r\n//   // Get project name and account name for breadcrumbs\r\n//   const currentProject = projectData.projects.find(p => p.id === projectId);\r\n//   const projectName = currentProject ? currentProject.name : projectId;\r\n//   const accountName = currentProject ? currentProject.accountName : 'Unknown Account';\r\n//   const accountId = currentProject ? currentProject.accountId : '';\r\n\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 w-100\"\r\n//         style={{\r\n//           maxWidth: '850px',\r\n//           backgroundColor: '#ffffffee',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs\r\n//           path={[\r\n//             { name: 'PMO Dashboard', page: '' },\r\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//             { name: 'Account Level', page: 'accounts' },\r\n//             { name: `Projects (${accountName})`, page: `accounts/${accountId}/projects` },\r\n//             { name: `Associates (${projectName})`, page: `projects/${projectId}/associates` },\r\n//             { name: `Daily View (${associateName})`, page: `projects/${projectId}/associates/${associateId}` }\r\n//           ]}\r\n//         />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n//           ðŸ“… Daily Hours â€“ {associateName}\r\n//         </h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n//             <thead\r\n//               style={{\r\n//                 background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\r\n//                 color: 'white'\r\n//               }}\r\n//             >\r\n//               <tr>\r\n//                 <th>Date</th>\r\n//                 <th>Associate ID</th>\r\n//                 <th>Name</th>\r\n//                 <th>CTS Hour</th>\r\n//                 <th>Client Hour</th>\r\n//                 <th>Variance</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {filteredDailyHours.length > 0 ? (\r\n//                 filteredDailyHours.map((daily, index) => {\r\n//                   const variance = daily.ctsHour - daily.clientHour;\r\n//                   return (\r\n//                     <tr key={index} style={{ backgroundColor: '#fbfbfb' }}>\r\n//                       <td>{daily.date}</td>\r\n//                       <td>{daily.associateId}</td>\r\n//                       <td>{daily.associateName}</td>\r\n//                       <td>{daily.ctsHour}</td>\r\n//                       <td>{daily.clientHour}</td>\r\n//                       <td\r\n//                         className={\r\n//                           variance > 0\r\n//                             ? 'text-danger fw-semibold'\r\n//                             : variance < 0\r\n//                             ? 'text-primary fw-semibold'\r\n//                             : 'text-success fw-semibold'\r\n//                         }\r\n//                       >\r\n//                         {variance}\r\n//                       </td>\r\n//                     </tr>\r\n//                   );\r\n//                 })\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"6\" className=\"text-center py-4 text-muted\">\r\n//                     No daily hour data available for this associate.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DateLevel;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\r\n\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\n// const DateLevel = () => {\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   const { projectId: urlProjectId, associateId: urlAssociateId } = useParams(); // Get params from URL\r\n\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State for fetched daily hour data\r\n\r\n//   const [dailyHours, setDailyHours] = useState([]);\r\n\r\n//   // State for loading indicator\r\n\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // State for error messages\r\n\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // States to keep track of the context for which data was last fetched\r\n\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   const [activeProjectId, setActiveProjectId] = useState(null);\r\n\r\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\r\n\r\n//   const [activeAssociateId, setActiveAssociateId] = useState(null);\r\n\r\n//   const [activeAssociateName, setActiveAssociateName] = useState('Loading...');\r\n\r\n//   const [activeAccountId, setActiveAccountId] = useState(null);\r\n\r\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n\r\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Set font family on component mount\r\n\r\n//   useEffect(() => {\r\n\r\n//     const link = document.createElement('link');\r\n\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n\r\n//     link.rel = 'stylesheet';\r\n\r\n//     document.head.appendChild(link);\r\n\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n//   }, []);\r\n\r\n//   // Effect to handle context and fetch data\r\n\r\n//   useEffect(() => {\r\n\r\n//     const fetchDailyHoursData = async (month, year, projId, assocId) => {\r\n\r\n//       setLoading(true);\r\n\r\n//       setError(null);\r\n\r\n//       // Construct the request body as expected by your backend\r\n\r\n//       const requestBody = {\r\n\r\n//         month: month,\r\n\r\n//         year: year,\r\n\r\n//         projectId: projId,\r\n\r\n//         associateId: assocId\r\n\r\n//       };\r\n\r\n//       console.log(\"Fetching daily hours data with request body (POST):\", requestBody); // For debugging\r\n\r\n//       try {\r\n\r\n//         const response = await fetch(`${BACKEND_URL}/api/date-level`, {\r\n\r\n//           method: 'POST', // As per your backend spec\r\n\r\n//           headers: {\r\n\r\n//             'Content-Type': 'application/json',\r\n\r\n//           },\r\n\r\n//           body: JSON.stringify(requestBody),\r\n\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n\r\n//           const errorText = await response.text();\r\n\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n\r\n//         }\r\n\r\n//         const data = await response.json();\r\n\r\n//         setDailyHours(Array.isArray(data) ? data : [data].filter(Boolean));\r\n\r\n//         // Try to derive names from fetched data if available\r\n\r\n//         if (data && data.length > 0) {\r\n\r\n//           if (data[0].projectName) setActiveProjectName(data[0].projectName);\r\n\r\n//           if (data[0].associateName) setActiveAssociateName(data[0].associateName);\r\n\r\n//           if (data[0].accountName) setActiveAccountName(data[0].accountName);\r\n\r\n//           if (data[0].accountId) setActiveAccountId(data[0].accountId);\r\n\r\n//         } else {\r\n\r\n//           // Fallback to stored names or IDs if data is empty or names are missing\r\n\r\n//           const storedProjectName = sessionStorage.getItem('lastFetchedDateProjectName');\r\n\r\n//           const storedAssociateName = sessionStorage.getItem('lastFetchedDateAssociateName');\r\n\r\n//           const storedAccountName = sessionStorage.getItem('lastFetchedDateAccountName');\r\n\r\n//           const storedAccountId = sessionStorage.getItem('lastFetchedDateAccountId');\r\n\r\n//           if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\r\n\r\n//           if (storedAssociateName) setActiveAssociateName(storedAssociateName); else setActiveAssociateName(assocId);\r\n\r\n//           if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\r\n\r\n//           if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\r\n\r\n//         }\r\n\r\n//       } catch (err) {\r\n\r\n//         console.error(\"Error fetching daily hours data:\", err);\r\n\r\n//         setError(`Failed to load daily hours data: ${err.message || \"Network error\"}`);\r\n\r\n//       } finally {\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     };\r\n\r\n//     // Logic to determine context for fetching\r\n\r\n//     let monthToUse = location.state?.month;\r\n\r\n//     let yearToUse = location.state?.year;\r\n\r\n//     let projectIdToUse = urlProjectId;\r\n\r\n//     let associateIdToUse = urlAssociateId;\r\n\r\n//     let projectNameToUse = location.state?.projectName;\r\n\r\n//     let associateNameToUse = location.state?.associateName;\r\n\r\n//     let accountIdToUse = location.state?.accountId;\r\n\r\n//     let accountNameToUse = location.state?.accountName;\r\n\r\n//     // If context is not in location.state (e.g., on back navigation), check sessionStorage\r\n\r\n//     if (!monthToUse || !yearToUse || !projectIdToUse || !associateIdToUse || !projectNameToUse || !associateNameToUse || !accountIdToUse || !accountNameToUse) {\r\n\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedDateMonth');\r\n\r\n//       const storedYear = sessionStorage.getItem('lastFetchedDateYear');\r\n\r\n//       const storedProjectId = sessionStorage.getItem('lastFetchedDateProjectId');\r\n\r\n//       const storedAssociateId = sessionStorage.getItem('lastFetchedDateAssociateId');\r\n\r\n//       const storedProjectName = sessionStorage.getItem('lastFetchedDateProjectName');\r\n\r\n//       const storedAssociateName = sessionStorage.getItem('lastFetchedDateAssociateName');\r\n\r\n//       const storedAccountId = sessionStorage.getItem('lastFetchedDateAccountId');\r\n\r\n//       const storedAccountName = sessionStorage.getItem('lastFetchedDateAccountName');\r\n\r\n//       if (storedMonth && storedYear && storedProjectId && storedAssociateId) {\r\n\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n\r\n//         yearToUse = parseInt(storedYear, 10);\r\n\r\n//         projectIdToUse = storedProjectId;\r\n\r\n//         associateIdToUse = storedAssociateId;\r\n\r\n//         if (storedProjectName) projectNameToUse = storedProjectName;\r\n\r\n//         if (storedAssociateName) associateNameToUse = storedAssociateName;\r\n\r\n//         if (storedAccountId) accountIdToUse = storedAccountId;\r\n\r\n//         if (storedAccountName) accountNameToUse = storedAccountName;\r\n\r\n//       }\r\n\r\n//     }\r\n\r\n//     // If we have valid context, set active states and fetch data if needed\r\n\r\n//     if (monthToUse && yearToUse && projectIdToUse && associateIdToUse && projectNameToUse && associateNameToUse && accountIdToUse && accountNameToUse) {\r\n\r\n//       // Only fetch if the context has changed or if dailyHours are empty\r\n\r\n//       if (\r\n\r\n//         monthToUse !== activeMonth ||\r\n\r\n//         yearToUse !== activeYear ||\r\n\r\n//         projectIdToUse !== activeProjectId ||\r\n\r\n//         associateIdToUse !== activeAssociateId ||\r\n\r\n//         dailyHours.length === 0\r\n\r\n//       ) {\r\n\r\n//         setActiveMonth(monthToUse);\r\n\r\n//         setActiveYear(yearToUse);\r\n\r\n//         setActiveProjectId(projectIdToUse);\r\n\r\n//         setActiveAssociateId(associateIdToUse);\r\n\r\n//         setActiveProjectName(projectNameToUse);\r\n\r\n//         setActiveAssociateName(associateNameToUse);\r\n\r\n//         setActiveAccountId(accountIdToUse);\r\n\r\n//         setActiveAccountName(accountNameToUse);\r\n\r\n//         // Store current context in sessionStorage\r\n\r\n//         sessionStorage.setItem('lastFetchedDateMonth', monthToUse.toString());\r\n\r\n//         sessionStorage.setItem('lastFetchedDateYear', yearToUse.toString());\r\n\r\n//         sessionStorage.setItem('lastFetchedDateProjectId', projectIdToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedDateAssociateId', associateIdToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedDateProjectName', projectNameToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedDateAssociateName', associateNameToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedDateAccountId', accountIdToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedDateAccountName', accountNameToUse);\r\n\r\n//         fetchDailyHoursData(monthToUse, yearToUse, projectIdToUse, associateIdToUse);\r\n\r\n//       } else {\r\n\r\n//         // Data is already present for the active context, no need to fetch\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     } else {\r\n\r\n//       // No valid context found, show error\r\n\r\n//       setError(\"Missing daily hours context. Please go back and select an associate.\");\r\n\r\n//       setLoading(false);\r\n\r\n//     }\r\n\r\n//   }, [location.state, urlProjectId, urlAssociateId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAssociateId, activeProjectName, activeAssociateName, activeAccountId, activeAccountName, dailyHours.length]); // Dependencies for useEffect\r\n\r\n//   // Adjust breadcrumb path based on active states\r\n\r\n//   const breadcrumbPath = [\r\n\r\n//     { name: 'PMO Dashboard', page: '' },\r\n\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n\r\n//     { name: 'Account Level', page: 'accounts' },\r\n\r\n//     { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\r\n\r\n//     { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` },\r\n\r\n//     { name: `Daily View (${activeAssociateName})`, page: `projects/${activeProjectId}/associates/${activeAssociateId}/daily` }\r\n\r\n//   ];\r\n\r\n//   // Render loading state\r\n\r\n//   if (loading) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n\r\n//           <span className=\"visually-hidden\">Loading Daily Hours Data...</span>\r\n\r\n//         </div>\r\n\r\n//         <p className=\"ms-3 text-primary\">Loading Daily Hours Data...</p>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   // Render error state\r\n\r\n//   if (error) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/projects/${activeProjectId}/associates`)}>\r\n\r\n//           Go to Associate Level\r\n\r\n//         </button>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   return (\r\n\r\n//     <div\r\n\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n\r\n//       style={{\r\n\r\n//         background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\r\n\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n\r\n//       }}\r\n\r\n//     >\r\n\r\n//       <div\r\n\r\n//         className=\"card shadow p-4 w-100\"\r\n\r\n//         style={{\r\n\r\n//           maxWidth: '950px', // Adjusted max-width for more columns\r\n\r\n//           backgroundColor: '#ffffffee',\r\n\r\n//           borderRadius: '1rem'\r\n\r\n//         }}\r\n\r\n//       >\r\n\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n\r\n//           ðŸ“… Daily Hours â€“ {activeAssociateName}\r\n\r\n//         </h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n\r\n//             <thead\r\n\r\n//               style={{\r\n\r\n//                 background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\r\n\r\n//                 color: 'white'\r\n\r\n//               }}\r\n\r\n//             >\r\n\r\n//               <tr>\r\n\r\n//                 {/* Updated Column Headers to match your DTO */}\r\n\r\n//                 <th>Date</th>\r\n\r\n//                 <th>Associate ID</th>\r\n\r\n//                 <th>Associate Name</th>\r\n\r\n//                 <th>Project ID</th>\r\n\r\n//                 <th>Project Name</th>\r\n\r\n//                 <th>Company Hours</th>\r\n\r\n//                 <th>Client Hours</th>\r\n\r\n//                 <th>Variance Time Units</th>\r\n\r\n//                 <th>Comparison Result</th>\r\n\r\n//               </tr>\r\n\r\n//             </thead>\r\n\r\n//             <tbody>\r\n\r\n//               {dailyHours.length > 0 ? (\r\n\r\n//                 dailyHours.map((daily, index) => {\r\n\r\n//                   // Use varianceTimeUnits directly from DTO if available, otherwise calculate\r\n\r\n//                   const variance = daily.varianceTimeUnits !== undefined && daily.varianceTimeUnits !== null\r\n\r\n//                     ? daily.varianceTimeUnits\r\n\r\n//                     : (daily.companyHours - daily.clientHours);\r\n\r\n//                   return (\r\n\r\n//                     <tr key={index} style={{ backgroundColor: '#fbfbfb' }}>\r\n\r\n//                       <td>{daily.date}</td>\r\n\r\n//                       <td>{daily.associateId}</td>\r\n\r\n//                       <td>{daily.associateName}</td>\r\n\r\n//                       <td>{daily.projectId}</td>\r\n\r\n//                       <td>{daily.projectName}</td>\r\n\r\n//                       <td>{daily.companyHours}</td>\r\n\r\n//                       <td>{daily.clientHours}</td>\r\n\r\n//                       <td\r\n\r\n//                         className={`fw-semibold ${variance > 0\r\n\r\n//                             ? 'text-danger'\r\n\r\n//                             : variance < 0\r\n\r\n//                               ? 'text-primary'\r\n\r\n//                               : 'text-success'\r\n\r\n//                           }`}\r\n\r\n//                       >\r\n\r\n//                         {variance}\r\n\r\n//                       </td>\r\n\r\n//                       <td>{daily.comparisonResult}</td>\r\n\r\n//                     </tr>\r\n\r\n//                   );\r\n\r\n//                 })\r\n\r\n//               ) : (\r\n\r\n//                 <tr>\r\n\r\n//                   <td colSpan=\"9\" className=\"text-center py-4 text-muted\">\r\n\r\n//                     No daily hour data available for this associate and period.\r\n\r\n//                   </td>\r\n\r\n//                 </tr>\r\n\r\n//               )}\r\n\r\n//             </tbody>\r\n\r\n//           </table>\r\n\r\n//         </div>\r\n\r\n//       </div>\r\n\r\n//     </div>\r\n\r\n//   );\r\n\r\n// };\r\n\r\n// export default DateLevel;\r\n\r\n\r\n// src/components/Details/DateLevel.js\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport $ from 'jquery';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\nimport Breadcrumbs from '../Breadcrumbs';\r\nimport commonData from '../../data/commonData.json';\r\n\r\nconst DateLevel = () => {\r\n  const navigate = useNavigate();\r\n  const { projectId: urlProjectId, associateId: urlAssociateId } = useParams();\r\n  const location = useLocation();\r\n  const tableRef = useRef(null);\r\n\r\n  const [dailyHours, setDailyHours]               = useState([]);\r\n  const [loading, setLoading]                     = useState(true);\r\n  const [error, setError]                         = useState(null);\r\n  const [activeMonth, setActiveMonth]             = useState(null);\r\n  const [activeYear, setActiveYear]               = useState(null);\r\n  const [activeProjectId, setActiveProjectId]     = useState(null);\r\n  const [activeProjectName, setActiveProjectName] = useState('Loading...');\r\n  const [activeAssociateId, setActiveAssociateId] = useState(null);\r\n  const [activeAssociateName, setActiveAssociateName] = useState('Loading...');\r\n  const [activeAccountId, setActiveAccountId]     = useState(null);\r\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Currency formatter from commonData.json\r\n  const {\r\n    locale,\r\n    currency,\r\n    minimumFractionDigits,\r\n    maximumFractionDigits\r\n  } = commonData.currencySettings;\r\n  const formatCurrency = (val = 0) =>\r\n    val.toLocaleString(locale, {\r\n      style: 'currency',\r\n      currency,\r\n      minimumFractionDigits,\r\n      maximumFractionDigits\r\n    });\r\n\r\n  // Load Poppins font once\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href =\r\n      'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Fetch daily hours data\r\n  useEffect(() => {\r\n    const fetchDailyHoursData = async (month, year, projId, assocId) => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const response = await fetch(`${BACKEND_URL}/api/date-level`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ month, year, projectId: projId, associateId: assocId })\r\n        });\r\n        if (!response.ok) {\r\n          const errText = await response.text();\r\n          throw new Error(`status: ${response.status}, message: ${errText || response.statusText}`);\r\n        }\r\n        const data = await response.json();\r\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\r\n        setDailyHours(list);\r\n\r\n        if (list.length > 0) {\r\n          setActiveProjectName(list[0].projectName || projId);\r\n          setActiveAssociateName(list[0].associateName || assocId);\r\n          setActiveAccountName(list[0].accountName || activeAccountName);\r\n          setActiveAccountId(list[0].accountId || activeAccountId);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching daily hours data:', err);\r\n        setError(`Failed to load daily hours data: ${err.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    let monthToUse       = location.state?.month;\r\n    let yearToUse        = location.state?.year;\r\n    let projectIdToUse   = urlProjectId;\r\n    let associateIdToUse = urlAssociateId;\r\n    let projectNameToUse = location.state?.projectName;\r\n    let associateNameToUse = location.state?.associateName;\r\n    let accountIdToUse   = location.state?.accountId;\r\n    let accountNameToUse = location.state?.accountName;\r\n\r\n    if (\r\n      !monthToUse ||\r\n      !yearToUse ||\r\n      !projectIdToUse ||\r\n      !associateIdToUse ||\r\n      !projectNameToUse ||\r\n      !associateNameToUse ||\r\n      !accountIdToUse ||\r\n      !accountNameToUse\r\n    ) {\r\n      const sm  = sessionStorage.getItem('lastFetchedDateMonth');\r\n      const sy  = sessionStorage.getItem('lastFetchedDateYear');\r\n      const sp  = sessionStorage.getItem('lastFetchedDateProjectId');\r\n      const sa  = sessionStorage.getItem('lastFetchedDateAssociateId');\r\n      const spn = sessionStorage.getItem('lastFetchedDateProjectName');\r\n      const san = sessionStorage.getItem('lastFetchedDateAssociateName');\r\n      const saccId = sessionStorage.getItem('lastFetchedDateAccountId');\r\n      const saccName = sessionStorage.getItem('lastFetchedDateAccountName');\r\n\r\n      if (sm && sy && sp && sa) {\r\n        monthToUse        = parseInt(sm, 10);\r\n        yearToUse         = parseInt(sy, 10);\r\n        projectIdToUse    = sp;\r\n        associateIdToUse  = sa;\r\n        projectNameToUse  = spn || projectNameToUse;\r\n        associateNameToUse= san || associateNameToUse;\r\n        accountIdToUse    = saccId || accountIdToUse;\r\n        accountNameToUse  = saccName || accountNameToUse;\r\n      }\r\n    }\r\n\r\n    if (\r\n      monthToUse &&\r\n      yearToUse &&\r\n      projectIdToUse &&\r\n      associateIdToUse &&\r\n      projectNameToUse &&\r\n      associateNameToUse &&\r\n      accountIdToUse &&\r\n      accountNameToUse\r\n    ) {\r\n      if (\r\n        monthToUse !== activeMonth ||\r\n        yearToUse  !== activeYear ||\r\n        projectIdToUse !== activeProjectId ||\r\n        associateIdToUse !== activeAssociateId ||\r\n        dailyHours.length === 0\r\n      ) {\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        setActiveProjectId(projectIdToUse);\r\n        setActiveAssociateId(associateIdToUse);\r\n        setActiveProjectName(projectNameToUse);\r\n        setActiveAssociateName(associateNameToUse);\r\n        setActiveAccountId(accountIdToUse);\r\n        setActiveAccountName(accountNameToUse);\r\n\r\n        sessionStorage.setItem('lastFetchedDateMonth', monthToUse.toString());\r\n        sessionStorage.setItem('lastFetchedDateYear', yearToUse.toString());\r\n        sessionStorage.setItem('lastFetchedDateProjectId', projectIdToUse);\r\n        sessionStorage.setItem('lastFetchedDateAssociateId', associateIdToUse);\r\n        sessionStorage.setItem('lastFetchedDateProjectName', projectNameToUse);\r\n        sessionStorage.setItem('lastFetchedDateAssociateName', associateNameToUse);\r\n        sessionStorage.setItem('lastFetchedDateAccountId', accountIdToUse);\r\n        sessionStorage.setItem('lastFetchedDateAccountName', accountNameToUse);\r\n\r\n        fetchDailyHoursData(monthToUse, yearToUse, projectIdToUse, associateIdToUse);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setError('Missing daily hours context. Please go back and select an associate.');\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    location.state,\r\n    urlProjectId,\r\n    urlAssociateId,\r\n    activeMonth,\r\n    activeYear,\r\n    activeProjectId,\r\n    activeAssociateId,\r\n    dailyHours.length\r\n  ]);\r\n\r\n  // Initialize & destroy DataTable whenever data changes\r\n  useEffect(() => {\r\n    if (!loading && dailyHours.length > 0 && tableRef.current) {\r\n      const $tbl = $(tableRef.current);\r\n      if ($.fn.DataTable.isDataTable($tbl)) {\r\n        $tbl.DataTable().destroy();\r\n      }\r\n      $tbl.DataTable({\r\n        paging:    true,\r\n        searching: true,\r\n        ordering:  true,\r\n        info:      true,\r\n        autoWidth: false\r\n      });\r\n    }\r\n    return () => {\r\n      if (tableRef.current) {\r\n        const $tbl = $(tableRef.current);\r\n        if ($.fn.DataTable.isDataTable($tbl)) {\r\n          $tbl.DataTable().destroy();\r\n        }\r\n      }\r\n    };\r\n  }, [loading, dailyHours]);\r\n\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' },\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n    { name: 'Account Level', page: 'accounts' },\r\n    {\r\n      name: `Projects (${activeAccountName})`,\r\n      page: `accounts/${activeAccountId}/projects`\r\n    },\r\n    {\r\n      name: `Associates (${activeProjectName})`,\r\n      page: `projects/${activeProjectId}/associates`\r\n    },\r\n    {\r\n      name: `Daily View (${activeAssociateName})`,\r\n      page: `projects/${activeProjectId}/associates/${activeAssociateId}/daily`\r\n    }\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\" />\r\n        <p className=\"ms-3 text-primary\">Loading Daily Hours Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        <button\r\n          className=\"btn btn-primary mt-3\"\r\n          onClick={() => navigate(`/projects/${activeProjectId}/associates`)}\r\n        >\r\n          Go to Associate Level\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 w-100\"\r\n        style={{\r\n          maxWidth: '950px',\r\n          backgroundColor: '#ffffffee',\r\n          borderRadius: '1rem'\r\n        }}\r\n      >\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n          ðŸ“… Daily Hours â€“ {activeAssociateName}\r\n        </h2>\r\n\r\n        <div className=\"table-responsive rounded\">\r\n          <table\r\n            ref={tableRef}\r\n            className=\"display table table-hover table-borderless align-middle mb-0\"\r\n            style={{ width: '100%' }}\r\n          >\r\n            <thead\r\n              style={{\r\n                background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\r\n                color: 'white'\r\n              }}\r\n            >\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Associate ID</th>\r\n                <th>Associate Name</th>\r\n                <th>Project ID</th>\r\n                <th>Project Name</th>\r\n                <th>Company Hours</th>\r\n                <th>Client Hours</th>\r\n                <th>Variance Time Units</th>\r\n                <th>Comparison Result</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {dailyHours.map((daily, idx) => {\r\n                const variance =\r\n                  daily.varianceTimeUnits != null\r\n                    ? daily.varianceTimeUnits\r\n                    : daily.companyHours - daily.clientHours;\r\n                return (\r\n                  <tr key={idx}>\r\n                    <td>{daily.date}</td>\r\n                    <td>{daily.associateId}</td>\r\n                    <td>{daily.associateName}</td>\r\n                    <td>{daily.projectId}</td>\r\n                    <td>{daily.projectName}</td>\r\n                    <td>{daily.companyHours}</td>\r\n                    <td>{daily.clientHours}</td>\r\n                    <td\r\n                      className={`fw-semibold ${\r\n                        variance > 0\r\n                          ? 'text-danger'\r\n                          : variance < 0\r\n                          ? 'text-primary'\r\n                          : 'text-success'\r\n                      }`}\r\n                    >\r\n                      {variance}\r\n                    </td>\r\n                    <td>{daily.comparisonResult}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateLevel;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}