{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\AccountLevel.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\n// import accountData from '../../data/accountData.json'; // CORRECTED PATH: data is two levels up\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n\n//   // Set font family on component mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Define breadcrumb path for Account Level\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n//             <thead\n//               className=\"text-white\"\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//             >\n//               <tr>\n//                 <th className=\"px-3 py-2\">Account ID</th>\n//                 <th className=\"px-3 py-2\">Account Name</th>\n//                 <th className=\"px-3 py-2\">Actual Revenue</th>\n//                 <th className=\"px-3 py-2\">Forecast Revenue</th>\n//                 <th className=\"px-3 py-2\">Forecast vs Actual Revenue</th>\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {accountData.accounts.map((account) => {\n//                 const variance = account.actualRevenue - account.forecastRevenue;\n//                 return (\n//                   <tr key={account.id} style={{ backgroundColor: '#fdfdfd' }}>\n//                     <td className=\"px-3 py-2\">{account.id}</td>\n//                     <td className=\"px-3 py-2\">{account.name}</td>\n//                     <td className=\"px-3 py-2\">${account.actualRevenue.toLocaleString()}</td>\n//                     <td className=\"px-3 py-2\">${account.forecastRevenue.toLocaleString()}</td>\n//                     <td\n//                       className={`px-3 py-2 fw-semibold ${\n//                         variance > 0 ? 'text-success' : variance < 0 ? 'text-danger' : 'text-muted'\n//                       }`}\n//                     >\n//                       ${variance.toLocaleString()}\n//                     </td>\n//                     <td className=\"px-3 py-2 text-center\">\n//                       <button\n//                         onClick={() => navigate(`/accounts/${account.id}/projects`)} // Navigate to projects for this account\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                         title={`View Projects for ${account.name}`}\n//                       >\n//                         üîç\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\n//after demo after discussion for adding datatables.net\n\n// import React, { useEffect, useState } from 'react';\n\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\n\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n\n// const AccountLevel = () => {\n\n//   const navigate = useNavigate();\n\n//   const location = useLocation(); // Hook to access location state\n\n//   // State to store fetched account data\n\n//   const [accounts, setAccounts] = useState([]);\n\n//   // State for loading indicator\n\n//   const [loading, setLoading] = useState(true);\n\n//   // State for error messages\n\n//   const [error, setError] = useState(null);\n\n//   // States to keep track of the month and year for which data was last fetched\n\n//   // This helps in preventing unnecessary re-fetches and retaining context\n\n//   const [activeMonth, setActiveMonth] = useState(null);\n\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Set font family on component mount\n\n//   useEffect(() => {\n\n//     const link = document.createElement('link');\n\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n\n//     link.rel = 'stylesheet';\n\n//     document.head.appendChild(link);\n\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n\n//   }, []);\n\n//   // Effect to handle month/year state and fetch data\n\n//   useEffect(() => {\n\n//     const fetchAccountData = async (month, year) => {\n\n//       setLoading(true);\n\n//       setError(null);\n\n//       // Construct the request body as expected by your backend\n\n//       const requestBody = {\n\n//         month: month,\n\n//         year: year\n\n//       };\n\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\n\n//       try {\n\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\n\n//           method: 'POST',\n\n//           headers: {\n\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\n\n//           },\n\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\n\n//         });\n\n//         if (!response.ok) {\n\n//           const errorText = await response.text(); // Get detailed error message from backend\n\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n\n//         }\n\n//         const data = await response.json();\n\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n\n//       } catch (err) {\n\n//         console.error(\"Error fetching account data:\", err);\n\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n\n//       } finally {\n\n//         setLoading(false);\n\n//       }\n\n//     };\n\n//     // Logic to determine month and year for fetching\n\n//     let monthToUse = location.state?.month;\n\n//     let yearToUse = location.state?.year;\n\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\n\n//     if (!monthToUse || !yearToUse) {\n\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n\n//       if (storedMonth && storedYear) {\n\n//         monthToUse = parseInt(storedMonth, 10);\n\n//         yearToUse = parseInt(storedYear, 10);\n\n//       }\n\n//     }\n\n//     // If we have valid month/year, set active states and fetch data if needed\n\n//     if (monthToUse && yearToUse) {\n\n//       // Only fetch if the active month/year has changed or if accounts are empty\n\n//       // This prevents re-fetching when simply navigating back to the same view\n\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n\n//         setActiveMonth(monthToUse);\n\n//         setActiveYear(yearToUse);\n\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n\n//         fetchAccountData(monthToUse, yearToUse);\n\n//       } else {\n\n//         // Data is already present for the active month/year, no need to fetch\n\n//         setLoading(false);\n\n//       }\n\n//     } else {\n\n//       // No month/year found in state or session, show error\n\n//       setError(\"Missing month or year. Please go back and select a date.\");\n\n//       setLoading(false);\n\n//     }\n\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\n\n//   // Define breadcrumb path for Account Level\n\n//   const breadcrumbPath = [\n\n//     { name: 'PMO Dashboard', page: '' },\n\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n\n//     { name: 'Account Level', page: 'accounts' }\n\n//   ];\n\n//   // Render loading state\n\n//   if (loading) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\n\n//         </div>\n\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   // Render error state\n\n//   if (error) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n\n//         <p className=\"fs-4\">Error: {error}</p>\n\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\n\n//           Go to Upload Page\n\n//         </button>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   return (\n\n//     <div\n\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n\n//       style={{\n\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n\n//         fontFamily: \"'Poppins', sans-serif\"\n\n//       }}\n\n//     >\n\n//       <div\n\n//         className=\"card shadow p-4 p-md-5 w-100\"\n\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n\n//       >\n\n//         <Breadcrumbs path={breadcrumbPath} />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n\n//         <div className=\"table-responsive rounded\">\n\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n\n//             <thead\n\n//               className=\"text-white\"\n\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n\n//             >\n\n//               <tr>\n\n//                 <th className=\"px-3 py-2\">Account ID</th>\n\n//                 <th className=\"px-3 py-2\">Account Name</th>\n\n//                 <th className=\"px-3 py-2\">Total Projects</th>\n\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\n\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n\n//               </tr>\n\n//             </thead>\n\n//             <tbody>\n\n//               {accounts.length > 0 ? (\n\n//                 accounts.map((account) => (\n\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\n\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\n\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\n\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\n\n//                     <td className=\"px-3 py-2\">${account.totalRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n\n//                     <td className=\"px-3 py-2 text-center\">\n\n//                       <button\n\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\n\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\n\n//                           state: {\n\n//                             accountId: account.accountId, // Pass accountId explicitly\n\n//                             month: activeMonth, // Pass the active month\n\n//                             year: activeYear // Pass the active year\n\n//                           }\n\n//                         })}\n\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n\n//                         title={`View Projects for ${account.accountName}`}\n\n//                       >\n\n//                         üîç\n\n//                       </button>\n\n//                     </td>\n\n//                   </tr>\n\n//                 ))\n\n//               ) : (\n\n//                 <tr>\n\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\n\n//                     No account data found for the selected period.\n\n//                   </td>\n\n//                 </tr>\n\n//               )}\n\n//             </tbody>\n\n//           </table>\n\n//         </div>\n\n//       </div>\n\n//     </div>\n\n//   );\n\n// };\n\n// export default AccountLevel;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n// // Import your commonData.json\n// import commonData from '../../data/commonData.json';\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation(); // Hook to access location state\n\n//   // State to store fetched account data\n//   const [accounts, setAccounts] = useState([]);\n//   // State for loading indicator\n//   const [loading, setLoading] = useState(true);\n//   // State for error messages\n//   const [error, setError] = useState(null);\n//   // States to keep track of the month and year for which data was last fetched\n//   // This helps in preventing unnecessary re-fetches and retaining context\n//   const [activeMonth, setActiveMonth] = useState(null);\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Destructure your currency settings from commonData.json\n//   const {\n//     locale,\n//     currency,\n//     minimumFractionDigits,\n//     maximumFractionDigits\n//   } = commonData.currencySettings;\n\n//   // Utility to format any number to your centralized currency format\n//   const formatCurrency = (value = 0) =>\n//     value.toLocaleString(locale, {\n//       style: 'currency',\n//       currency,\n//       minimumFractionDigits,\n//       maximumFractionDigits\n//     });\n\n//   // Set font family on component mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Effect to handle month/year state and fetch data\n//   useEffect(() => {\n//     const fetchAccountData = async (month, year) => {\n//       setLoading(true);\n//       setError(null);\n//       // Construct the request body as expected by your backend\n//       const requestBody = {\n//         month: month,\n//         year: year\n//       };\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\n//       try {\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\n//           },\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\n//         });\n//         if (!response.ok) {\n//           const errorText = await response.text(); // Get detailed error message from backend\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n//         }\n//         const data = await response.json();\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n//       } catch (err) {\n//         console.error(\"Error fetching account data:\", err);\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     // Logic to determine month and year for fetching\n//     let monthToUse = location.state?.month;\n//     let yearToUse = location.state?.year;\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\n//     if (!monthToUse || !yearToUse) {\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n//       if (storedMonth && storedYear) {\n//         monthToUse = parseInt(storedMonth, 10);\n//         yearToUse = parseInt(storedYear, 10);\n//       }\n//     }\n//     // If we have valid month/year, set active states and fetch data if needed\n//     if (monthToUse && yearToUse) {\n//       // Only fetch if the active month/year has changed or if accounts are empty\n//       // This prevents re-fetching when simply navigating back to the same view\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n//         setActiveMonth(monthToUse);\n//         setActiveYear(yearToUse);\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n//         fetchAccountData(monthToUse, yearToUse);\n//       } else {\n//         // Data is already present for the active month/year, no need to fetch\n//         setLoading(false);\n//       }\n//     } else {\n//       // No month/year found in state or session, show error\n//       setError(\"Missing month or year. Please go back and select a date.\");\n//       setLoading(false);\n//     }\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\n\n//   // Define breadcrumb path for Account Level\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   // Render loading state\n//   if (loading) {\n//     return (\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\n//         </div>\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n//       </div>\n//     );\n//   }\n\n//   // Render error state\n//   if (error) {\n//     return (\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n//         <p className=\"fs-4\">Error: {error}</p>\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\n//           Go to Upload Page\n//         </button>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n//             <thead\n//               className=\"text-white\"\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//             >\n//               <tr>\n//                 <th className=\"px-3 py-2\">Account ID</th>\n//                 <th className=\"px-3 py-2\">Account Name</th>\n//                 <th className=\"px-3 py-2\">Total Projects</th>\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {accounts.length > 0 ? (\n//                 accounts.map((account) => (\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\n//                     {/* Apply the formatCurrency function here */}\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\n//                     <td className=\"px-3 py-2 text-center\">\n//                       <button\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\n//                           state: {\n//                             accountId: account.accountId, // Pass accountId explicitly\n//                             month: activeMonth, // Pass the active month\n//                             year: activeYear, // Pass the active year\n//                             accountName: account.accountName // Also pass account name for breadcrumbs in ProjectLevel\n//                           }\n//                         })}\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                         title={`View Projects for ${account.accountName}`}\n//                       >\n//                         üîç\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 ))\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\n//                     No account data found for the selected period.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs';\n// import commonData from '../../data/commonData.json';\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   const [accounts, setAccounts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [activeMonth, setActiveMonth] = useState(null);\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   const {\n//     locale,\n//     currency,\n//     minimumFractionDigits,\n//     maximumFractionDigits\n//   } = commonData.currencySettings;\n\n//   const formatCurrency = (value = 0) =>\n//     value.toLocaleString(locale, {\n//       style: 'currency',\n//       currency,\n//       minimumFractionDigits,\n//       maximumFractionDigits\n//     });\n\n//   // Placeholder function for Download Data\n//   const handleDownloadData = () => {\n//     alert('Download Data button clicked! (Logic not yet implemented)');\n//     // Your actual CSV generation and download logic will go here later.\n//   };\n\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchAccountData = async (month, year) => {\n//       setLoading(true);\n//       setError(null);\n//       const requestBody = {\n//         month: month,\n//         year: year\n//       };\n//       console.log(\"Fetching account data with request body (POST):\", requestBody);\n//       try {\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify(requestBody),\n//         });\n//         if (!response.ok) {\n//           const errorText = await response.text();\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n//         }\n//         const data = await response.json();\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n//       } catch (err) {\n//         console.error(\"Error fetching account data:\", err);\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     let monthToUse = location.state?.month;\n//     let yearToUse = location.state?.year;\n\n//     if (!monthToUse || !yearToUse) {\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n//       if (storedMonth && storedYear) {\n//         monthToUse = parseInt(storedMonth, 10);\n//         yearToUse = parseInt(storedYear, 10);\n//       }\n//     }\n\n//     if (monthToUse && yearToUse) {\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n//         setActiveMonth(monthToUse);\n//         setActiveYear(yearToUse);\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n//         fetchAccountData(monthToUse, yearToUse);\n//       } else {\n//         setLoading(false);\n//       }\n//     } else {\n//       setError(\"Missing month or year. Please go back and select a date.\");\n//       setLoading(false);\n//     }\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\n\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   if (loading) {\n//     return (\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\n//         </div>\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n//         <p className=\"fs-4\">Error: {error}</p>\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\n//           Go to Upload Page\n//         </button>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\n//           <h2 className=\"mb-0 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n//           {/* Only the Download Data button is here now */}\n//           {accounts.length > 0 && ( // Conditionally render if there's data\n//             <div className=\"d-flex gap-2\">\n//               <button\n//                 className=\"btn btn-outline-success rounded-pill px-3\"\n//                 onClick={handleDownloadData}\n//                 title=\"Download Account Data\"\n//               >\n//                 <i className=\"bi bi-download me-2\"></i> Download Data\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n//             <thead\n//               className=\"text-white\"\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//             >\n//               <tr>\n//                 <th className=\"px-3 py-2\">Account ID</th>\n//                 <th className=\"px-3 py-2\">Account Name</th>\n//                 <th className=\"px-3 py-2\">Total Projects</th>\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {accounts.length > 0 ? (\n//                 accounts.map((account) => (\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\n//                     <td className=\"px-3 py-2 text-center\">\n//                       <button\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\n//                           state: {\n//                             accountId: account.accountId,\n//                             month: activeMonth,\n//                             year: activeYear,\n//                             accountName: account.accountName\n//                           }\n//                         })}\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                         title={`View Projects for ${account.accountName}`}\n//                       >\n//                         üîç\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 ))\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\n//                     No account data found for the selected period.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport Breadcrumbs from '../Breadcrumbs';\nimport commonData from '../../data/commonData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n\n  // State for managing the comment modal\n  const [showCommentModal, setShowCommentModal] = useState(false);\n  const [currentComment, setCurrentComment] = useState('');\n  const [currentAccountIdForComment, setCurrentAccountIdForComment] = useState(null);\n  const BACKEND_URL = 'http://localhost:8081';\n  const {\n    locale,\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  } = commonData.currencySettings;\n  const formatCurrency = (value = 0) => value.toLocaleString(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  });\n\n  // Placeholder function for Download Data\n  const handleDownloadData = () => {\n    alert('Download Data button clicked! (Logic not yet implemented)');\n    // Your actual CSV generation and download logic will go here later.\n  };\n\n  // Function to open the comment modal\n  const handleOpenCommentModal = (accountId, existingComment) => {\n    setCurrentAccountIdForComment(accountId);\n    setCurrentComment(existingComment);\n    setShowCommentModal(true);\n  };\n\n  // Function to close the comment modal\n  const handleCloseCommentModal = () => {\n    setShowCommentModal(false);\n    setCurrentComment('');\n    setCurrentAccountIdForComment(null);\n  };\n\n  // Function to save the comment (placeholder logic)\n  const handleSaveComment = () => {\n    // In a real application, you would send currentComment and currentAccountIdForComment\n    // to your backend via an API call here.\n    console.log(`Saving comment for Account ID ${currentAccountIdForComment}: \"${currentComment}\"`);\n    alert(`Comment saved for Account ID ${currentAccountIdForComment}.`);\n    // Optimistically update the local state if needed, or refetch data\n    setAccounts(prevAccounts => prevAccounts.map(account => account.accountId === currentAccountIdForComment ? {\n      ...account,\n      comments: currentComment\n    } // Assuming a 'comments' field exists or is added\n    : account));\n    handleCloseCommentModal();\n  };\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n  useEffect(() => {\n    var _location$state, _location$state2;\n    const fetchAccountData = async (month, year) => {\n      setLoading(true);\n      setError(null);\n      const requestBody = {\n        month: month,\n        year: year\n      };\n      console.log(\"Fetching account data with request body (POST):\", requestBody);\n      try {\n        const response = await fetch(`${BACKEND_URL}/api/account`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n        }\n        const data = await response.json();\n        // Assuming your backend might return a 'forecastRevenue' and 'comments' field,\n        // otherwise, initialize them here.\n        setAccounts(Array.isArray(data) ? data.map(acc => ({\n          ...acc,\n          forecastRevenue: acc.forecastRevenue || 0,\n          // Default to 0 if not provided\n          comments: acc.comments || '' // Default to empty string if not provided\n        })) : [data].filter(Boolean).map(acc => ({\n          ...acc,\n          forecastRevenue: acc.forecastRevenue || 0,\n          comments: acc.comments || ''\n        })));\n      } catch (err) {\n        console.error(\"Error fetching account data:\", err);\n        setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    let monthToUse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let yearToUse = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    if (!monthToUse || !yearToUse) {\n      const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n      const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n      if (storedMonth && storedYear) {\n        monthToUse = parseInt(storedMonth, 10);\n        yearToUse = parseInt(storedYear, 10);\n      }\n    }\n    if (monthToUse && yearToUse) {\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n        sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n        fetchAccountData(monthToUse, yearToUse);\n      } else {\n        setLoading(false);\n      }\n    } else {\n      setError(\"Missing month or year. Please go back and select a date.\");\n      setLoading(false);\n    }\n  }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  }, {\n    name: 'Account Level',\n    page: 'accounts'\n  }];\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading Account Data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1072,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1071,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Account Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1070,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1082,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate('/upload'),\n        children: \"Go to Upload Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1081,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '1100px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-0 fw-semibold text-dark\",\n          children: \"\\uD83C\\uDFE2 Account Level Overview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1104,\n          columnNumber: 11\n        }, this), accounts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex gap-2\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-outline-success rounded-pill px-3\",\n            onClick: handleDownloadData,\n            title: \"Download Account Data\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-download me-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1112,\n              columnNumber: 17\n            }, this), \" Download Data\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1107,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-hover align-middle table-borderless mb-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #1d4ed8, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Account ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1124,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Account Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1125,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Total Projects\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1126,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Total Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1127,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Forecast Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1128,\n                columnNumber: 17\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Comments\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1129,\n                columnNumber: 17\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2 text-center\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1130,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1123,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: accounts.length > 0 ? accounts.map(account => /*#__PURE__*/_jsxDEV(\"tr\", {\n              style: {\n                backgroundColor: '#fdfdfd'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2\",\n                children: account.accountId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1137,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2\",\n                children: account.accountName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1138,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2\",\n                children: account.totalProjects\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1139,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2\",\n                children: formatCurrency(account.totalRevenue)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1140,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2\",\n                children: formatCurrency(account.forecastRevenue)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1141,\n                columnNumber: 21\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-sm btn-light p-0 border-0\",\n                  onClick: () => handleOpenCommentModal(account.accountId, account.comments),\n                  title: account.comments ? \"View/Edit Comment\" : \"Add Comment\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      fontSize: '1.2em'\n                    },\n                    children: \"\\uD83D\\uDCAC\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1148,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1143,\n                  columnNumber: 23\n                }, this), account.comments && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"ms-2 badge bg-secondary\",\n                  style: {\n                    cursor: 'pointer'\n                  },\n                  onClick: () => handleOpenCommentModal(account.accountId, account.comments),\n                  children: [account.comments.substring(0, 15), account.comments.length > 15 ? '...' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1151,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1142,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2 text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => navigate(`/accounts/${account.accountId}/projects`, {\n                    state: {\n                      accountId: account.accountId,\n                      month: activeMonth,\n                      year: activeYear,\n                      accountName: account.accountName\n                    }\n                  }),\n                  className: \"btn btn-sm btn-outline-primary rounded-circle\",\n                  title: `View Projects for ${account.accountName}`,\n                  children: \"\\uD83D\\uDD0D\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1158,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1157,\n                columnNumber: 21\n              }, this)]\n            }, account.accountId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1136,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"7\",\n                className: \"text-center text-muted py-4\",\n                children: [\" \", \"No account data found for the selected period.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1177,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1176,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1133,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1098,\n      columnNumber: 7\n    }, this), showCommentModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal fade show\",\n      style: {\n        display: 'block',\n        backgroundColor: 'rgba(0,0,0,0.5)'\n      },\n      tabIndex: \"-1\",\n      \"aria-labelledby\": \"commentModalLabel\",\n      \"aria-hidden\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog modal-dialog-centered\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              id: \"commentModalLabel\",\n              children: [\"Comments for Account ID: \", currentAccountIdForComment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1199,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn-close\",\n              \"aria-label\": \"Close\",\n              onClick: handleCloseCommentModal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1202,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              rows: \"5\",\n              value: currentComment,\n              onChange: e => setCurrentComment(e.target.value),\n              placeholder: \"Enter your comments here...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1210,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1209,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-secondary\",\n              onClick: handleCloseCommentModal,\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1219,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-primary\",\n              onClick: handleSaveComment,\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1226,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1218,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1197,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1196,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1189,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1091,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountLevel, \"LAKKT+2fLJdEYrrH6h9CFm64u8A=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AccountLevel;\nexport default AccountLevel;\nvar _c;\n$RefreshReg$(_c, \"AccountLevel\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","Breadcrumbs","commonData","jsxDEV","_jsxDEV","AccountLevel","_s","navigate","location","accounts","setAccounts","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","showCommentModal","setShowCommentModal","currentComment","setCurrentComment","currentAccountIdForComment","setCurrentAccountIdForComment","BACKEND_URL","locale","currency","minimumFractionDigits","maximumFractionDigits","currencySettings","formatCurrency","value","toLocaleString","style","handleDownloadData","alert","handleOpenCommentModal","accountId","existingComment","handleCloseCommentModal","handleSaveComment","console","log","prevAccounts","map","account","comments","link","document","createElement","href","rel","head","appendChild","body","fontFamily","_location$state","_location$state2","fetchAccountData","month","year","requestBody","response","fetch","method","headers","JSON","stringify","ok","errorText","text","Error","status","statusText","data","json","Array","isArray","acc","forecastRevenue","filter","Boolean","err","message","monthToUse","state","yearToUse","storedMonth","sessionStorage","getItem","storedYear","parseInt","length","setItem","toString","breadcrumbPath","name","page","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","title","accountName","totalProjects","totalRevenue","fontSize","cursor","substring","colSpan","display","tabIndex","id","type","rows","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/AccountLevel.js"],"sourcesContent":["// import React, { useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\r\n// import accountData from '../../data/accountData.json'; // CORRECTED PATH: data is two levels up\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n\r\n//   // Set font family on component mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Define breadcrumb path for Account Level\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//             <thead\r\n//               className=\"text-white\"\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//             >\r\n//               <tr>\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n//                 <th className=\"px-3 py-2\">Actual Revenue</th>\r\n//                 <th className=\"px-3 py-2\">Forecast Revenue</th>\r\n//                 <th className=\"px-3 py-2\">Forecast vs Actual Revenue</th>\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {accountData.accounts.map((account) => {\r\n//                 const variance = account.actualRevenue - account.forecastRevenue;\r\n//                 return (\r\n//                   <tr key={account.id} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                     <td className=\"px-3 py-2\">{account.id}</td>\r\n//                     <td className=\"px-3 py-2\">{account.name}</td>\r\n//                     <td className=\"px-3 py-2\">${account.actualRevenue.toLocaleString()}</td>\r\n//                     <td className=\"px-3 py-2\">${account.forecastRevenue.toLocaleString()}</td>\r\n//                     <td\r\n//                       className={`px-3 py-2 fw-semibold ${\r\n//                         variance > 0 ? 'text-success' : variance < 0 ? 'text-danger' : 'text-muted'\r\n//                       }`}\r\n//                     >\r\n//                       ${variance.toLocaleString()}\r\n//                     </td>\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n//                       <button\r\n//                         onClick={() => navigate(`/accounts/${account.id}/projects`)} // Navigate to projects for this account\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                         title={`View Projects for ${account.name}`}\r\n//                       >\r\n//                         üîç\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 );\r\n//               })}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n//after demo after discussion for adding datatables.net\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\r\n\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\n// const AccountLevel = () => {\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State to store fetched account data\r\n\r\n//   const [accounts, setAccounts] = useState([]);\r\n\r\n//   // State for loading indicator\r\n\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // State for error messages\r\n\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // States to keep track of the month and year for which data was last fetched\r\n\r\n//   // This helps in preventing unnecessary re-fetches and retaining context\r\n\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Set font family on component mount\r\n\r\n//   useEffect(() => {\r\n\r\n//     const link = document.createElement('link');\r\n\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n\r\n//     link.rel = 'stylesheet';\r\n\r\n//     document.head.appendChild(link);\r\n\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n//   }, []);\r\n\r\n//   // Effect to handle month/year state and fetch data\r\n\r\n//   useEffect(() => {\r\n\r\n//     const fetchAccountData = async (month, year) => {\r\n\r\n//       setLoading(true);\r\n\r\n//       setError(null);\r\n\r\n//       // Construct the request body as expected by your backend\r\n\r\n//       const requestBody = {\r\n\r\n//         month: month,\r\n\r\n//         year: year\r\n\r\n//       };\r\n\r\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\r\n\r\n//       try {\r\n\r\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n\r\n//           method: 'POST',\r\n\r\n//           headers: {\r\n\r\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\r\n\r\n//           },\r\n\r\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\r\n\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n\r\n//           const errorText = await response.text(); // Get detailed error message from backend\r\n\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n\r\n//         }\r\n\r\n//         const data = await response.json();\r\n\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n\r\n//       } catch (err) {\r\n\r\n//         console.error(\"Error fetching account data:\", err);\r\n\r\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n\r\n//       } finally {\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     };\r\n\r\n//     // Logic to determine month and year for fetching\r\n\r\n//     let monthToUse = location.state?.month;\r\n\r\n//     let yearToUse = location.state?.year;\r\n\r\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\r\n\r\n//     if (!monthToUse || !yearToUse) {\r\n\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n\r\n//       if (storedMonth && storedYear) {\r\n\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n\r\n//         yearToUse = parseInt(storedYear, 10);\r\n\r\n//       }\r\n\r\n//     }\r\n\r\n//     // If we have valid month/year, set active states and fetch data if needed\r\n\r\n//     if (monthToUse && yearToUse) {\r\n\r\n//       // Only fetch if the active month/year has changed or if accounts are empty\r\n\r\n//       // This prevents re-fetching when simply navigating back to the same view\r\n\r\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n\r\n//         setActiveMonth(monthToUse);\r\n\r\n//         setActiveYear(yearToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n\r\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n\r\n//         fetchAccountData(monthToUse, yearToUse);\r\n\r\n//       } else {\r\n\r\n//         // Data is already present for the active month/year, no need to fetch\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     } else {\r\n\r\n//       // No month/year found in state or session, show error\r\n\r\n//       setError(\"Missing month or year. Please go back and select a date.\");\r\n\r\n//       setLoading(false);\r\n\r\n//     }\r\n\r\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\r\n\r\n//   // Define breadcrumb path for Account Level\r\n\r\n//   const breadcrumbPath = [\r\n\r\n//     { name: 'PMO Dashboard', page: '' },\r\n\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n\r\n//     { name: 'Account Level', page: 'accounts' }\r\n\r\n//   ];\r\n\r\n//   // Render loading state\r\n\r\n//   if (loading) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n\r\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\r\n\r\n//         </div>\r\n\r\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   // Render error state\r\n\r\n//   if (error) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n\r\n//           Go to Upload Page\r\n\r\n//         </button>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   return (\r\n\r\n//     <div\r\n\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n\r\n//       style={{\r\n\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n\r\n//       }}\r\n\r\n//     >\r\n\r\n//       <div\r\n\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n\r\n//       >\r\n\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n\r\n//             <thead\r\n\r\n//               className=\"text-white\"\r\n\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n\r\n//             >\r\n\r\n//               <tr>\r\n\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Total Projects</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\r\n\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n\r\n//               </tr>\r\n\r\n//             </thead>\r\n\r\n//             <tbody>\r\n\r\n//               {accounts.length > 0 ? (\r\n\r\n//                 accounts.map((account) => (\r\n\r\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">${account.totalRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n\r\n//                       <button\r\n\r\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\r\n\r\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n\r\n//                           state: {\r\n\r\n//                             accountId: account.accountId, // Pass accountId explicitly\r\n\r\n//                             month: activeMonth, // Pass the active month\r\n\r\n//                             year: activeYear // Pass the active year\r\n\r\n//                           }\r\n\r\n//                         })}\r\n\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n\r\n//                         title={`View Projects for ${account.accountName}`}\r\n\r\n//                       >\r\n\r\n//                         üîç\r\n\r\n//                       </button>\r\n\r\n//                     </td>\r\n\r\n//                   </tr>\r\n\r\n//                 ))\r\n\r\n//               ) : (\r\n\r\n//                 <tr>\r\n\r\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\r\n\r\n//                     No account data found for the selected period.\r\n\r\n//                   </td>\r\n\r\n//                 </tr>\r\n\r\n//               )}\r\n\r\n//             </tbody>\r\n\r\n//           </table>\r\n\r\n//         </div>\r\n\r\n//       </div>\r\n\r\n//     </div>\r\n\r\n//   );\r\n\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n// // Import your commonData.json\r\n// import commonData from '../../data/commonData.json';\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State to store fetched account data\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   // State for loading indicator\r\n//   const [loading, setLoading] = useState(true);\r\n//   // State for error messages\r\n//   const [error, setError] = useState(null);\r\n//   // States to keep track of the month and year for which data was last fetched\r\n//   // This helps in preventing unnecessary re-fetches and retaining context\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Destructure your currency settings from commonData.json\r\n//   const {\r\n//     locale,\r\n//     currency,\r\n//     minimumFractionDigits,\r\n//     maximumFractionDigits\r\n//   } = commonData.currencySettings;\r\n\r\n//   // Utility to format any number to your centralized currency format\r\n//   const formatCurrency = (value = 0) =>\r\n//     value.toLocaleString(locale, {\r\n//       style: 'currency',\r\n//       currency,\r\n//       minimumFractionDigits,\r\n//       maximumFractionDigits\r\n//     });\r\n\r\n\r\n//   // Set font family on component mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Effect to handle month/year state and fetch data\r\n//   useEffect(() => {\r\n//     const fetchAccountData = async (month, year) => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       // Construct the request body as expected by your backend\r\n//       const requestBody = {\r\n//         month: month,\r\n//         year: year\r\n//       };\r\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\r\n//       try {\r\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\r\n//           },\r\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\r\n//         });\r\n//         if (!response.ok) {\r\n//           const errorText = await response.text(); // Get detailed error message from backend\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n//         }\r\n//         const data = await response.json();\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching account data:\", err);\r\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n//     // Logic to determine month and year for fetching\r\n//     let monthToUse = location.state?.month;\r\n//     let yearToUse = location.state?.year;\r\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\r\n//     if (!monthToUse || !yearToUse) {\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n//       if (storedMonth && storedYear) {\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n//         yearToUse = parseInt(storedYear, 10);\r\n//       }\r\n//     }\r\n//     // If we have valid month/year, set active states and fetch data if needed\r\n//     if (monthToUse && yearToUse) {\r\n//       // Only fetch if the active month/year has changed or if accounts are empty\r\n//       // This prevents re-fetching when simply navigating back to the same view\r\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n//         setActiveMonth(monthToUse);\r\n//         setActiveYear(yearToUse);\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n//         fetchAccountData(monthToUse, yearToUse);\r\n//       } else {\r\n//         // Data is already present for the active month/year, no need to fetch\r\n//         setLoading(false);\r\n//       }\r\n//     } else {\r\n//       // No month/year found in state or session, show error\r\n//       setError(\"Missing month or year. Please go back and select a date.\");\r\n//       setLoading(false);\r\n//     }\r\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\r\n\r\n//   // Define breadcrumb path for Account Level\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   // Render loading state\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\r\n//         </div>\r\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // Render error state\r\n//   if (error) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n//           Go to Upload Page\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//             <thead\r\n//               className=\"text-white\"\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//             >\r\n//               <tr>\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n//                 <th className=\"px-3 py-2\">Total Projects</th>\r\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {accounts.length > 0 ? (\r\n//                 accounts.map((account) => (\r\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\r\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\r\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n//                     {/* Apply the formatCurrency function here */}\r\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n//                       <button\r\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\r\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n//                           state: {\r\n//                             accountId: account.accountId, // Pass accountId explicitly\r\n//                             month: activeMonth, // Pass the active month\r\n//                             year: activeYear, // Pass the active year\r\n//                             accountName: account.accountName // Also pass account name for breadcrumbs in ProjectLevel\r\n//                           }\r\n//                         })}\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                         title={`View Projects for ${account.accountName}`}\r\n//                       >\r\n//                         üîç\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\r\n//                     No account data found for the selected period.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs';\r\n// import commonData from '../../data/commonData.json';\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   const {\r\n//     locale,\r\n//     currency,\r\n//     minimumFractionDigits,\r\n//     maximumFractionDigits\r\n//   } = commonData.currencySettings;\r\n\r\n//   const formatCurrency = (value = 0) =>\r\n//     value.toLocaleString(locale, {\r\n//       style: 'currency',\r\n//       currency,\r\n//       minimumFractionDigits,\r\n//       maximumFractionDigits\r\n//     });\r\n\r\n//   // Placeholder function for Download Data\r\n//   const handleDownloadData = () => {\r\n//     alert('Download Data button clicked! (Logic not yet implemented)');\r\n//     // Your actual CSV generation and download logic will go here later.\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const fetchAccountData = async (month, year) => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       const requestBody = {\r\n//         month: month,\r\n//         year: year\r\n//       };\r\n//       console.log(\"Fetching account data with request body (POST):\", requestBody);\r\n//       try {\r\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//           body: JSON.stringify(requestBody),\r\n//         });\r\n//         if (!response.ok) {\r\n//           const errorText = await response.text();\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n//         }\r\n//         const data = await response.json();\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching account data:\", err);\r\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     let monthToUse = location.state?.month;\r\n//     let yearToUse = location.state?.year;\r\n\r\n//     if (!monthToUse || !yearToUse) {\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n//       if (storedMonth && storedYear) {\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n//         yearToUse = parseInt(storedYear, 10);\r\n//       }\r\n//     }\r\n\r\n//     if (monthToUse && yearToUse) {\r\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n//         setActiveMonth(monthToUse);\r\n//         setActiveYear(yearToUse);\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n//         fetchAccountData(monthToUse, yearToUse);\r\n//       } else {\r\n//         setLoading(false);\r\n//       }\r\n//     } else {\r\n//       setError(\"Missing month or year. Please go back and select a date.\");\r\n//       setLoading(false);\r\n//     }\r\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\r\n\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\r\n//         </div>\r\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (error) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n//           Go to Upload Page\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n//           <h2 className=\"mb-0 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n//           {/* Only the Download Data button is here now */}\r\n//           {accounts.length > 0 && ( // Conditionally render if there's data\r\n//             <div className=\"d-flex gap-2\">\r\n//               <button\r\n//                 className=\"btn btn-outline-success rounded-pill px-3\"\r\n//                 onClick={handleDownloadData}\r\n//                 title=\"Download Account Data\"\r\n//               >\r\n//                 <i className=\"bi bi-download me-2\"></i> Download Data\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//             <thead\r\n//               className=\"text-white\"\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//             >\r\n//               <tr>\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n//                 <th className=\"px-3 py-2\">Total Projects</th>\r\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {accounts.length > 0 ? (\r\n//                 accounts.map((account) => (\r\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\r\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\r\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n//                       <button\r\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n//                           state: {\r\n//                             accountId: account.accountId,\r\n//                             month: activeMonth,\r\n//                             year: activeYear,\r\n//                             accountName: account.accountName\r\n//                           }\r\n//                         })}\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                         title={`View Projects for ${account.accountName}`}\r\n//                       >\r\n//                         üîç\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\r\n//                     No account data found for the selected period.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport Breadcrumbs from '../Breadcrumbs';\r\nimport commonData from '../../data/commonData.json';\r\n\r\nconst AccountLevel = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n\r\n  // State for managing the comment modal\r\n  const [showCommentModal, setShowCommentModal] = useState(false);\r\n  const [currentComment, setCurrentComment] = useState('');\r\n  const [currentAccountIdForComment, setCurrentAccountIdForComment] = useState(null);\r\n\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  const {\r\n    locale,\r\n    currency,\r\n    minimumFractionDigits,\r\n    maximumFractionDigits\r\n  } = commonData.currencySettings;\r\n\r\n  const formatCurrency = (value = 0) =>\r\n    value.toLocaleString(locale, {\r\n      style: 'currency',\r\n      currency,\r\n      minimumFractionDigits,\r\n      maximumFractionDigits\r\n    });\r\n\r\n  // Placeholder function for Download Data\r\n  const handleDownloadData = () => {\r\n    alert('Download Data button clicked! (Logic not yet implemented)');\r\n    // Your actual CSV generation and download logic will go here later.\r\n  };\r\n\r\n  // Function to open the comment modal\r\n  const handleOpenCommentModal = (accountId, existingComment) => {\r\n    setCurrentAccountIdForComment(accountId);\r\n    setCurrentComment(existingComment);\r\n    setShowCommentModal(true);\r\n  };\r\n\r\n  // Function to close the comment modal\r\n  const handleCloseCommentModal = () => {\r\n    setShowCommentModal(false);\r\n    setCurrentComment('');\r\n    setCurrentAccountIdForComment(null);\r\n  };\r\n\r\n  // Function to save the comment (placeholder logic)\r\n  const handleSaveComment = () => {\r\n    // In a real application, you would send currentComment and currentAccountIdForComment\r\n    // to your backend via an API call here.\r\n    console.log(\r\n      `Saving comment for Account ID ${currentAccountIdForComment}: \"${currentComment}\"`\r\n    );\r\n    alert(`Comment saved for Account ID ${currentAccountIdForComment}.`);\r\n    // Optimistically update the local state if needed, or refetch data\r\n    setAccounts(prevAccounts =>\r\n      prevAccounts.map(account =>\r\n        account.accountId === currentAccountIdForComment\r\n          ? { ...account, comments: currentComment } // Assuming a 'comments' field exists or is added\r\n          : account\r\n      )\r\n    );\r\n    handleCloseCommentModal();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchAccountData = async (month, year) => {\r\n      setLoading(true);\r\n      setError(null);\r\n      const requestBody = {\r\n        month: month,\r\n        year: year\r\n      };\r\n      console.log(\"Fetching account data with request body (POST):\", requestBody);\r\n      try {\r\n        const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(requestBody),\r\n        });\r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n        }\r\n        const data = await response.json();\r\n        // Assuming your backend might return a 'forecastRevenue' and 'comments' field,\r\n        // otherwise, initialize them here.\r\n        setAccounts(Array.isArray(data) ? data.map(acc => ({\r\n          ...acc,\r\n          forecastRevenue: acc.forecastRevenue || 0, // Default to 0 if not provided\r\n          comments: acc.comments || '' // Default to empty string if not provided\r\n        })) : [data].filter(Boolean).map(acc => ({\r\n          ...acc,\r\n          forecastRevenue: acc.forecastRevenue || 0,\r\n          comments: acc.comments || ''\r\n        })));\r\n      } catch (err) {\r\n        console.error(\"Error fetching account data:\", err);\r\n        setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    let monthToUse = location.state?.month;\r\n    let yearToUse = location.state?.year;\r\n\r\n    if (!monthToUse || !yearToUse) {\r\n      const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n      const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n      if (storedMonth && storedYear) {\r\n        monthToUse = parseInt(storedMonth, 10);\r\n        yearToUse = parseInt(storedYear, 10);\r\n      }\r\n    }\r\n\r\n    if (monthToUse && yearToUse) {\r\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n        sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n        fetchAccountData(monthToUse, yearToUse);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setError(\"Missing month or year. Please go back and select a date.\");\r\n      setLoading(false);\r\n    }\r\n  }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\r\n\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' },\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n    { name: 'Account Level', page: 'accounts' }\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\">\r\n          <span className=\"visually-hidden\">Loading Account Data...</span>\r\n        </div>\r\n        <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n          Go to Upload Page\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n      >\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n          <h2 className=\"mb-0 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n          {accounts.length > 0 && (\r\n            <div className=\"d-flex gap-2\">\r\n              <button\r\n                className=\"btn btn-outline-success rounded-pill px-3\"\r\n                onClick={handleDownloadData}\r\n                title=\"Download Account Data\"\r\n              >\r\n                <i className=\"bi bi-download me-2\"></i> Download Data\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"table-responsive rounded\">\r\n          <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n            <thead\r\n              className=\"text-white\"\r\n              style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n            >\r\n              <tr>\r\n                <th className=\"px-3 py-2\">Account ID</th>\r\n                <th className=\"px-3 py-2\">Account Name</th>\r\n                <th className=\"px-3 py-2\">Total Projects</th>\r\n                <th className=\"px-3 py-2\">Total Revenue</th>\r\n                <th className=\"px-3 py-2\">Forecast Revenue</th> {/* New Column */}\r\n                <th className=\"px-3 py-2\">Comments</th> {/* New Column */}\r\n                <th className=\"px-3 py-2 text-center\">View</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {accounts.length > 0 ? (\r\n                accounts.map((account) => (\r\n                  <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n                    <td className=\"px-3 py-2\">{account.accountId}</td>\r\n                    <td className=\"px-3 py-2\">{account.accountName}</td>\r\n                    <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n                    <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\r\n                    <td className=\"px-3 py-2\">{formatCurrency(account.forecastRevenue)}</td> {/* Data for new column */}\r\n                    <td className=\"px-3 py-2\">\r\n                      <button\r\n                        className=\"btn btn-sm btn-light p-0 border-0\"\r\n                        onClick={() => handleOpenCommentModal(account.accountId, account.comments)}\r\n                        title={account.comments ? \"View/Edit Comment\" : \"Add Comment\"}\r\n                      >\r\n                        <span style={{ fontSize: '1.2em' }}>üí¨</span>\r\n                      </button>\r\n                      {account.comments && (\r\n                        <span className=\"ms-2 badge bg-secondary\" style={{ cursor: 'pointer' }}\r\n                              onClick={() => handleOpenCommentModal(account.accountId, account.comments)}>\r\n                          {account.comments.substring(0, 15)}{account.comments.length > 15 ? '...' : ''}\r\n                        </span>\r\n                      )}\r\n                    </td>\r\n                    <td className=\"px-3 py-2 text-center\">\r\n                      <button\r\n                        onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n                          state: {\r\n                            accountId: account.accountId,\r\n                            month: activeMonth,\r\n                            year: activeYear,\r\n                            accountName: account.accountName\r\n                          }\r\n                        })}\r\n                        className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n                        title={`View Projects for ${account.accountName}`}\r\n                      >\r\n                        üîç\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan=\"7\" className=\"text-center text-muted py-4\"> {/* Increased colspan */}\r\n                    No account data found for the selected period.\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Comment Modal */}\r\n      {showCommentModal && (\r\n        <div\r\n          className=\"modal fade show\"\r\n          style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)' }}\r\n          tabIndex=\"-1\"\r\n          aria-labelledby=\"commentModalLabel\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          <div className=\"modal-dialog modal-dialog-centered\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"commentModalLabel\">\r\n                  Comments for Account ID: {currentAccountIdForComment}\r\n                </h5>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn-close\"\r\n                  aria-label=\"Close\"\r\n                  onClick={handleCloseCommentModal}\r\n                ></button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <textarea\r\n                  className=\"form-control\"\r\n                  rows=\"5\"\r\n                  value={currentComment}\r\n                  onChange={(e) => setCurrentComment(e.target.value)}\r\n                  placeholder=\"Enter your comments here...\"\r\n                ></textarea>\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  onClick={handleCloseCommentModal}\r\n                >\r\n                  Close\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  onClick={handleSaveComment}\r\n                >\r\n                  Save Changes\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountLevel;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}