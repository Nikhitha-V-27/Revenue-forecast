{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\AccountLevel.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\n// import accountData from '../../data/accountData.json'; // CORRECTED PATH: data is two levels up\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n\n//   // Set font family on component mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Define breadcrumb path for Account Level\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n//             <thead\n//               className=\"text-white\"\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//             >\n//               <tr>\n//                 <th className=\"px-3 py-2\">Account ID</th>\n//                 <th className=\"px-3 py-2\">Account Name</th>\n//                 <th className=\"px-3 py-2\">Actual Revenue</th>\n//                 <th className=\"px-3 py-2\">Forecast Revenue</th>\n//                 <th className=\"px-3 py-2\">Forecast vs Actual Revenue</th>\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {accountData.accounts.map((account) => {\n//                 const variance = account.actualRevenue - account.forecastRevenue;\n//                 return (\n//                   <tr key={account.id} style={{ backgroundColor: '#fdfdfd' }}>\n//                     <td className=\"px-3 py-2\">{account.id}</td>\n//                     <td className=\"px-3 py-2\">{account.name}</td>\n//                     <td className=\"px-3 py-2\">${account.actualRevenue.toLocaleString()}</td>\n//                     <td className=\"px-3 py-2\">${account.forecastRevenue.toLocaleString()}</td>\n//                     <td\n//                       className={`px-3 py-2 fw-semibold ${\n//                         variance > 0 ? 'text-success' : variance < 0 ? 'text-danger' : 'text-muted'\n//                       }`}\n//                     >\n//                       ${variance.toLocaleString()}\n//                     </td>\n//                     <td className=\"px-3 py-2 text-center\">\n//                       <button\n//                         onClick={() => navigate(`/accounts/${account.id}/projects`)} // Navigate to projects for this account\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                         title={`View Projects for ${account.name}`}\n//                       >\n//                         üîç\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\n//after demo after discussion for adding datatables.net\n\n// import React, { useEffect, useState } from 'react';\n\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\n\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n\n// const AccountLevel = () => {\n\n//   const navigate = useNavigate();\n\n//   const location = useLocation(); // Hook to access location state\n\n//   // State to store fetched account data\n\n//   const [accounts, setAccounts] = useState([]);\n\n//   // State for loading indicator\n\n//   const [loading, setLoading] = useState(true);\n\n//   // State for error messages\n\n//   const [error, setError] = useState(null);\n\n//   // States to keep track of the month and year for which data was last fetched\n\n//   // This helps in preventing unnecessary re-fetches and retaining context\n\n//   const [activeMonth, setActiveMonth] = useState(null);\n\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Set font family on component mount\n\n//   useEffect(() => {\n\n//     const link = document.createElement('link');\n\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n\n//     link.rel = 'stylesheet';\n\n//     document.head.appendChild(link);\n\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n\n//   }, []);\n\n//   // Effect to handle month/year state and fetch data\n\n//   useEffect(() => {\n\n//     const fetchAccountData = async (month, year) => {\n\n//       setLoading(true);\n\n//       setError(null);\n\n//       // Construct the request body as expected by your backend\n\n//       const requestBody = {\n\n//         month: month,\n\n//         year: year\n\n//       };\n\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\n\n//       try {\n\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\n\n//           method: 'POST',\n\n//           headers: {\n\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\n\n//           },\n\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\n\n//         });\n\n//         if (!response.ok) {\n\n//           const errorText = await response.text(); // Get detailed error message from backend\n\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n\n//         }\n\n//         const data = await response.json();\n\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n\n//       } catch (err) {\n\n//         console.error(\"Error fetching account data:\", err);\n\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n\n//       } finally {\n\n//         setLoading(false);\n\n//       }\n\n//     };\n\n//     // Logic to determine month and year for fetching\n\n//     let monthToUse = location.state?.month;\n\n//     let yearToUse = location.state?.year;\n\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\n\n//     if (!monthToUse || !yearToUse) {\n\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n\n//       if (storedMonth && storedYear) {\n\n//         monthToUse = parseInt(storedMonth, 10);\n\n//         yearToUse = parseInt(storedYear, 10);\n\n//       }\n\n//     }\n\n//     // If we have valid month/year, set active states and fetch data if needed\n\n//     if (monthToUse && yearToUse) {\n\n//       // Only fetch if the active month/year has changed or if accounts are empty\n\n//       // This prevents re-fetching when simply navigating back to the same view\n\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n\n//         setActiveMonth(monthToUse);\n\n//         setActiveYear(yearToUse);\n\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n\n//         fetchAccountData(monthToUse, yearToUse);\n\n//       } else {\n\n//         // Data is already present for the active month/year, no need to fetch\n\n//         setLoading(false);\n\n//       }\n\n//     } else {\n\n//       // No month/year found in state or session, show error\n\n//       setError(\"Missing month or year. Please go back and select a date.\");\n\n//       setLoading(false);\n\n//     }\n\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\n\n//   // Define breadcrumb path for Account Level\n\n//   const breadcrumbPath = [\n\n//     { name: 'PMO Dashboard', page: '' },\n\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n\n//     { name: 'Account Level', page: 'accounts' }\n\n//   ];\n\n//   // Render loading state\n\n//   if (loading) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\n\n//         </div>\n\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   // Render error state\n\n//   if (error) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n\n//         <p className=\"fs-4\">Error: {error}</p>\n\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\n\n//           Go to Upload Page\n\n//         </button>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   return (\n\n//     <div\n\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n\n//       style={{\n\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n\n//         fontFamily: \"'Poppins', sans-serif\"\n\n//       }}\n\n//     >\n\n//       <div\n\n//         className=\"card shadow p-4 p-md-5 w-100\"\n\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n\n//       >\n\n//         <Breadcrumbs path={breadcrumbPath} />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n\n//         <div className=\"table-responsive rounded\">\n\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n\n//             <thead\n\n//               className=\"text-white\"\n\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n\n//             >\n\n//               <tr>\n\n//                 <th className=\"px-3 py-2\">Account ID</th>\n\n//                 <th className=\"px-3 py-2\">Account Name</th>\n\n//                 <th className=\"px-3 py-2\">Total Projects</th>\n\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\n\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n\n//               </tr>\n\n//             </thead>\n\n//             <tbody>\n\n//               {accounts.length > 0 ? (\n\n//                 accounts.map((account) => (\n\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\n\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\n\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\n\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\n\n//                     <td className=\"px-3 py-2\">${account.totalRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n\n//                     <td className=\"px-3 py-2 text-center\">\n\n//                       <button\n\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\n\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\n\n//                           state: {\n\n//                             accountId: account.accountId, // Pass accountId explicitly\n\n//                             month: activeMonth, // Pass the active month\n\n//                             year: activeYear // Pass the active year\n\n//                           }\n\n//                         })}\n\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n\n//                         title={`View Projects for ${account.accountName}`}\n\n//                       >\n\n//                         üîç\n\n//                       </button>\n\n//                     </td>\n\n//                   </tr>\n\n//                 ))\n\n//               ) : (\n\n//                 <tr>\n\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\n\n//                     No account data found for the selected period.\n\n//                   </td>\n\n//                 </tr>\n\n//               )}\n\n//             </tbody>\n\n//           </table>\n\n//         </div>\n\n//       </div>\n\n//     </div>\n\n//   );\n\n// };\n\n// export default AccountLevel;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n// // Import your commonData.json\n// import commonData from '../../data/commonData.json';\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation(); // Hook to access location state\n\n//   // State to store fetched account data\n//   const [accounts, setAccounts] = useState([]);\n//   // State for loading indicator\n//   const [loading, setLoading] = useState(true);\n//   // State for error messages\n//   const [error, setError] = useState(null);\n//   // States to keep track of the month and year for which data was last fetched\n//   // This helps in preventing unnecessary re-fetches and retaining context\n//   const [activeMonth, setActiveMonth] = useState(null);\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Destructure your currency settings from commonData.json\n//   const {\n//     locale,\n//     currency,\n//     minimumFractionDigits,\n//     maximumFractionDigits\n//   } = commonData.currencySettings;\n\n//   // Utility to format any number to your centralized currency format\n//   const formatCurrency = (value = 0) =>\n//     value.toLocaleString(locale, {\n//       style: 'currency',\n//       currency,\n//       minimumFractionDigits,\n//       maximumFractionDigits\n//     });\n\n//   // Set font family on component mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Effect to handle month/year state and fetch data\n//   useEffect(() => {\n//     const fetchAccountData = async (month, year) => {\n//       setLoading(true);\n//       setError(null);\n//       // Construct the request body as expected by your backend\n//       const requestBody = {\n//         month: month,\n//         year: year\n//       };\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\n//       try {\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\n//           },\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\n//         });\n//         if (!response.ok) {\n//           const errorText = await response.text(); // Get detailed error message from backend\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n//         }\n//         const data = await response.json();\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n//       } catch (err) {\n//         console.error(\"Error fetching account data:\", err);\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     // Logic to determine month and year for fetching\n//     let monthToUse = location.state?.month;\n//     let yearToUse = location.state?.year;\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\n//     if (!monthToUse || !yearToUse) {\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n//       if (storedMonth && storedYear) {\n//         monthToUse = parseInt(storedMonth, 10);\n//         yearToUse = parseInt(storedYear, 10);\n//       }\n//     }\n//     // If we have valid month/year, set active states and fetch data if needed\n//     if (monthToUse && yearToUse) {\n//       // Only fetch if the active month/year has changed or if accounts are empty\n//       // This prevents re-fetching when simply navigating back to the same view\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n//         setActiveMonth(monthToUse);\n//         setActiveYear(yearToUse);\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n//         fetchAccountData(monthToUse, yearToUse);\n//       } else {\n//         // Data is already present for the active month/year, no need to fetch\n//         setLoading(false);\n//       }\n//     } else {\n//       // No month/year found in state or session, show error\n//       setError(\"Missing month or year. Please go back and select a date.\");\n//       setLoading(false);\n//     }\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\n\n//   // Define breadcrumb path for Account Level\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   // Render loading state\n//   if (loading) {\n//     return (\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\n//         </div>\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n//       </div>\n//     );\n//   }\n\n//   // Render error state\n//   if (error) {\n//     return (\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n//         <p className=\"fs-4\">Error: {error}</p>\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\n//           Go to Upload Page\n//         </button>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n//             <thead\n//               className=\"text-white\"\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//             >\n//               <tr>\n//                 <th className=\"px-3 py-2\">Account ID</th>\n//                 <th className=\"px-3 py-2\">Account Name</th>\n//                 <th className=\"px-3 py-2\">Total Projects</th>\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {accounts.length > 0 ? (\n//                 accounts.map((account) => (\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\n//                     {/* Apply the formatCurrency function here */}\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\n//                     <td className=\"px-3 py-2 text-center\">\n//                       <button\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\n//                           state: {\n//                             accountId: account.accountId, // Pass accountId explicitly\n//                             month: activeMonth, // Pass the active month\n//                             year: activeYear, // Pass the active year\n//                             accountName: account.accountName // Also pass account name for breadcrumbs in ProjectLevel\n//                           }\n//                         })}\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                         title={`View Projects for ${account.accountName}`}\n//                       >\n//                         üîç\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 ))\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\n//                     No account data found for the selected period.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs';\n// import commonData from '../../data/commonData.json';\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   const [accounts, setAccounts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [activeMonth, setActiveMonth] = useState(null);\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   const {\n//     locale,\n//     currency,\n//     minimumFractionDigits,\n//     maximumFractionDigits\n//   } = commonData.currencySettings;\n\n//   const formatCurrency = (value = 0) =>\n//     value.toLocaleString(locale, {\n//       style: 'currency',\n//       currency,\n//       minimumFractionDigits,\n//       maximumFractionDigits\n//     });\n\n//   // Placeholder function for Download Data\n//   const handleDownloadData = () => {\n//     alert('Download Data button clicked! (Logic not yet implemented)');\n//     // Your actual CSV generation and download logic will go here later.\n//   };\n\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchAccountData = async (month, year) => {\n//       setLoading(true);\n//       setError(null);\n//       const requestBody = {\n//         month: month,\n//         year: year\n//       };\n//       console.log(\"Fetching account data with request body (POST):\", requestBody);\n//       try {\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify(requestBody),\n//         });\n//         if (!response.ok) {\n//           const errorText = await response.text();\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n//         }\n//         const data = await response.json();\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n//       } catch (err) {\n//         console.error(\"Error fetching account data:\", err);\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     let monthToUse = location.state?.month;\n//     let yearToUse = location.state?.year;\n\n//     if (!monthToUse || !yearToUse) {\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n//       if (storedMonth && storedYear) {\n//         monthToUse = parseInt(storedMonth, 10);\n//         yearToUse = parseInt(storedYear, 10);\n//       }\n//     }\n\n//     if (monthToUse && yearToUse) {\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n//         setActiveMonth(monthToUse);\n//         setActiveYear(yearToUse);\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n//         fetchAccountData(monthToUse, yearToUse);\n//       } else {\n//         setLoading(false);\n//       }\n//     } else {\n//       setError(\"Missing month or year. Please go back and select a date.\");\n//       setLoading(false);\n//     }\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\n\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   if (loading) {\n//     return (\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\n//         </div>\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n//         <p className=\"fs-4\">Error: {error}</p>\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\n//           Go to Upload Page\n//         </button>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\n//           <h2 className=\"mb-0 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n//           {/* Only the Download Data button is here now */}\n//           {accounts.length > 0 && ( // Conditionally render if there's data\n//             <div className=\"d-flex gap-2\">\n//               <button\n//                 className=\"btn btn-outline-success rounded-pill px-3\"\n//                 onClick={handleDownloadData}\n//                 title=\"Download Account Data\"\n//               >\n//                 <i className=\"bi bi-download me-2\"></i> Download Data\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n//             <thead\n//               className=\"text-white\"\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//             >\n//               <tr>\n//                 <th className=\"px-3 py-2\">Account ID</th>\n//                 <th className=\"px-3 py-2\">Account Name</th>\n//                 <th className=\"px-3 py-2\">Total Projects</th>\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {accounts.length > 0 ? (\n//                 accounts.map((account) => (\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\n//                     <td className=\"px-3 py-2 text-center\">\n//                       <button\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\n//                           state: {\n//                             accountId: account.accountId,\n//                             month: activeMonth,\n//                             year: activeYear,\n//                             accountName: account.accountName\n//                           }\n//                         })}\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                         title={`View Projects for ${account.accountName}`}\n//                       >\n//                         üîç\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 ))\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\n//                     No account data found for the selected period.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport Breadcrumbs from '../Breadcrumbs';\nimport commonData from '../../data/commonData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [accounts, setAccounts] = useState([]);\n  const [commentsMap, setCommentsMap] = useState({});\n  const [modalVisible, setModalVisible] = useState(false);\n  const [currentAccountId, setCurrentAccountId] = useState(null);\n  const [commentInput, setCommentInput] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Destructure currency settings from commonData.json\n  const {\n    locale,\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  } = commonData.currencySettings;\n\n  // Centralized currency formatter\n  const formatCurrency = (value = 0) => value.toLocaleString(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  });\n\n  // Load Poppins font on mount\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Fetch account data when month/year change\n  useEffect(() => {\n    var _location$state, _location$state2;\n    const fetchAccountData = async (month, year) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const resp = await fetch(`${BACKEND_URL}/api/account`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            month,\n            year\n          })\n        });\n        if (!resp.ok) {\n          const msg = await resp.text();\n          throw new Error(`status: ${resp.status}, message: ${msg || resp.statusText}`);\n        }\n        const data = await resp.json();\n        setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n      } catch (e) {\n        console.error(e);\n        setError(`Failed to load account data: ${e.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    let monthToUse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let yearToUse = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    if (!monthToUse || !yearToUse) {\n      const m = sessionStorage.getItem('lastFetchedAccountMonth');\n      const y = sessionStorage.getItem('lastFetchedAccountYear');\n      if (m && y) {\n        monthToUse = parseInt(m, 10);\n        yearToUse = parseInt(y, 10);\n      }\n    }\n    if (monthToUse && yearToUse) {\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n        sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n        fetchAccountData(monthToUse, yearToUse);\n      } else {\n        setLoading(false);\n      }\n    } else {\n      setError('Missing month or year. Please go back and select a date.');\n      setLoading(false);\n    }\n  }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  }, {\n    name: 'Account Level',\n    page: 'accounts'\n  }];\n  const openCommentModal = accountId => {\n    setCurrentAccountId(accountId);\n    setCommentInput(commentsMap[accountId] || '');\n    setModalVisible(true);\n  };\n  const saveComment = () => {\n    setCommentsMap(prev => ({\n      ...prev,\n      [currentAccountId]: commentInput\n    }));\n    setModalVisible(false);\n  };\n  const closeModal = () => {\n    setModalVisible(false);\n    setCommentInput('');\n    setCurrentAccountId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '1100px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4 fw-semibold text-dark\",\n        children: \"\\uD83C\\uDFE2 Account Level Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1057,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner-border text-primary\",\n          role: \"status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1063,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ms-3 text-primary\",\n          children: \"Loading Account Data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1064,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1062,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column justify-content-center align-items-center text-danger\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-4\",\n          children: [\"Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1068,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mt-3\",\n          onClick: () => navigate('/upload'),\n          children: \"Go to Upload Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-hover align-middle table-borderless mb-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #1d4ed8, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Account ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1081,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Account Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1082,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Total Projects\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1083,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Total Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1084,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Forecast Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1085,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Revenue Difference\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1086,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2 text-center\",\n                children: \"Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1087,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2 text-center\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1088,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1080,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1076,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: accounts.length > 0 ? accounts.map(account => {\n              const actual = account.totalRevenue || 0;\n              const forecast = 0;\n              const difference = 0;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                style: {\n                  backgroundColor: '#fdfdfd'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: account.accountId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1098,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: account.accountName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1099,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: account.totalProjects\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1100,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: formatCurrency(actual)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1101,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: formatCurrency(forecast)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1102,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: formatCurrency(difference)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1103,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2 text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-sm btn-outline-secondary\",\n                    onClick: () => openCommentModal(account.accountId),\n                    title: \"Add/Edit comment\",\n                    children: \"\\uD83D\\uDCAC\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1105,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1104,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2 text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-sm btn-outline-primary rounded-circle\",\n                    onClick: () => navigate(`/accounts/${account.accountId}/projects`, {\n                      state: {\n                        accountId: account.accountId,\n                        month: activeMonth,\n                        year: activeYear\n                      }\n                    }),\n                    title: `View Projects for ${account.accountName}`,\n                    children: \"\\uD83D\\uDD0D\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1114,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1113,\n                  columnNumber: 23\n                }, this)]\n              }, account.accountId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1097,\n                columnNumber: 21\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"8\",\n                className: \"text-center text-muted py-4\",\n                children: \"No account data found for the selected period.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1131,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1130,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1091,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1075,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1048,\n      columnNumber: 7\n    }, this), modalVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal fade show d-block\",\n      style: {\n        backgroundColor: '#00000066'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog modal-dialog-centered\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              children: \"\\uD83D\\uDCAC Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn-close\",\n              onClick: closeModal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1148,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              rows: \"4\",\n              placeholder: \"Enter your comment here...\",\n              value: commentInput,\n              onChange: e => setCommentInput(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1151,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1150,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-secondary\",\n              onClick: closeModal,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1160,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              onClick: saveComment,\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1163,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1159,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1145,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1144,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1143,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1041,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountLevel, \"ecmbZVgzO0re8iJjVPPQA5vBKDw=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AccountLevel;\nexport default AccountLevel;\nvar _c;\n$RefreshReg$(_c, \"AccountLevel\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","Breadcrumbs","commonData","jsxDEV","_jsxDEV","AccountLevel","_s","navigate","location","accounts","setAccounts","commentsMap","setCommentsMap","modalVisible","setModalVisible","currentAccountId","setCurrentAccountId","commentInput","setCommentInput","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","BACKEND_URL","locale","currency","minimumFractionDigits","maximumFractionDigits","currencySettings","formatCurrency","value","toLocaleString","style","link","document","createElement","href","rel","head","appendChild","body","fontFamily","_location$state","_location$state2","fetchAccountData","month","year","resp","fetch","method","headers","JSON","stringify","ok","msg","text","Error","status","statusText","data","json","Array","isArray","filter","Boolean","e","console","message","monthToUse","state","yearToUse","m","sessionStorage","getItem","y","parseInt","length","setItem","toString","breadcrumbPath","name","page","openCommentModal","accountId","saveComment","prev","closeModal","className","background","children","maxWidth","backgroundColor","borderRadius","path","fileName","_jsxFileName","lineNumber","columnNumber","role","onClick","map","account","actual","totalRevenue","forecast","difference","accountName","totalProjects","title","colSpan","type","rows","placeholder","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/AccountLevel.js"],"sourcesContent":["// import React, { useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\r\n// import accountData from '../../data/accountData.json'; // CORRECTED PATH: data is two levels up\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n\r\n//   // Set font family on component mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Define breadcrumb path for Account Level\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//             <thead\r\n//               className=\"text-white\"\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//             >\r\n//               <tr>\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n//                 <th className=\"px-3 py-2\">Actual Revenue</th>\r\n//                 <th className=\"px-3 py-2\">Forecast Revenue</th>\r\n//                 <th className=\"px-3 py-2\">Forecast vs Actual Revenue</th>\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {accountData.accounts.map((account) => {\r\n//                 const variance = account.actualRevenue - account.forecastRevenue;\r\n//                 return (\r\n//                   <tr key={account.id} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                     <td className=\"px-3 py-2\">{account.id}</td>\r\n//                     <td className=\"px-3 py-2\">{account.name}</td>\r\n//                     <td className=\"px-3 py-2\">${account.actualRevenue.toLocaleString()}</td>\r\n//                     <td className=\"px-3 py-2\">${account.forecastRevenue.toLocaleString()}</td>\r\n//                     <td\r\n//                       className={`px-3 py-2 fw-semibold ${\r\n//                         variance > 0 ? 'text-success' : variance < 0 ? 'text-danger' : 'text-muted'\r\n//                       }`}\r\n//                     >\r\n//                       ${variance.toLocaleString()}\r\n//                     </td>\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n//                       <button\r\n//                         onClick={() => navigate(`/accounts/${account.id}/projects`)} // Navigate to projects for this account\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                         title={`View Projects for ${account.name}`}\r\n//                       >\r\n//                         üîç\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 );\r\n//               })}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n//after demo after discussion for adding datatables.net\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\r\n\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\n// const AccountLevel = () => {\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State to store fetched account data\r\n\r\n//   const [accounts, setAccounts] = useState([]);\r\n\r\n//   // State for loading indicator\r\n\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // State for error messages\r\n\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // States to keep track of the month and year for which data was last fetched\r\n\r\n//   // This helps in preventing unnecessary re-fetches and retaining context\r\n\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Set font family on component mount\r\n\r\n//   useEffect(() => {\r\n\r\n//     const link = document.createElement('link');\r\n\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n\r\n//     link.rel = 'stylesheet';\r\n\r\n//     document.head.appendChild(link);\r\n\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n//   }, []);\r\n\r\n//   // Effect to handle month/year state and fetch data\r\n\r\n//   useEffect(() => {\r\n\r\n//     const fetchAccountData = async (month, year) => {\r\n\r\n//       setLoading(true);\r\n\r\n//       setError(null);\r\n\r\n//       // Construct the request body as expected by your backend\r\n\r\n//       const requestBody = {\r\n\r\n//         month: month,\r\n\r\n//         year: year\r\n\r\n//       };\r\n\r\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\r\n\r\n//       try {\r\n\r\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n\r\n//           method: 'POST',\r\n\r\n//           headers: {\r\n\r\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\r\n\r\n//           },\r\n\r\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\r\n\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n\r\n//           const errorText = await response.text(); // Get detailed error message from backend\r\n\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n\r\n//         }\r\n\r\n//         const data = await response.json();\r\n\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n\r\n//       } catch (err) {\r\n\r\n//         console.error(\"Error fetching account data:\", err);\r\n\r\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n\r\n//       } finally {\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     };\r\n\r\n//     // Logic to determine month and year for fetching\r\n\r\n//     let monthToUse = location.state?.month;\r\n\r\n//     let yearToUse = location.state?.year;\r\n\r\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\r\n\r\n//     if (!monthToUse || !yearToUse) {\r\n\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n\r\n//       if (storedMonth && storedYear) {\r\n\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n\r\n//         yearToUse = parseInt(storedYear, 10);\r\n\r\n//       }\r\n\r\n//     }\r\n\r\n//     // If we have valid month/year, set active states and fetch data if needed\r\n\r\n//     if (monthToUse && yearToUse) {\r\n\r\n//       // Only fetch if the active month/year has changed or if accounts are empty\r\n\r\n//       // This prevents re-fetching when simply navigating back to the same view\r\n\r\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n\r\n//         setActiveMonth(monthToUse);\r\n\r\n//         setActiveYear(yearToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n\r\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n\r\n//         fetchAccountData(monthToUse, yearToUse);\r\n\r\n//       } else {\r\n\r\n//         // Data is already present for the active month/year, no need to fetch\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     } else {\r\n\r\n//       // No month/year found in state or session, show error\r\n\r\n//       setError(\"Missing month or year. Please go back and select a date.\");\r\n\r\n//       setLoading(false);\r\n\r\n//     }\r\n\r\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\r\n\r\n//   // Define breadcrumb path for Account Level\r\n\r\n//   const breadcrumbPath = [\r\n\r\n//     { name: 'PMO Dashboard', page: '' },\r\n\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n\r\n//     { name: 'Account Level', page: 'accounts' }\r\n\r\n//   ];\r\n\r\n//   // Render loading state\r\n\r\n//   if (loading) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n\r\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\r\n\r\n//         </div>\r\n\r\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   // Render error state\r\n\r\n//   if (error) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n\r\n//           Go to Upload Page\r\n\r\n//         </button>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   return (\r\n\r\n//     <div\r\n\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n\r\n//       style={{\r\n\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n\r\n//       }}\r\n\r\n//     >\r\n\r\n//       <div\r\n\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n\r\n//       >\r\n\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n\r\n//             <thead\r\n\r\n//               className=\"text-white\"\r\n\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n\r\n//             >\r\n\r\n//               <tr>\r\n\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Total Projects</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\r\n\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n\r\n//               </tr>\r\n\r\n//             </thead>\r\n\r\n//             <tbody>\r\n\r\n//               {accounts.length > 0 ? (\r\n\r\n//                 accounts.map((account) => (\r\n\r\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">${account.totalRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n\r\n//                       <button\r\n\r\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\r\n\r\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n\r\n//                           state: {\r\n\r\n//                             accountId: account.accountId, // Pass accountId explicitly\r\n\r\n//                             month: activeMonth, // Pass the active month\r\n\r\n//                             year: activeYear // Pass the active year\r\n\r\n//                           }\r\n\r\n//                         })}\r\n\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n\r\n//                         title={`View Projects for ${account.accountName}`}\r\n\r\n//                       >\r\n\r\n//                         üîç\r\n\r\n//                       </button>\r\n\r\n//                     </td>\r\n\r\n//                   </tr>\r\n\r\n//                 ))\r\n\r\n//               ) : (\r\n\r\n//                 <tr>\r\n\r\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\r\n\r\n//                     No account data found for the selected period.\r\n\r\n//                   </td>\r\n\r\n//                 </tr>\r\n\r\n//               )}\r\n\r\n//             </tbody>\r\n\r\n//           </table>\r\n\r\n//         </div>\r\n\r\n//       </div>\r\n\r\n//     </div>\r\n\r\n//   );\r\n\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n// // Import your commonData.json\r\n// import commonData from '../../data/commonData.json';\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State to store fetched account data\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   // State for loading indicator\r\n//   const [loading, setLoading] = useState(true);\r\n//   // State for error messages\r\n//   const [error, setError] = useState(null);\r\n//   // States to keep track of the month and year for which data was last fetched\r\n//   // This helps in preventing unnecessary re-fetches and retaining context\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Destructure your currency settings from commonData.json\r\n//   const {\r\n//     locale,\r\n//     currency,\r\n//     minimumFractionDigits,\r\n//     maximumFractionDigits\r\n//   } = commonData.currencySettings;\r\n\r\n//   // Utility to format any number to your centralized currency format\r\n//   const formatCurrency = (value = 0) =>\r\n//     value.toLocaleString(locale, {\r\n//       style: 'currency',\r\n//       currency,\r\n//       minimumFractionDigits,\r\n//       maximumFractionDigits\r\n//     });\r\n\r\n\r\n//   // Set font family on component mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Effect to handle month/year state and fetch data\r\n//   useEffect(() => {\r\n//     const fetchAccountData = async (month, year) => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       // Construct the request body as expected by your backend\r\n//       const requestBody = {\r\n//         month: month,\r\n//         year: year\r\n//       };\r\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\r\n//       try {\r\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\r\n//           },\r\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\r\n//         });\r\n//         if (!response.ok) {\r\n//           const errorText = await response.text(); // Get detailed error message from backend\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n//         }\r\n//         const data = await response.json();\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching account data:\", err);\r\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n//     // Logic to determine month and year for fetching\r\n//     let monthToUse = location.state?.month;\r\n//     let yearToUse = location.state?.year;\r\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\r\n//     if (!monthToUse || !yearToUse) {\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n//       if (storedMonth && storedYear) {\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n//         yearToUse = parseInt(storedYear, 10);\r\n//       }\r\n//     }\r\n//     // If we have valid month/year, set active states and fetch data if needed\r\n//     if (monthToUse && yearToUse) {\r\n//       // Only fetch if the active month/year has changed or if accounts are empty\r\n//       // This prevents re-fetching when simply navigating back to the same view\r\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n//         setActiveMonth(monthToUse);\r\n//         setActiveYear(yearToUse);\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n//         fetchAccountData(monthToUse, yearToUse);\r\n//       } else {\r\n//         // Data is already present for the active month/year, no need to fetch\r\n//         setLoading(false);\r\n//       }\r\n//     } else {\r\n//       // No month/year found in state or session, show error\r\n//       setError(\"Missing month or year. Please go back and select a date.\");\r\n//       setLoading(false);\r\n//     }\r\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\r\n\r\n//   // Define breadcrumb path for Account Level\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   // Render loading state\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\r\n//         </div>\r\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // Render error state\r\n//   if (error) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n//           Go to Upload Page\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//             <thead\r\n//               className=\"text-white\"\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//             >\r\n//               <tr>\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n//                 <th className=\"px-3 py-2\">Total Projects</th>\r\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {accounts.length > 0 ? (\r\n//                 accounts.map((account) => (\r\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\r\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\r\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n//                     {/* Apply the formatCurrency function here */}\r\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n//                       <button\r\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\r\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n//                           state: {\r\n//                             accountId: account.accountId, // Pass accountId explicitly\r\n//                             month: activeMonth, // Pass the active month\r\n//                             year: activeYear, // Pass the active year\r\n//                             accountName: account.accountName // Also pass account name for breadcrumbs in ProjectLevel\r\n//                           }\r\n//                         })}\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                         title={`View Projects for ${account.accountName}`}\r\n//                       >\r\n//                         üîç\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\r\n//                     No account data found for the selected period.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs';\r\n// import commonData from '../../data/commonData.json';\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   const {\r\n//     locale,\r\n//     currency,\r\n//     minimumFractionDigits,\r\n//     maximumFractionDigits\r\n//   } = commonData.currencySettings;\r\n\r\n//   const formatCurrency = (value = 0) =>\r\n//     value.toLocaleString(locale, {\r\n//       style: 'currency',\r\n//       currency,\r\n//       minimumFractionDigits,\r\n//       maximumFractionDigits\r\n//     });\r\n\r\n//   // Placeholder function for Download Data\r\n//   const handleDownloadData = () => {\r\n//     alert('Download Data button clicked! (Logic not yet implemented)');\r\n//     // Your actual CSV generation and download logic will go here later.\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const fetchAccountData = async (month, year) => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       const requestBody = {\r\n//         month: month,\r\n//         year: year\r\n//       };\r\n//       console.log(\"Fetching account data with request body (POST):\", requestBody);\r\n//       try {\r\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//           body: JSON.stringify(requestBody),\r\n//         });\r\n//         if (!response.ok) {\r\n//           const errorText = await response.text();\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n//         }\r\n//         const data = await response.json();\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching account data:\", err);\r\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     let monthToUse = location.state?.month;\r\n//     let yearToUse = location.state?.year;\r\n\r\n//     if (!monthToUse || !yearToUse) {\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n//       if (storedMonth && storedYear) {\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n//         yearToUse = parseInt(storedYear, 10);\r\n//       }\r\n//     }\r\n\r\n//     if (monthToUse && yearToUse) {\r\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n//         setActiveMonth(monthToUse);\r\n//         setActiveYear(yearToUse);\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n//         fetchAccountData(monthToUse, yearToUse);\r\n//       } else {\r\n//         setLoading(false);\r\n//       }\r\n//     } else {\r\n//       setError(\"Missing month or year. Please go back and select a date.\");\r\n//       setLoading(false);\r\n//     }\r\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\r\n\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\r\n//         </div>\r\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (error) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n//           Go to Upload Page\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n//           <h2 className=\"mb-0 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n//           {/* Only the Download Data button is here now */}\r\n//           {accounts.length > 0 && ( // Conditionally render if there's data\r\n//             <div className=\"d-flex gap-2\">\r\n//               <button\r\n//                 className=\"btn btn-outline-success rounded-pill px-3\"\r\n//                 onClick={handleDownloadData}\r\n//                 title=\"Download Account Data\"\r\n//               >\r\n//                 <i className=\"bi bi-download me-2\"></i> Download Data\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//             <thead\r\n//               className=\"text-white\"\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//             >\r\n//               <tr>\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n//                 <th className=\"px-3 py-2\">Total Projects</th>\r\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {accounts.length > 0 ? (\r\n//                 accounts.map((account) => (\r\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\r\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\r\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n//                       <button\r\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n//                           state: {\r\n//                             accountId: account.accountId,\r\n//                             month: activeMonth,\r\n//                             year: activeYear,\r\n//                             accountName: account.accountName\r\n//                           }\r\n//                         })}\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                         title={`View Projects for ${account.accountName}`}\r\n//                       >\r\n//                         üîç\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\r\n//                     No account data found for the selected period.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport Breadcrumbs from '../Breadcrumbs';\r\nimport commonData from '../../data/commonData.json';\r\n\r\nconst AccountLevel = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [commentsMap, setCommentsMap] = useState({});\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [currentAccountId, setCurrentAccountId] = useState(null);\r\n  const [commentInput, setCommentInput] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Destructure currency settings from commonData.json\r\n  const {\r\n    locale,\r\n    currency,\r\n    minimumFractionDigits,\r\n    maximumFractionDigits\r\n  } = commonData.currencySettings;\r\n\r\n  // Centralized currency formatter\r\n  const formatCurrency = (value = 0) =>\r\n    value.toLocaleString(locale, {\r\n      style: 'currency',\r\n      currency,\r\n      minimumFractionDigits,\r\n      maximumFractionDigits\r\n    });\r\n\r\n  // Load Poppins font on mount\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href =\r\n      'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Fetch account data when month/year change\r\n  useEffect(() => {\r\n    const fetchAccountData = async (month, year) => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const resp = await fetch(`${BACKEND_URL}/api/account`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ month, year })\r\n        });\r\n        if (!resp.ok) {\r\n          const msg = await resp.text();\r\n          throw new Error(`status: ${resp.status}, message: ${msg || resp.statusText}`);\r\n        }\r\n        const data = await resp.json();\r\n        setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n      } catch (e) {\r\n        console.error(e);\r\n        setError(`Failed to load account data: ${e.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    let monthToUse = location.state?.month;\r\n    let yearToUse = location.state?.year;\r\n\r\n    if (!monthToUse || !yearToUse) {\r\n      const m = sessionStorage.getItem('lastFetchedAccountMonth');\r\n      const y = sessionStorage.getItem('lastFetchedAccountYear');\r\n      if (m && y) {\r\n        monthToUse = parseInt(m, 10);\r\n        yearToUse = parseInt(y, 10);\r\n      }\r\n    }\r\n\r\n    if (monthToUse && yearToUse) {\r\n      if (\r\n        monthToUse !== activeMonth ||\r\n        yearToUse !== activeYear ||\r\n        accounts.length === 0\r\n      ) {\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n        sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n        fetchAccountData(monthToUse, yearToUse);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setError('Missing month or year. Please go back and select a date.');\r\n      setLoading(false);\r\n    }\r\n  }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\r\n\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' },\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n    { name: 'Account Level', page: 'accounts' }\r\n  ];\r\n\r\n  const openCommentModal = (accountId) => {\r\n    setCurrentAccountId(accountId);\r\n    setCommentInput(commentsMap[accountId] || '');\r\n    setModalVisible(true);\r\n  };\r\n\r\n  const saveComment = () => {\r\n    setCommentsMap(prev => ({\r\n      ...prev,\r\n      [currentAccountId]: commentInput\r\n    }));\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalVisible(false);\r\n    setCommentInput('');\r\n    setCurrentAccountId(null);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{\r\n          maxWidth: '1100px',\r\n          backgroundColor: '#ffffffdd',\r\n          borderRadius: '1rem'\r\n        }}\r\n      >\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n        <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n          üè¢ Account Level Overview\r\n        </h2>\r\n\r\n        {loading ? (\r\n          <div className=\"d-flex justify-content-center align-items-center\">\r\n            <div className=\"spinner-border text-primary\" role=\"status\" />\r\n            <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n          </div>\r\n        ) : error ? (\r\n          <div className=\"d-flex flex-column justify-content-center align-items-center text-danger\">\r\n            <p className=\"fs-4\">Error: {error}</p>\r\n            <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n              Go to Upload Page\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"table-responsive rounded\">\r\n            <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n              <thead\r\n                className=\"text-white\"\r\n                style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n              >\r\n                <tr>\r\n                  <th className=\"px-3 py-2\">Account ID</th>\r\n                  <th className=\"px-3 py-2\">Account Name</th>\r\n                  <th className=\"px-3 py-2\">Total Projects</th>\r\n                  <th className=\"px-3 py-2\">Total Revenue</th>\r\n                  <th className=\"px-3 py-2\">Forecast Revenue</th>\r\n                  <th className=\"px-3 py-2\">Revenue Difference</th>\r\n                  <th className=\"px-3 py-2 text-center\">Comment</th>\r\n                  <th className=\"px-3 py-2 text-center\">View</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {accounts.length > 0 ? accounts.map(account => {\r\n                  const actual = account.totalRevenue || 0;\r\n                  const forecast = 0;\r\n                  const difference = 0;\r\n                  return (\r\n                    <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n                      <td className=\"px-3 py-2\">{account.accountId}</td>\r\n                      <td className=\"px-3 py-2\">{account.accountName}</td>\r\n                      <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n                      <td className=\"px-3 py-2\">{formatCurrency(actual)}</td>\r\n                      <td className=\"px-3 py-2\">{formatCurrency(forecast)}</td>\r\n                      <td className=\"px-3 py-2\">{formatCurrency(difference)}</td>\r\n                      <td className=\"px-3 py-2 text-center\">\r\n                        <button\r\n                          className=\"btn btn-sm btn-outline-secondary\"\r\n                          onClick={() => openCommentModal(account.accountId)}\r\n                          title=\"Add/Edit comment\"\r\n                        >\r\n                          üí¨\r\n                        </button>\r\n                      </td>\r\n                      <td className=\"px-3 py-2 text-center\">\r\n                        <button\r\n                          className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n                          onClick={() =>\r\n                            navigate(\r\n                              `/accounts/${account.accountId}/projects`,\r\n                              { state: { accountId: account.accountId, month: activeMonth, year: activeYear } }\r\n                            )\r\n                          }\r\n                          title={`View Projects for ${account.accountName}`}\r\n                        >\r\n                          üîç\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                }) : (\r\n                  <tr>\r\n                    <td colSpan=\"8\" className=\"text-center text-muted py-4\">\r\n                      No account data found for the selected period.\r\n                    </td>\r\n                  </tr>\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {modalVisible && (\r\n        <div className=\"modal fade show d-block\" style={{ backgroundColor: '#00000066' }}>\r\n          <div className=\"modal-dialog modal-dialog-centered\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\">üí¨ Comment</h5>\r\n                <button type=\"button\" className=\"btn-close\" onClick={closeModal} />\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <textarea\r\n                  className=\"form-control\"\r\n                  rows=\"4\"\r\n                  placeholder=\"Enter your comment here...\"\r\n                  value={commentInput}\r\n                  onChange={e => setCommentInput(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button className=\"btn btn-secondary\" onClick={closeModal}>\r\n                  Cancel\r\n                </button>\r\n                <button className=\"btn btn-primary\" onClick={saveComment}>\r\n                  Save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountLevel;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}