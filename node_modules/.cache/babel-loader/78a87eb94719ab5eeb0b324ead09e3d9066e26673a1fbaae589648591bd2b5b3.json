{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\Frontend\\\\Revenue-forecast\\\\src\\\\components\\\\Details\\\\DateLevel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport $ from 'jquery';\nimport 'datatables.net';\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\nimport Breadcrumbs from '../Breadcrumbs';\nimport commonData from '../../data/commonData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DateLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    projectId: urlProjectId,\n    associateId: urlAssociateId\n  } = useParams();\n  const location = useLocation();\n  const tableRef = useRef(null);\n  const dataTableInstance = useRef(null); // Ref to hold the DataTable instance\n\n  const [dailyHours, setDailyHours] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Active context states, initialized to null or 'Loading...' for immediate feedback\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeProjectId, setActiveProjectId] = useState(null);\n  const [activeProjectName, setActiveProjectName] = useState('Loading...');\n  const [activeAssociateId, setActiveAssociateId] = useState(null);\n  const [activeAssociateName, setActiveAssociateName] = useState('Loading...');\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\n  const [activeSbu, setActiveSbu] = useState(null);\n  const [activeProjectType, setActiveProjectType] = useState(null);\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Currency formatter from commonData.json\n  const {\n    locale,\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  } = commonData.currencySettings;\n  const formatCurrency = (val = 0) => val.toLocaleString(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  });\n\n  // Load Poppins font once\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Effect to determine context from various sources and trigger data fetch\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5, _location$state6, _location$state7, _location$state8;\n    const fetchDailyHoursData = async (month, year, projId, assocId, currentProjectName, currentAssociateName, currentAccountName, currentAccountId) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`${BACKEND_URL}/api/date-level`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            month,\n            year,\n            projectId: projId,\n            associateId: assocId\n          })\n        });\n        if (!response.ok) {\n          const errText = await response.text();\n          throw new Error(`status: ${response.status}, message: ${errText || response.statusText}`);\n        }\n        const data = await response.json();\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\n        setDailyHours(list);\n\n        // Update ProjectName, AssociateName, AccountName from fetched data if more specific,\n        // otherwise retain values passed from navigation/session storage.\n        if (list.length > 0) {\n          setActiveProjectName(list[0].projectName || currentProjectName || projId);\n          setActiveAssociateName(list[0].associateName || currentAssociateName || assocId);\n          setActiveAccountName(list[0].accountName || currentAccountName || 'Unknown Account');\n          setActiveAccountId(list[0].accountId || currentAccountId);\n        } else {\n          // If no data, ensure names are still set to the best available context or 'N/A'\n          setActiveProjectName(currentProjectName || 'N/A');\n          setActiveAssociateName(currentAssociateName || 'N/A');\n          setActiveAccountName(currentAccountName || 'N/A');\n          setActiveAccountId(currentAccountId); // Keep account ID from context\n        }\n      } catch (err) {\n        console.error('Error fetching daily hours data:', err);\n        setError(`Failed to load daily hours data: ${err.message}`);\n        setActiveProjectName('Error');\n        setActiveAssociateName('Error');\n        setActiveAccountName('Error');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Derive values from location.state, URL params, or sessionStorage\n    let monthToUse = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month) || sessionStorage.getItem('lastFetchedDateMonth');\n    let yearToUse = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year) || sessionStorage.getItem('lastFetchedDateYear');\n    let projectIdToUse = urlProjectId || sessionStorage.getItem('lastFetchedDateProjectId');\n    let associateIdToUse = urlAssociateId || sessionStorage.getItem('lastFetchedDateAssociateId');\n    let projectNameToUse = ((_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.projectName) || sessionStorage.getItem('lastFetchedDateProjectName');\n    let associateNameToUse = ((_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.associateName) || sessionStorage.getItem('lastFetchedDateAssociateName');\n    let accountIdToUse = ((_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.accountId) || sessionStorage.getItem('lastFetchedDateAccountId');\n    let accountNameToUse = ((_location$state6 = location.state) === null || _location$state6 === void 0 ? void 0 : _location$state6.accountName) || sessionStorage.getItem('lastFetchedDateAccountName');\n    let sbuToUse = ((_location$state7 = location.state) === null || _location$state7 === void 0 ? void 0 : _location$state7.sbu) || sessionStorage.getItem('lastFetchedDateSbu');\n    let projectTypeToUse = ((_location$state8 = location.state) === null || _location$state8 === void 0 ? void 0 : _location$state8.projectType) || sessionStorage.getItem('lastFetchedDateProjectType');\n\n    // Convert numeric values to integers\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\n\n    // Update active states immediately. This makes sure breadcrumbs have values\n    // as soon as possible, even before the data fetch completes.\n    setActiveMonth(monthToUse);\n    setActiveYear(yearToUse);\n    setActiveProjectId(projectIdToUse);\n    setActiveAssociateId(associateIdToUse);\n    // Use the derived names for initial state, falling back to 'Loading...' or context\n    setActiveProjectName(projectNameToUse || 'Loading...');\n    setActiveAssociateName(associateNameToUse || 'Loading...');\n    setActiveAccountId(accountIdToUse);\n    setActiveAccountName(accountNameToUse || 'Loading...');\n    setActiveSbu(sbuToUse);\n    setActiveProjectType(projectTypeToUse);\n\n    // Persist context to sessionStorage for future loads\n    if (monthToUse) sessionStorage.setItem('lastFetchedDateMonth', monthToUse.toString());\n    if (yearToUse) sessionStorage.setItem('lastFetchedDateYear', yearToUse.toString());\n    if (projectIdToUse) sessionStorage.setItem('lastFetchedDateProjectId', projectIdToUse);\n    if (associateIdToUse) sessionStorage.setItem('lastFetchedDateAssociateId', associateIdToUse);\n    if (projectNameToUse) sessionStorage.setItem('lastFetchedDateProjectName', projectNameToUse);\n    if (associateNameToUse) sessionStorage.setItem('lastFetchedDateAssociateName', associateNameToUse);\n    if (accountIdToUse) sessionStorage.setItem('lastFetchedDateAccountId', accountIdToUse);\n    if (accountNameToUse) sessionStorage.setItem('lastFetchedDateAccountName', accountNameToUse);\n    if (sbuToUse) {\n      sessionStorage.setItem('lastFetchedDateSbu', sbuToUse);\n    }\n    if (projectTypeToUse) {\n      sessionStorage.setItem('lastFetchedDateProjectType', projectTypeToUse);\n    }\n\n    // Only fetch data if all necessary core context is available\n    const contextChanged = monthToUse !== activeMonth || yearToUse !== activeYear || projectIdToUse !== activeProjectId || associateIdToUse !== activeAssociateId || accountIdToUse !== activeAccountId ||\n    // Also check accountId changes\n    sbuToUse !== activeSbu ||\n    // Also check SBU changes\n    projectTypeToUse !== activeProjectType; // Also check Project Type changes\n\n    if (monthToUse && yearToUse && projectIdToUse && associateIdToUse && projectNameToUse && associateNameToUse && accountIdToUse && accountNameToUse) {\n      if (contextChanged || dailyHours.length === 0) {\n        // Re-fetch if context changed or data is empty\n        fetchDailyHoursData(monthToUse, yearToUse, projectIdToUse, associateIdToUse, projectNameToUse, associateNameToUse, accountNameToUse, accountIdToUse);\n      } else {\n        setLoading(false); // Context hasn't changed, data already loaded\n      }\n    } else {\n      setError('Missing daily hours context. Please go back and select an associate.');\n      setLoading(false);\n    }\n  }, [location.state, urlProjectId, urlAssociateId,\n  // Include all 'active' context states that drive the fetch logic in dependencies\n  activeMonth, activeYear, activeProjectId, activeAssociateId, activeAccountId,\n  // Important: Include if it affects data fetching or the fetch trigger\n  activeSbu,\n  // Important: Include if it affects data fetching or the fetch trigger\n  activeProjectType,\n  // Important: Include if it affects data fetching or the fetch trigger\n  dailyHours.length // Keep this if you want to re-fetch if data array becomes empty\n  ]);\n\n  // Initialize DataTable once and update data when it changes\n  useEffect(() => {\n    const tableEl = tableRef.current;\n    if (tableEl && !dataTableInstance.current) {\n      // Initialize only if not already initialized\n      dataTableInstance.current = $(tableEl).DataTable({\n        paging: true,\n        searching: true,\n        ordering: true,\n        info: true,\n        autoWidth: false,\n        data: dailyHours,\n        // Initial data\n        columns: [{\n          data: 'date'\n        }, {\n          data: 'associateId'\n        }, {\n          data: 'associateName'\n        }, {\n          data: 'projectId'\n        }, {\n          data: 'projectName'\n        }, {\n          data: 'companyHours'\n        }, {\n          data: 'clientHours'\n        }, {\n          // Custom rendering for Variance Time Units\n          data: 'varianceTimeUnits',\n          render: function (data, type, row) {\n            // Calculate variance if varianceTimeUnits is null/undefined\n            const variance = data != null ? data : row.companyHours - row.clientHours;\n            let className = '';\n            if (variance > 0) {\n              className = 'text-danger';\n            } else if (variance < 0) {\n              className = 'text-primary';\n            } else {\n              className = 'text-success';\n            }\n            return `<span class=\"fw-semibold ${className}\">${variance}</span>`;\n          }\n        }, {\n          data: 'comparisonResult'\n        }]\n      });\n    } else if (dataTableInstance.current && !loading) {\n      // Update data if DataTable is already initialized and loading is complete\n      dataTableInstance.current.clear().rows.add(dailyHours).draw();\n    }\n\n    // Cleanup function to destroy DataTable when component unmounts\n    return () => {\n      if (dataTableInstance.current) {\n        dataTableInstance.current.destroy();\n        dataTableInstance.current = null;\n      }\n    };\n  }, [loading, dailyHours]); // Dependencies for DataTable effect\n\n  // Define breadcrumb path for navigation\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  },\n  // Conditionally add SBU Level\n  ...(activeSbu ? [{\n    name: `${activeSbu} SBU Level`,\n    page: 'sbu',\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }] : []),\n  // Account Level breadcrumb\n  {\n    name: 'Account Level',\n    page: `accounts`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  },\n  // Conditionally add Project Type breadcrumb\n  ...(activeProjectType ? [{\n    name: `${activeProjectType} Project Type`,\n    page: `accounts/${activeAccountId}/project-types`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu,\n      accId: activeAccountId\n    }\n  }] : []),\n  // Project Level breadcrumb, passing all necessary state back\n  {\n    name: `Project Level (${activeAccountName || 'Loading...'})`,\n    // Ensure activeAccountName is used\n    page: `accounts/${activeAccountId}/projects`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu,\n      accId: activeAccountId,\n      accountName: activeAccountName,\n      projectType: activeProjectType\n    }\n  },\n  // Associate Level breadcrumb, passing all necessary state back\n  {\n    name: `Associates (${activeProjectName || 'Loading...'})`,\n    // Ensure activeProjectName is used\n    page: `projects/${activeProjectId}/associates`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      projectId: activeProjectId,\n      projectName: activeProjectName,\n      accountId: activeAccountId,\n      accountName: activeAccountName,\n      sbu: activeSbu,\n      projectType: activeProjectType\n    }\n  },\n  // Current page breadcrumb\n  {\n    name: `Daily View (${activeAssociateName || 'Loading...'})`,\n    // Ensure activeAssociateName is used\n    page: `projects/${activeProjectId}/associates/${activeAssociateId}/daily`\n  }].filter(Boolean); // Filter out any null/undefined entries\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Daily Hours Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate(`/projects/${activeProjectId}/associates`, {\n          state: {\n            month: activeMonth,\n            year: activeYear,\n            projectId: activeProjectId,\n            projectName: activeProjectName,\n            accountId: activeAccountId,\n            accountName: activeAccountName,\n            sbu: activeSbu,\n            projectType: activeProjectType\n          }\n        }),\n        children: \"Go to Associate Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 w-100\",\n      style: {\n        maxWidth: '950px',\n        backgroundColor: '#ffffffee',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4 fw-semibold text-dark\",\n        children: [\"\\uD83D\\uDCC5 Daily Hours \\u2013 \", activeAssociateName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          ref: tableRef,\n          className: \"display table table-hover table-borderless align-middle mb-0\",\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              style: {\n                background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\n                color: 'white'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Associate ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Associate Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Company Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Client Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Variance Time Units\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Comparison Result\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n};\n_s(DateLevel, \"Bp2hm/TgoBwxnjeoSsmxALcN4JI=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = DateLevel;\nexport default DateLevel;\nvar _c;\n$RefreshReg$(_c, \"DateLevel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","useParams","useLocation","$","Breadcrumbs","commonData","jsxDEV","_jsxDEV","DateLevel","_s","navigate","projectId","urlProjectId","associateId","urlAssociateId","location","tableRef","dataTableInstance","dailyHours","setDailyHours","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeProjectId","setActiveProjectId","activeProjectName","setActiveProjectName","activeAssociateId","setActiveAssociateId","activeAssociateName","setActiveAssociateName","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","activeSbu","setActiveSbu","activeProjectType","setActiveProjectType","BACKEND_URL","locale","currency","minimumFractionDigits","maximumFractionDigits","currencySettings","formatCurrency","val","toLocaleString","style","link","document","createElement","href","rel","head","appendChild","body","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","_location$state6","_location$state7","_location$state8","fetchDailyHoursData","month","year","projId","assocId","currentProjectName","currentAssociateName","currentAccountName","currentAccountId","response","fetch","method","headers","JSON","stringify","ok","errText","text","Error","status","statusText","data","json","list","Array","isArray","filter","Boolean","length","projectName","associateName","accountName","accountId","err","console","message","monthToUse","state","sessionStorage","getItem","yearToUse","projectIdToUse","associateIdToUse","projectNameToUse","associateNameToUse","accountIdToUse","accountNameToUse","sbuToUse","sbu","projectTypeToUse","projectType","parseInt","setItem","toString","contextChanged","tableEl","current","DataTable","paging","searching","ordering","info","autoWidth","columns","render","type","row","variance","companyHours","clientHours","className","clear","rows","add","draw","destroy","breadcrumbPath","name","page","accId","children","role","fileName","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","ref","width","color","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/Frontend/Revenue-forecast/src/components/Details/DateLevel.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport $ from 'jquery';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\nimport Breadcrumbs from '../Breadcrumbs';\r\nimport commonData from '../../data/commonData.json';\r\n\r\nconst DateLevel = () => {\r\n  const navigate = useNavigate();\r\n  const { projectId: urlProjectId, associateId: urlAssociateId } = useParams();\r\n  const location = useLocation();\r\n  const tableRef = useRef(null);\r\n  const dataTableInstance = useRef(null); // Ref to hold the DataTable instance\r\n\r\n  const [dailyHours, setDailyHours] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Active context states, initialized to null or 'Loading...' for immediate feedback\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n  const [activeProjectId, setActiveProjectId] = useState(null);\r\n  const [activeProjectName, setActiveProjectName] = useState('Loading...');\r\n  const [activeAssociateId, setActiveAssociateId] = useState(null);\r\n  const [activeAssociateName, setActiveAssociateName] = useState('Loading...');\r\n  const [activeAccountId, setActiveAccountId] = useState(null);\r\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n  const [activeSbu, setActiveSbu] = useState(null);\r\n  const [activeProjectType, setActiveProjectType] = useState(null);\r\n\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Currency formatter from commonData.json\r\n  const {\r\n    locale,\r\n    currency,\r\n    minimumFractionDigits,\r\n    maximumFractionDigits\r\n  } = commonData.currencySettings;\r\n  const formatCurrency = (val = 0) =>\r\n    val.toLocaleString(locale, {\r\n      style: 'currency',\r\n      currency,\r\n      minimumFractionDigits,\r\n      maximumFractionDigits\r\n    });\r\n\r\n  // Load Poppins font once\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href =\r\n      'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Effect to determine context from various sources and trigger data fetch\r\n  useEffect(() => {\r\n    const fetchDailyHoursData = async (month, year, projId, assocId, currentProjectName, currentAssociateName, currentAccountName, currentAccountId) => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const response = await fetch(`${BACKEND_URL}/api/date-level`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ month, year, projectId: projId, associateId: assocId })\r\n        });\r\n        if (!response.ok) {\r\n          const errText = await response.text();\r\n          throw new Error(`status: ${response.status}, message: ${errText || response.statusText}`);\r\n        }\r\n        const data = await response.json();\r\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\r\n        setDailyHours(list);\r\n\r\n        // Update ProjectName, AssociateName, AccountName from fetched data if more specific,\r\n        // otherwise retain values passed from navigation/session storage.\r\n        if (list.length > 0) {\r\n          setActiveProjectName(list[0].projectName || currentProjectName || projId);\r\n          setActiveAssociateName(list[0].associateName || currentAssociateName || assocId);\r\n          setActiveAccountName(list[0].accountName || currentAccountName || 'Unknown Account');\r\n          setActiveAccountId(list[0].accountId || currentAccountId);\r\n        } else {\r\n          // If no data, ensure names are still set to the best available context or 'N/A'\r\n          setActiveProjectName(currentProjectName || 'N/A');\r\n          setActiveAssociateName(currentAssociateName || 'N/A');\r\n          setActiveAccountName(currentAccountName || 'N/A');\r\n          setActiveAccountId(currentAccountId); // Keep account ID from context\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching daily hours data:', err);\r\n        setError(`Failed to load daily hours data: ${err.message}`);\r\n        setActiveProjectName('Error');\r\n        setActiveAssociateName('Error');\r\n        setActiveAccountName('Error');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Derive values from location.state, URL params, or sessionStorage\r\n    let monthToUse = location.state?.month || sessionStorage.getItem('lastFetchedDateMonth');\r\n    let yearToUse = location.state?.year || sessionStorage.getItem('lastFetchedDateYear');\r\n    let projectIdToUse = urlProjectId || sessionStorage.getItem('lastFetchedDateProjectId');\r\n    let associateIdToUse = urlAssociateId || sessionStorage.getItem('lastFetchedDateAssociateId');\r\n    let projectNameToUse = location.state?.projectName || sessionStorage.getItem('lastFetchedDateProjectName');\r\n    let associateNameToUse = location.state?.associateName || sessionStorage.getItem('lastFetchedDateAssociateName');\r\n    let accountIdToUse = location.state?.accountId || sessionStorage.getItem('lastFetchedDateAccountId');\r\n    let accountNameToUse = location.state?.accountName || sessionStorage.getItem('lastFetchedDateAccountName');\r\n    let sbuToUse = location.state?.sbu || sessionStorage.getItem('lastFetchedDateSbu');\r\n    let projectTypeToUse = location.state?.projectType || sessionStorage.getItem('lastFetchedDateProjectType');\r\n\r\n    // Convert numeric values to integers\r\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\r\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\r\n\r\n    // Update active states immediately. This makes sure breadcrumbs have values\r\n    // as soon as possible, even before the data fetch completes.\r\n    setActiveMonth(monthToUse);\r\n    setActiveYear(yearToUse);\r\n    setActiveProjectId(projectIdToUse);\r\n    setActiveAssociateId(associateIdToUse);\r\n    // Use the derived names for initial state, falling back to 'Loading...' or context\r\n    setActiveProjectName(projectNameToUse || 'Loading...');\r\n    setActiveAssociateName(associateNameToUse || 'Loading...');\r\n    setActiveAccountId(accountIdToUse);\r\n    setActiveAccountName(accountNameToUse || 'Loading...');\r\n    setActiveSbu(sbuToUse);\r\n    setActiveProjectType(projectTypeToUse);\r\n\r\n    // Persist context to sessionStorage for future loads\r\n    if (monthToUse) sessionStorage.setItem('lastFetchedDateMonth', monthToUse.toString());\r\n    if (yearToUse) sessionStorage.setItem('lastFetchedDateYear', yearToUse.toString());\r\n    if (projectIdToUse) sessionStorage.setItem('lastFetchedDateProjectId', projectIdToUse);\r\n    if (associateIdToUse) sessionStorage.setItem('lastFetchedDateAssociateId', associateIdToUse);\r\n    if (projectNameToUse) sessionStorage.setItem('lastFetchedDateProjectName', projectNameToUse);\r\n    if (associateNameToUse) sessionStorage.setItem('lastFetchedDateAssociateName', associateNameToUse);\r\n    if (accountIdToUse) sessionStorage.setItem('lastFetchedDateAccountId', accountIdToUse);\r\n    if (accountNameToUse) sessionStorage.setItem('lastFetchedDateAccountName', accountNameToUse);\r\n    if (sbuToUse) {\r\n      sessionStorage.setItem('lastFetchedDateSbu', sbuToUse);\r\n    }\r\n    if (projectTypeToUse) {\r\n      sessionStorage.setItem('lastFetchedDateProjectType', projectTypeToUse);\r\n    }\r\n\r\n    // Only fetch data if all necessary core context is available\r\n    const contextChanged =\r\n      monthToUse !== activeMonth ||\r\n      yearToUse !== activeYear ||\r\n      projectIdToUse !== activeProjectId ||\r\n      associateIdToUse !== activeAssociateId ||\r\n      accountIdToUse !== activeAccountId || // Also check accountId changes\r\n      sbuToUse !== activeSbu || // Also check SBU changes\r\n      projectTypeToUse !== activeProjectType; // Also check Project Type changes\r\n\r\n    if (monthToUse && yearToUse && projectIdToUse && associateIdToUse && projectNameToUse && associateNameToUse && accountIdToUse && accountNameToUse) {\r\n      if (contextChanged || dailyHours.length === 0) { // Re-fetch if context changed or data is empty\r\n        fetchDailyHoursData(monthToUse, yearToUse, projectIdToUse, associateIdToUse, projectNameToUse, associateNameToUse, accountNameToUse, accountIdToUse);\r\n      } else {\r\n        setLoading(false); // Context hasn't changed, data already loaded\r\n      }\r\n    } else {\r\n      setError('Missing daily hours context. Please go back and select an associate.');\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    location.state,\r\n    urlProjectId,\r\n    urlAssociateId,\r\n    // Include all 'active' context states that drive the fetch logic in dependencies\r\n    activeMonth,\r\n    activeYear,\r\n    activeProjectId,\r\n    activeAssociateId,\r\n    activeAccountId, // Important: Include if it affects data fetching or the fetch trigger\r\n    activeSbu, // Important: Include if it affects data fetching or the fetch trigger\r\n    activeProjectType, // Important: Include if it affects data fetching or the fetch trigger\r\n    dailyHours.length // Keep this if you want to re-fetch if data array becomes empty\r\n  ]);\r\n\r\n  // Initialize DataTable once and update data when it changes\r\n  useEffect(() => {\r\n    const tableEl = tableRef.current;\r\n\r\n    if (tableEl && !dataTableInstance.current) { // Initialize only if not already initialized\r\n      dataTableInstance.current = $(tableEl).DataTable({\r\n        paging: true,\r\n        searching: true,\r\n        ordering: true,\r\n        info: true,\r\n        autoWidth: false,\r\n        data: dailyHours, // Initial data\r\n        columns: [\r\n          { data: 'date' },\r\n          { data: 'associateId' },\r\n          { data: 'associateName' },\r\n          { data: 'projectId' },\r\n          { data: 'projectName' },\r\n          { data: 'companyHours' },\r\n          { data: 'clientHours' },\r\n          { // Custom rendering for Variance Time Units\r\n            data: 'varianceTimeUnits',\r\n            render: function (data, type, row) {\r\n              // Calculate variance if varianceTimeUnits is null/undefined\r\n              const variance = data != null ? data : row.companyHours - row.clientHours;\r\n              let className = '';\r\n              if (variance > 0) {\r\n                className = 'text-danger';\r\n              } else if (variance < 0) {\r\n                className = 'text-primary';\r\n              } else {\r\n                className = 'text-success';\r\n              }\r\n              return `<span class=\"fw-semibold ${className}\">${variance}</span>`;\r\n            }\r\n          },\r\n          { data: 'comparisonResult' }\r\n        ]\r\n      });\r\n    } else if (dataTableInstance.current && !loading) {\r\n      // Update data if DataTable is already initialized and loading is complete\r\n      dataTableInstance.current.clear().rows.add(dailyHours).draw();\r\n    }\r\n\r\n    // Cleanup function to destroy DataTable when component unmounts\r\n    return () => {\r\n      if (dataTableInstance.current) {\r\n        dataTableInstance.current.destroy();\r\n        dataTableInstance.current = null;\r\n      }\r\n    };\r\n  }, [loading, dailyHours]); // Dependencies for DataTable effect\r\n\r\n  // Define breadcrumb path for navigation\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' },\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n    // Conditionally add SBU Level\r\n    ...(activeSbu ? [{ name: `${activeSbu} SBU Level`, page: 'sbu', state: { month: activeMonth, year: activeYear, sbu: activeSbu } }] : []),\r\n    // Account Level breadcrumb\r\n    { name: 'Account Level', page: `accounts`, state: { month: activeMonth, year: activeYear, sbu: activeSbu } },\r\n    // Conditionally add Project Type breadcrumb\r\n    ...(activeProjectType ? [{ name: `${activeProjectType} Project Type`, page: `accounts/${activeAccountId}/project-types`, state: { month: activeMonth, year: activeYear, sbu: activeSbu, accId: activeAccountId } }] : []),\r\n    // Project Level breadcrumb, passing all necessary state back\r\n    {\r\n      name: `Project Level (${activeAccountName || 'Loading...'})`, // Ensure activeAccountName is used\r\n      page: `accounts/${activeAccountId}/projects`,\r\n      state: {\r\n        month: activeMonth,\r\n        year: activeYear,\r\n        sbu: activeSbu,\r\n        accId: activeAccountId,\r\n        accountName: activeAccountName,\r\n        projectType: activeProjectType\r\n      }\r\n    },\r\n    // Associate Level breadcrumb, passing all necessary state back\r\n    {\r\n      name: `Associates (${activeProjectName || 'Loading...'})`, // Ensure activeProjectName is used\r\n      page: `projects/${activeProjectId}/associates`,\r\n      state: {\r\n        month: activeMonth,\r\n        year: activeYear,\r\n        projectId: activeProjectId,\r\n        projectName: activeProjectName,\r\n        accountId: activeAccountId,\r\n        accountName: activeAccountName,\r\n        sbu: activeSbu,\r\n        projectType: activeProjectType\r\n      }\r\n    },\r\n    // Current page breadcrumb\r\n    {\r\n      name: `Daily View (${activeAssociateName || 'Loading...'})`, // Ensure activeAssociateName is used\r\n      page: `projects/${activeProjectId}/associates/${activeAssociateId}/daily`\r\n    }\r\n  ].filter(Boolean); // Filter out any null/undefined entries\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\" />\r\n        <p className=\"ms-3 text-primary\">Loading Daily Hours Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        <button\r\n          className=\"btn btn-primary mt-3\"\r\n          onClick={() => navigate(`/projects/${activeProjectId}/associates`, {\r\n            state: {\r\n              month: activeMonth,\r\n              year: activeYear,\r\n              projectId: activeProjectId,\r\n              projectName: activeProjectName,\r\n              accountId: activeAccountId,\r\n              accountName: activeAccountName,\r\n              sbu: activeSbu,\r\n              projectType: activeProjectType\r\n            }\r\n          })}\r\n        >\r\n          Go to Associate Level\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f8fafc, #e0e7ef)',\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 w-100\"\r\n        style={{\r\n          maxWidth: '950px',\r\n          backgroundColor: '#ffffffee',\r\n          borderRadius: '1rem'\r\n        }}\r\n      >\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n          📅 Daily Hours – {activeAssociateName}\r\n        </h2>\r\n\r\n        <div className=\"table-responsive rounded\">\r\n          <table\r\n            ref={tableRef}\r\n            className=\"display table table-hover table-borderless align-middle mb-0\"\r\n            style={{ width: '100%' }}\r\n          >\r\n            <thead>\r\n              <tr\r\n                style={{\r\n                  background: 'linear-gradient(to right, #60a5fa, #3b82f6)',\r\n                  color: 'white'\r\n                }}\r\n              >\r\n                <th>Date</th>\r\n                <th>Associate ID</th>\r\n                <th>Associate Name</th>\r\n                <th>Project ID</th>\r\n                <th>Project Name</th>\r\n                <th>Company Hours</th>\r\n                <th>Client Hours</th>\r\n                <th>Variance Time Units</th>\r\n                <th>Comparison Result</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {/* DataTables will manage rendering the tbody content, so this map is removed */}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateLevel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}