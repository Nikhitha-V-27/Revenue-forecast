{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\AccountLevel.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\n// import accountData from '../../data/accountData.json'; // CORRECTED PATH: data is two levels up\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n\n//   // Set font family on component mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Define breadcrumb path for Account Level\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n//             <thead\n//               className=\"text-white\"\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//             >\n//               <tr>\n//                 <th className=\"px-3 py-2\">Account ID</th>\n//                 <th className=\"px-3 py-2\">Account Name</th>\n//                 <th className=\"px-3 py-2\">Actual Revenue</th>\n//                 <th className=\"px-3 py-2\">Forecast Revenue</th>\n//                 <th className=\"px-3 py-2\">Forecast vs Actual Revenue</th>\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {accountData.accounts.map((account) => {\n//                 const variance = account.actualRevenue - account.forecastRevenue;\n//                 return (\n//                   <tr key={account.id} style={{ backgroundColor: '#fdfdfd' }}>\n//                     <td className=\"px-3 py-2\">{account.id}</td>\n//                     <td className=\"px-3 py-2\">{account.name}</td>\n//                     <td className=\"px-3 py-2\">${account.actualRevenue.toLocaleString()}</td>\n//                     <td className=\"px-3 py-2\">${account.forecastRevenue.toLocaleString()}</td>\n//                     <td\n//                       className={`px-3 py-2 fw-semibold ${\n//                         variance > 0 ? 'text-success' : variance < 0 ? 'text-danger' : 'text-muted'\n//                       }`}\n//                     >\n//                       ${variance.toLocaleString()}\n//                     </td>\n//                     <td className=\"px-3 py-2 text-center\">\n//                       <button\n//                         onClick={() => navigate(`/accounts/${account.id}/projects`)} // Navigate to projects for this account\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                         title={`View Projects for ${account.name}`}\n//                       >\n//                         üîç\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\n//after demo after discussion for adding datatables.net\n\n// import React, { useEffect, useState } from 'react';\n\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\n\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n\n// const AccountLevel = () => {\n\n//   const navigate = useNavigate();\n\n//   const location = useLocation(); // Hook to access location state\n\n//   // State to store fetched account data\n\n//   const [accounts, setAccounts] = useState([]);\n\n//   // State for loading indicator\n\n//   const [loading, setLoading] = useState(true);\n\n//   // State for error messages\n\n//   const [error, setError] = useState(null);\n\n//   // States to keep track of the month and year for which data was last fetched\n\n//   // This helps in preventing unnecessary re-fetches and retaining context\n\n//   const [activeMonth, setActiveMonth] = useState(null);\n\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Set font family on component mount\n\n//   useEffect(() => {\n\n//     const link = document.createElement('link');\n\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n\n//     link.rel = 'stylesheet';\n\n//     document.head.appendChild(link);\n\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n\n//   }, []);\n\n//   // Effect to handle month/year state and fetch data\n\n//   useEffect(() => {\n\n//     const fetchAccountData = async (month, year) => {\n\n//       setLoading(true);\n\n//       setError(null);\n\n//       // Construct the request body as expected by your backend\n\n//       const requestBody = {\n\n//         month: month,\n\n//         year: year\n\n//       };\n\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\n\n//       try {\n\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\n\n//           method: 'POST',\n\n//           headers: {\n\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\n\n//           },\n\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\n\n//         });\n\n//         if (!response.ok) {\n\n//           const errorText = await response.text(); // Get detailed error message from backend\n\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n\n//         }\n\n//         const data = await response.json();\n\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n\n//       } catch (err) {\n\n//         console.error(\"Error fetching account data:\", err);\n\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n\n//       } finally {\n\n//         setLoading(false);\n\n//       }\n\n//     };\n\n//     // Logic to determine month and year for fetching\n\n//     let monthToUse = location.state?.month;\n\n//     let yearToUse = location.state?.year;\n\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\n\n//     if (!monthToUse || !yearToUse) {\n\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n\n//       if (storedMonth && storedYear) {\n\n//         monthToUse = parseInt(storedMonth, 10);\n\n//         yearToUse = parseInt(storedYear, 10);\n\n//       }\n\n//     }\n\n//     // If we have valid month/year, set active states and fetch data if needed\n\n//     if (monthToUse && yearToUse) {\n\n//       // Only fetch if the active month/year has changed or if accounts are empty\n\n//       // This prevents re-fetching when simply navigating back to the same view\n\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n\n//         setActiveMonth(monthToUse);\n\n//         setActiveYear(yearToUse);\n\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n\n//         fetchAccountData(monthToUse, yearToUse);\n\n//       } else {\n\n//         // Data is already present for the active month/year, no need to fetch\n\n//         setLoading(false);\n\n//       }\n\n//     } else {\n\n//       // No month/year found in state or session, show error\n\n//       setError(\"Missing month or year. Please go back and select a date.\");\n\n//       setLoading(false);\n\n//     }\n\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\n\n//   // Define breadcrumb path for Account Level\n\n//   const breadcrumbPath = [\n\n//     { name: 'PMO Dashboard', page: '' },\n\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n\n//     { name: 'Account Level', page: 'accounts' }\n\n//   ];\n\n//   // Render loading state\n\n//   if (loading) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\n\n//         </div>\n\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   // Render error state\n\n//   if (error) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n\n//         <p className=\"fs-4\">Error: {error}</p>\n\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\n\n//           Go to Upload Page\n\n//         </button>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   return (\n\n//     <div\n\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n\n//       style={{\n\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n\n//         fontFamily: \"'Poppins', sans-serif\"\n\n//       }}\n\n//     >\n\n//       <div\n\n//         className=\"card shadow p-4 p-md-5 w-100\"\n\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n\n//       >\n\n//         <Breadcrumbs path={breadcrumbPath} />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n\n//         <div className=\"table-responsive rounded\">\n\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n\n//             <thead\n\n//               className=\"text-white\"\n\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n\n//             >\n\n//               <tr>\n\n//                 <th className=\"px-3 py-2\">Account ID</th>\n\n//                 <th className=\"px-3 py-2\">Account Name</th>\n\n//                 <th className=\"px-3 py-2\">Total Projects</th>\n\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\n\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n\n//               </tr>\n\n//             </thead>\n\n//             <tbody>\n\n//               {accounts.length > 0 ? (\n\n//                 accounts.map((account) => (\n\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\n\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\n\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\n\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\n\n//                     <td className=\"px-3 py-2\">${account.totalRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n\n//                     <td className=\"px-3 py-2 text-center\">\n\n//                       <button\n\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\n\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\n\n//                           state: {\n\n//                             accountId: account.accountId, // Pass accountId explicitly\n\n//                             month: activeMonth, // Pass the active month\n\n//                             year: activeYear // Pass the active year\n\n//                           }\n\n//                         })}\n\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n\n//                         title={`View Projects for ${account.accountName}`}\n\n//                       >\n\n//                         üîç\n\n//                       </button>\n\n//                     </td>\n\n//                   </tr>\n\n//                 ))\n\n//               ) : (\n\n//                 <tr>\n\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\n\n//                     No account data found for the selected period.\n\n//                   </td>\n\n//                 </tr>\n\n//               )}\n\n//             </tbody>\n\n//           </table>\n\n//         </div>\n\n//       </div>\n\n//     </div>\n\n//   );\n\n// };\n\n// export default AccountLevel;\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport Breadcrumbs from '../Breadcrumbs';\n\n// 1) Import your commonData.json\nimport commonData from '../../data/commonData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation(); // This will be used in useEffect to get initial state\n\n  const [accounts, setAccounts] = useState([]); // Used by setAccounts in fetchAccountData\n  const [commentsMap, setCommentsMap] = useState({});\n  const [modalVisible, setModalVisible] = useState(false);\n  const [currentAccountId, setCurrentAccountId] = useState(null);\n  const [commentInput, setCommentInput] = useState('');\n  const [loading, setLoading] = useState(true); // Used by setLoading\n  const [error, setError] = useState(null); // Used by setError\n  const [activeMonth, setActiveMonth] = useState(null); // Used by setActiveMonth\n  const [activeYear, setActiveYear] = useState(null); // Used by setActiveYear\n\n  const BACKEND_URL = 'http://localhost:8081'; // Used in fetchAccountData\n\n  // Destructure your currency settings\n  const {\n    locale,\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  } = commonData.currencySettings;\n\n  // Utility to format any number to your centralized currency format\n  const formatCurrency = (value = 0) => value.toLocaleString(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  });\n\n  // New useEffect to set font family (from previous examples)\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []); // Empty dependency array means this runs once on mount\n\n  // Main useEffect for data fetching and state management\n  useEffect(() => {\n    var _location$state, _location$state2;\n    const fetchAccountData = async (month, year) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(`${BACKEND_URL}/api/accounts`, {\n          // Assuming this is your API endpoint\n          method: 'POST',\n          // Or GET, depending on your backend\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            month,\n            year\n          }) // Pass month and year to backend\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n        }\n        const data = await response.json();\n        setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n      } catch (err) {\n        console.error('Error fetching account data:', err);\n        setError(`Failed to load account data: ${err.message || 'Network error'}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Logic to determine initial month and year (e.g., from location state or sessionStorage)\n    let monthToUse = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month) || new Date().getMonth() + 1; // Default to current month\n    let yearToUse = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year) || new Date().getFullYear(); // Default to current year\n\n    // You might also have logic to retrieve from sessionStorage here, similar to ProjectLevel\n\n    if (monthToUse && yearToUse) {\n      // Only fetch if month/year has changed or accounts are empty\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        fetchAccountData(monthToUse, yearToUse);\n      } else {\n        setLoading(false); // If already loaded, stop loading indicator\n      }\n    } else {\n      setError(\"Missing context (month or year). Please ensure data is selected.\");\n      setLoading(false);\n    }\n  }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies\n\n  // Render loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Account Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '1100px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: [{\n          name: 'PMO Dashboard',\n          page: ''\n        }, {\n          name: 'Revenue Forecast - Early View',\n          page: 'upload'\n        }, {\n          name: 'Account Level',\n          page: 'accounts'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4 fw-semibold text-dark\",\n        children: \"\\uD83C\\uDFE2 Account Level Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-hover align-middle table-borderless mb-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #1d4ed8, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Account ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 617,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Account Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 618,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Total Projects\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Total Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 620,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Forecast Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 621,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Revenue Difference\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 622,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2 text-center\",\n                children: \"Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2 text-center\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 624,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: accounts.length > 0 ? accounts.map(account => {\n              // hard-code forecast & diff to zero as before\n              const actual = account.totalRevenue || 0;\n              const forecast = 0;\n              const difference = 0;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                style: {\n                  backgroundColor: '#fdfdfd'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: account.accountId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 635,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: account.accountName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 636,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: account.totalProjects\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 637,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: formatCurrency(actual)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 638,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: formatCurrency(forecast)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 639,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2\",\n                  children: formatCurrency(difference)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 640,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2 text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-sm btn-outline-secondary\",\n                    onClick: () => {\n                      setCurrentAccountId(account.accountId);\n                      setCommentInput(commentsMap[account.accountId] || '');\n                      setModalVisible(true);\n                    },\n                    title: \"Add/Edit comment\",\n                    children: \"\\uD83D\\uDCDD\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 642,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 641,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-3 py-2 text-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => navigate(`/accounts/${account.accountId}/projects`, {\n                      state: {\n                        accountId: account.accountId,\n                        month: activeMonth,\n                        year: activeYear\n                      }\n                    }),\n                    className: \"btn btn-sm btn-outline-primary rounded-circle\",\n                    title: `View Projects for ${account.accountName}`,\n                    children: \"\\uD83D\\uDD0D\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 655,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 654,\n                  columnNumber: 21\n                }, this)]\n              }, account.accountId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 634,\n                columnNumber: 19\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"8\",\n                className: \"text-center text-muted py-4\",\n                children: \"No account data found for the selected period.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 670,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 7\n    }, this), modalVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal fade show d-block\",\n      style: {\n        backgroundColor: '#00000066'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog modal-dialog-centered\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              children: \"\\uD83D\\uDCAC Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn-close\",\n              onClick: () => setModalVisible(false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              rows: \"4\",\n              placeholder: \"Enter your comment here...\",\n              value: commentInput,\n              onChange: e => setCommentInput(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-secondary\",\n              onClick: () => setModalVisible(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              onClick: () => {\n                setCommentsMap(prev => ({\n                  ...prev,\n                  [currentAccountId]: commentInput\n                }));\n                setModalVisible(false);\n              },\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 591,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountLevel, \"ecmbZVgzO0re8iJjVPPQA5vBKDw=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AccountLevel;\nexport default AccountLevel;\nvar _c;\n$RefreshReg$(_c, \"AccountLevel\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","Breadcrumbs","commonData","jsxDEV","_jsxDEV","AccountLevel","_s","navigate","location","accounts","setAccounts","commentsMap","setCommentsMap","modalVisible","setModalVisible","currentAccountId","setCurrentAccountId","commentInput","setCommentInput","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","BACKEND_URL","locale","currency","minimumFractionDigits","maximumFractionDigits","currencySettings","formatCurrency","value","toLocaleString","style","link","document","createElement","href","rel","head","appendChild","body","fontFamily","_location$state","_location$state2","fetchAccountData","month","year","response","fetch","method","headers","JSON","stringify","ok","errorText","text","Error","status","statusText","data","json","Array","isArray","filter","Boolean","err","console","message","monthToUse","state","Date","getMonth","yearToUse","getFullYear","length","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","background","maxWidth","backgroundColor","borderRadius","path","name","page","map","account","actual","totalRevenue","forecast","difference","accountId","accountName","totalProjects","onClick","title","colSpan","type","rows","placeholder","onChange","e","target","prev","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/AccountLevel.js"],"sourcesContent":["// import React, { useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\r\n// import accountData from '../../data/accountData.json'; // CORRECTED PATH: data is two levels up\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n\r\n//   // Set font family on component mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Define breadcrumb path for Account Level\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//             <thead\r\n//               className=\"text-white\"\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//             >\r\n//               <tr>\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n//                 <th className=\"px-3 py-2\">Actual Revenue</th>\r\n//                 <th className=\"px-3 py-2\">Forecast Revenue</th>\r\n//                 <th className=\"px-3 py-2\">Forecast vs Actual Revenue</th>\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {accountData.accounts.map((account) => {\r\n//                 const variance = account.actualRevenue - account.forecastRevenue;\r\n//                 return (\r\n//                   <tr key={account.id} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                     <td className=\"px-3 py-2\">{account.id}</td>\r\n//                     <td className=\"px-3 py-2\">{account.name}</td>\r\n//                     <td className=\"px-3 py-2\">${account.actualRevenue.toLocaleString()}</td>\r\n//                     <td className=\"px-3 py-2\">${account.forecastRevenue.toLocaleString()}</td>\r\n//                     <td\r\n//                       className={`px-3 py-2 fw-semibold ${\r\n//                         variance > 0 ? 'text-success' : variance < 0 ? 'text-danger' : 'text-muted'\r\n//                       }`}\r\n//                     >\r\n//                       ${variance.toLocaleString()}\r\n//                     </td>\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n//                       <button\r\n//                         onClick={() => navigate(`/accounts/${account.id}/projects`)} // Navigate to projects for this account\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                         title={`View Projects for ${account.name}`}\r\n//                       >\r\n//                         üîç\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 );\r\n//               })}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n//after demo after discussion for adding datatables.net\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\r\n\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\n// const AccountLevel = () => {\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State to store fetched account data\r\n\r\n//   const [accounts, setAccounts] = useState([]);\r\n\r\n//   // State for loading indicator\r\n\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // State for error messages\r\n\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // States to keep track of the month and year for which data was last fetched\r\n\r\n//   // This helps in preventing unnecessary re-fetches and retaining context\r\n\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Set font family on component mount\r\n\r\n//   useEffect(() => {\r\n\r\n//     const link = document.createElement('link');\r\n\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n\r\n//     link.rel = 'stylesheet';\r\n\r\n//     document.head.appendChild(link);\r\n\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n//   }, []);\r\n\r\n//   // Effect to handle month/year state and fetch data\r\n\r\n//   useEffect(() => {\r\n\r\n//     const fetchAccountData = async (month, year) => {\r\n\r\n//       setLoading(true);\r\n\r\n//       setError(null);\r\n\r\n//       // Construct the request body as expected by your backend\r\n\r\n//       const requestBody = {\r\n\r\n//         month: month,\r\n\r\n//         year: year\r\n\r\n//       };\r\n\r\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\r\n\r\n//       try {\r\n\r\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n\r\n//           method: 'POST',\r\n\r\n//           headers: {\r\n\r\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\r\n\r\n//           },\r\n\r\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\r\n\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n\r\n//           const errorText = await response.text(); // Get detailed error message from backend\r\n\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n\r\n//         }\r\n\r\n//         const data = await response.json();\r\n\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n\r\n//       } catch (err) {\r\n\r\n//         console.error(\"Error fetching account data:\", err);\r\n\r\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n\r\n//       } finally {\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     };\r\n\r\n//     // Logic to determine month and year for fetching\r\n\r\n//     let monthToUse = location.state?.month;\r\n\r\n//     let yearToUse = location.state?.year;\r\n\r\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\r\n\r\n//     if (!monthToUse || !yearToUse) {\r\n\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n\r\n//       if (storedMonth && storedYear) {\r\n\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n\r\n//         yearToUse = parseInt(storedYear, 10);\r\n\r\n//       }\r\n\r\n//     }\r\n\r\n//     // If we have valid month/year, set active states and fetch data if needed\r\n\r\n//     if (monthToUse && yearToUse) {\r\n\r\n//       // Only fetch if the active month/year has changed or if accounts are empty\r\n\r\n//       // This prevents re-fetching when simply navigating back to the same view\r\n\r\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n\r\n//         setActiveMonth(monthToUse);\r\n\r\n//         setActiveYear(yearToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n\r\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n\r\n//         fetchAccountData(monthToUse, yearToUse);\r\n\r\n//       } else {\r\n\r\n//         // Data is already present for the active month/year, no need to fetch\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     } else {\r\n\r\n//       // No month/year found in state or session, show error\r\n\r\n//       setError(\"Missing month or year. Please go back and select a date.\");\r\n\r\n//       setLoading(false);\r\n\r\n//     }\r\n\r\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\r\n\r\n//   // Define breadcrumb path for Account Level\r\n\r\n//   const breadcrumbPath = [\r\n\r\n//     { name: 'PMO Dashboard', page: '' },\r\n\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n\r\n//     { name: 'Account Level', page: 'accounts' }\r\n\r\n//   ];\r\n\r\n//   // Render loading state\r\n\r\n//   if (loading) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n\r\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\r\n\r\n//         </div>\r\n\r\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   // Render error state\r\n\r\n//   if (error) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n\r\n//           Go to Upload Page\r\n\r\n//         </button>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   return (\r\n\r\n//     <div\r\n\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n\r\n//       style={{\r\n\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n\r\n//       }}\r\n\r\n//     >\r\n\r\n//       <div\r\n\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n\r\n//       >\r\n\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n\r\n//             <thead\r\n\r\n//               className=\"text-white\"\r\n\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n\r\n//             >\r\n\r\n//               <tr>\r\n\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Total Projects</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\r\n\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n\r\n//               </tr>\r\n\r\n//             </thead>\r\n\r\n//             <tbody>\r\n\r\n//               {accounts.length > 0 ? (\r\n\r\n//                 accounts.map((account) => (\r\n\r\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">${account.totalRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n\r\n//                       <button\r\n\r\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\r\n\r\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n\r\n//                           state: {\r\n\r\n//                             accountId: account.accountId, // Pass accountId explicitly\r\n\r\n//                             month: activeMonth, // Pass the active month\r\n\r\n//                             year: activeYear // Pass the active year\r\n\r\n//                           }\r\n\r\n//                         })}\r\n\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n\r\n//                         title={`View Projects for ${account.accountName}`}\r\n\r\n//                       >\r\n\r\n//                         üîç\r\n\r\n//                       </button>\r\n\r\n//                     </td>\r\n\r\n//                   </tr>\r\n\r\n//                 ))\r\n\r\n//               ) : (\r\n\r\n//                 <tr>\r\n\r\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\r\n\r\n//                     No account data found for the selected period.\r\n\r\n//                   </td>\r\n\r\n//                 </tr>\r\n\r\n//               )}\r\n\r\n//             </tbody>\r\n\r\n//           </table>\r\n\r\n//         </div>\r\n\r\n//       </div>\r\n\r\n//     </div>\r\n\r\n//   );\r\n\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport Breadcrumbs from '../Breadcrumbs';\r\n\r\n// 1) Import your commonData.json\r\nimport commonData from '../../data/commonData.json';\r\n\r\nconst AccountLevel = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation(); // This will be used in useEffect to get initial state\r\n\r\n  const [accounts, setAccounts] = useState([]); // Used by setAccounts in fetchAccountData\r\n  const [commentsMap, setCommentsMap] = useState({});\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [currentAccountId, setCurrentAccountId] = useState(null);\r\n  const [commentInput, setCommentInput] = useState('');\r\n  const [loading, setLoading] = useState(true); // Used by setLoading\r\n  const [error, setError] = useState(null); // Used by setError\r\n  const [activeMonth, setActiveMonth] = useState(null); // Used by setActiveMonth\r\n  const [activeYear, setActiveYear] = useState(null); // Used by setActiveYear\r\n\r\n  const BACKEND_URL = 'http://localhost:8081'; // Used in fetchAccountData\r\n\r\n  // Destructure your currency settings\r\n  const {\r\n    locale,\r\n    currency,\r\n    minimumFractionDigits,\r\n    maximumFractionDigits\r\n  } = commonData.currencySettings;\r\n\r\n  // Utility to format any number to your centralized currency format\r\n  const formatCurrency = (value = 0) =>\r\n    value.toLocaleString(locale, {\r\n      style: 'currency',\r\n      currency,\r\n      minimumFractionDigits,\r\n      maximumFractionDigits\r\n    });\r\n\r\n  // New useEffect to set font family (from previous examples)\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href =\r\n      'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  // Main useEffect for data fetching and state management\r\n  useEffect(() => {\r\n    const fetchAccountData = async (month, year) => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const response = await fetch(`${BACKEND_URL}/api/accounts`, { // Assuming this is your API endpoint\r\n          method: 'POST', // Or GET, depending on your backend\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ month, year }), // Pass month and year to backend\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n      } catch (err) {\r\n        console.error('Error fetching account data:', err);\r\n        setError(`Failed to load account data: ${err.message || 'Network error'}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Logic to determine initial month and year (e.g., from location state or sessionStorage)\r\n    let monthToUse = location.state?.month || new Date().getMonth() + 1; // Default to current month\r\n    let yearToUse = location.state?.year || new Date().getFullYear(); // Default to current year\r\n\r\n    // You might also have logic to retrieve from sessionStorage here, similar to ProjectLevel\r\n\r\n    if (monthToUse && yearToUse) {\r\n      // Only fetch if month/year has changed or accounts are empty\r\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        fetchAccountData(monthToUse, yearToUse);\r\n      } else {\r\n        setLoading(false); // If already loaded, stop loading indicator\r\n      }\r\n    } else {\r\n      setError(\"Missing context (month or year). Please ensure data is selected.\");\r\n      setLoading(false);\r\n    }\r\n\r\n  }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies\r\n\r\n  // Render loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\" />\r\n        <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        {/* Potentially navigate back or offer a retry */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n      >\r\n        <Breadcrumbs path={[\r\n          { name: 'PMO Dashboard', page: '' },\r\n          { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n          { name: 'Account Level', page: 'accounts' }\r\n        ]} />\r\n        <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n\r\n        {/* table */}\r\n        <div className=\"table-responsive rounded\">\r\n          <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n            <thead\r\n              className=\"text-white\"\r\n              style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n            >\r\n              <tr>\r\n                <th className=\"px-3 py-2\">Account ID</th>\r\n                <th className=\"px-3 py-2\">Account Name</th>\r\n                <th className=\"px-3 py-2\">Total Projects</th>\r\n                <th className=\"px-3 py-2\">Total Revenue</th>\r\n                <th className=\"px-3 py-2\">Forecast Revenue</th>\r\n                <th className=\"px-3 py-2\">Revenue Difference</th>\r\n                <th className=\"px-3 py-2 text-center\">Comment</th>\r\n                <th className=\"px-3 py-2 text-center\">View</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {accounts.length > 0 ? accounts.map(account => {\r\n                // hard-code forecast & diff to zero as before\r\n                const actual = account.totalRevenue || 0;\r\n                const forecast = 0;\r\n                const difference = 0;\r\n                return (\r\n                  <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n                    <td className=\"px-3 py-2\">{account.accountId}</td>\r\n                    <td className=\"px-3 py-2\">{account.accountName}</td>\r\n                    <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n                    <td className=\"px-3 py-2\">{formatCurrency(actual)}</td>\r\n                    <td className=\"px-3 py-2\">{formatCurrency(forecast)}</td>\r\n                    <td className=\"px-3 py-2\">{formatCurrency(difference)}</td>\r\n                    <td className=\"px-3 py-2 text-center\">\r\n                      <button\r\n                        className=\"btn btn-sm btn-outline-secondary\"\r\n                        onClick={() => {\r\n                          setCurrentAccountId(account.accountId);\r\n                          setCommentInput(commentsMap[account.accountId] || '');\r\n                          setModalVisible(true);\r\n                        }}\r\n                        title=\"Add/Edit comment\"\r\n                      >\r\n                        üìù\r\n                      </button>\r\n                    </td>\r\n                    <td className=\"px-3 py-2 text-center\">\r\n                      <button\r\n                        onClick={() => navigate(\r\n                          `/accounts/${account.accountId}/projects`,\r\n                          { state: { accountId: account.accountId, month: activeMonth, year: activeYear } }\r\n                        )}\r\n                        className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n                        title={`View Projects for ${account.accountName}`}\r\n                      >\r\n                        üîç\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              }) : (\r\n                <tr>\r\n                  <td colSpan=\"8\" className=\"text-center text-muted py-4\">\r\n                    No account data found for the selected period.\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* comment modal (unchanged) */}\r\n      {modalVisible && (\r\n        <div className=\"modal fade show d-block\" style={{ backgroundColor: '#00000066' }}>\r\n          <div className=\"modal-dialog modal-dialog-centered\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\">üí¨ Comment</h5>\r\n                <button type=\"button\" className=\"btn-close\" onClick={() => setModalVisible(false)} />\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <textarea\r\n                  className=\"form-control\"\r\n                  rows=\"4\"\r\n                  placeholder=\"Enter your comment here...\"\r\n                  value={commentInput}\r\n                  onChange={e => setCommentInput(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button className=\"btn btn-secondary\" onClick={() => setModalVisible(false)}>\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-primary\"\r\n                  onClick={() => {\r\n                    setCommentsMap(prev => ({\r\n                      ...prev,\r\n                      [currentAccountId]: commentInput\r\n                    }));\r\n                    setModalVisible(false);\r\n                  }}\r\n                >\r\n                  Save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountLevel;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}