{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\AccountLevel.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\n// import accountData from '../../data/accountData.json'; // CORRECTED PATH: data is two levels up\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n\n//   // Set font family on component mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Define breadcrumb path for Account Level\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n//             <thead\n//               className=\"text-white\"\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//             >\n//               <tr>\n//                 <th className=\"px-3 py-2\">Account ID</th>\n//                 <th className=\"px-3 py-2\">Account Name</th>\n//                 <th className=\"px-3 py-2\">Actual Revenue</th>\n//                 <th className=\"px-3 py-2\">Forecast Revenue</th>\n//                 <th className=\"px-3 py-2\">Forecast vs Actual Revenue</th>\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {accountData.accounts.map((account) => {\n//                 const variance = account.actualRevenue - account.forecastRevenue;\n//                 return (\n//                   <tr key={account.id} style={{ backgroundColor: '#fdfdfd' }}>\n//                     <td className=\"px-3 py-2\">{account.id}</td>\n//                     <td className=\"px-3 py-2\">{account.name}</td>\n//                     <td className=\"px-3 py-2\">${account.actualRevenue.toLocaleString()}</td>\n//                     <td className=\"px-3 py-2\">${account.forecastRevenue.toLocaleString()}</td>\n//                     <td\n//                       className={`px-3 py-2 fw-semibold ${\n//                         variance > 0 ? 'text-success' : variance < 0 ? 'text-danger' : 'text-muted'\n//                       }`}\n//                     >\n//                       ${variance.toLocaleString()}\n//                     </td>\n//                     <td className=\"px-3 py-2 text-center\">\n//                       <button\n//                         onClick={() => navigate(`/accounts/${account.id}/projects`)} // Navigate to projects for this account\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                         title={`View Projects for ${account.name}`}\n//                       >\n//                         üîç\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\n//after demo after discussion for adding datatables.net\n\n// import React, { useEffect, useState } from 'react';\n\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\n\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n\n// const AccountLevel = () => {\n\n//   const navigate = useNavigate();\n\n//   const location = useLocation(); // Hook to access location state\n\n//   // State to store fetched account data\n\n//   const [accounts, setAccounts] = useState([]);\n\n//   // State for loading indicator\n\n//   const [loading, setLoading] = useState(true);\n\n//   // State for error messages\n\n//   const [error, setError] = useState(null);\n\n//   // States to keep track of the month and year for which data was last fetched\n\n//   // This helps in preventing unnecessary re-fetches and retaining context\n\n//   const [activeMonth, setActiveMonth] = useState(null);\n\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Set font family on component mount\n\n//   useEffect(() => {\n\n//     const link = document.createElement('link');\n\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n\n//     link.rel = 'stylesheet';\n\n//     document.head.appendChild(link);\n\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n\n//   }, []);\n\n//   // Effect to handle month/year state and fetch data\n\n//   useEffect(() => {\n\n//     const fetchAccountData = async (month, year) => {\n\n//       setLoading(true);\n\n//       setError(null);\n\n//       // Construct the request body as expected by your backend\n\n//       const requestBody = {\n\n//         month: month,\n\n//         year: year\n\n//       };\n\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\n\n//       try {\n\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\n\n//           method: 'POST',\n\n//           headers: {\n\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\n\n//           },\n\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\n\n//         });\n\n//         if (!response.ok) {\n\n//           const errorText = await response.text(); // Get detailed error message from backend\n\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n\n//         }\n\n//         const data = await response.json();\n\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n\n//       } catch (err) {\n\n//         console.error(\"Error fetching account data:\", err);\n\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n\n//       } finally {\n\n//         setLoading(false);\n\n//       }\n\n//     };\n\n//     // Logic to determine month and year for fetching\n\n//     let monthToUse = location.state?.month;\n\n//     let yearToUse = location.state?.year;\n\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\n\n//     if (!monthToUse || !yearToUse) {\n\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n\n//       if (storedMonth && storedYear) {\n\n//         monthToUse = parseInt(storedMonth, 10);\n\n//         yearToUse = parseInt(storedYear, 10);\n\n//       }\n\n//     }\n\n//     // If we have valid month/year, set active states and fetch data if needed\n\n//     if (monthToUse && yearToUse) {\n\n//       // Only fetch if the active month/year has changed or if accounts are empty\n\n//       // This prevents re-fetching when simply navigating back to the same view\n\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n\n//         setActiveMonth(monthToUse);\n\n//         setActiveYear(yearToUse);\n\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n\n//         fetchAccountData(monthToUse, yearToUse);\n\n//       } else {\n\n//         // Data is already present for the active month/year, no need to fetch\n\n//         setLoading(false);\n\n//       }\n\n//     } else {\n\n//       // No month/year found in state or session, show error\n\n//       setError(\"Missing month or year. Please go back and select a date.\");\n\n//       setLoading(false);\n\n//     }\n\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\n\n//   // Define breadcrumb path for Account Level\n\n//   const breadcrumbPath = [\n\n//     { name: 'PMO Dashboard', page: '' },\n\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n\n//     { name: 'Account Level', page: 'accounts' }\n\n//   ];\n\n//   // Render loading state\n\n//   if (loading) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\n\n//         </div>\n\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   // Render error state\n\n//   if (error) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n\n//         <p className=\"fs-4\">Error: {error}</p>\n\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\n\n//           Go to Upload Page\n\n//         </button>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   return (\n\n//     <div\n\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n\n//       style={{\n\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n\n//         fontFamily: \"'Poppins', sans-serif\"\n\n//       }}\n\n//     >\n\n//       <div\n\n//         className=\"card shadow p-4 p-md-5 w-100\"\n\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n\n//       >\n\n//         <Breadcrumbs path={breadcrumbPath} />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n\n//         <div className=\"table-responsive rounded\">\n\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n\n//             <thead\n\n//               className=\"text-white\"\n\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n\n//             >\n\n//               <tr>\n\n//                 <th className=\"px-3 py-2\">Account ID</th>\n\n//                 <th className=\"px-3 py-2\">Account Name</th>\n\n//                 <th className=\"px-3 py-2\">Total Projects</th>\n\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\n\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n\n//               </tr>\n\n//             </thead>\n\n//             <tbody>\n\n//               {accounts.length > 0 ? (\n\n//                 accounts.map((account) => (\n\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\n\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\n\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\n\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\n\n//                     <td className=\"px-3 py-2\">${account.totalRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n\n//                     <td className=\"px-3 py-2 text-center\">\n\n//                       <button\n\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\n\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\n\n//                           state: {\n\n//                             accountId: account.accountId, // Pass accountId explicitly\n\n//                             month: activeMonth, // Pass the active month\n\n//                             year: activeYear // Pass the active year\n\n//                           }\n\n//                         })}\n\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n\n//                         title={`View Projects for ${account.accountName}`}\n\n//                       >\n\n//                         üîç\n\n//                       </button>\n\n//                     </td>\n\n//                   </tr>\n\n//                 ))\n\n//               ) : (\n\n//                 <tr>\n\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\n\n//                     No account data found for the selected period.\n\n//                   </td>\n\n//                 </tr>\n\n//               )}\n\n//             </tbody>\n\n//           </table>\n\n//         </div>\n\n//       </div>\n\n//     </div>\n\n//   );\n\n// };\n\n// export default AccountLevel;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n// // Import your commonData.json\n// import commonData from '../../data/commonData.json';\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation(); // Hook to access location state\n\n//   // State to store fetched account data\n//   const [accounts, setAccounts] = useState([]);\n//   // State for loading indicator\n//   const [loading, setLoading] = useState(true);\n//   // State for error messages\n//   const [error, setError] = useState(null);\n//   // States to keep track of the month and year for which data was last fetched\n//   // This helps in preventing unnecessary re-fetches and retaining context\n//   const [activeMonth, setActiveMonth] = useState(null);\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Destructure your currency settings from commonData.json\n//   const {\n//     locale,\n//     currency,\n//     minimumFractionDigits,\n//     maximumFractionDigits\n//   } = commonData.currencySettings;\n\n//   // Utility to format any number to your centralized currency format\n//   const formatCurrency = (value = 0) =>\n//     value.toLocaleString(locale, {\n//       style: 'currency',\n//       currency,\n//       minimumFractionDigits,\n//       maximumFractionDigits\n//     });\n\n//   // Set font family on component mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Effect to handle month/year state and fetch data\n//   useEffect(() => {\n//     const fetchAccountData = async (month, year) => {\n//       setLoading(true);\n//       setError(null);\n//       // Construct the request body as expected by your backend\n//       const requestBody = {\n//         month: month,\n//         year: year\n//       };\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\n//       try {\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\n//           },\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\n//         });\n//         if (!response.ok) {\n//           const errorText = await response.text(); // Get detailed error message from backend\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n//         }\n//         const data = await response.json();\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n//       } catch (err) {\n//         console.error(\"Error fetching account data:\", err);\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     // Logic to determine month and year for fetching\n//     let monthToUse = location.state?.month;\n//     let yearToUse = location.state?.year;\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\n//     if (!monthToUse || !yearToUse) {\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n//       if (storedMonth && storedYear) {\n//         monthToUse = parseInt(storedMonth, 10);\n//         yearToUse = parseInt(storedYear, 10);\n//       }\n//     }\n//     // If we have valid month/year, set active states and fetch data if needed\n//     if (monthToUse && yearToUse) {\n//       // Only fetch if the active month/year has changed or if accounts are empty\n//       // This prevents re-fetching when simply navigating back to the same view\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n//         setActiveMonth(monthToUse);\n//         setActiveYear(yearToUse);\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n//         fetchAccountData(monthToUse, yearToUse);\n//       } else {\n//         // Data is already present for the active month/year, no need to fetch\n//         setLoading(false);\n//       }\n//     } else {\n//       // No month/year found in state or session, show error\n//       setError(\"Missing month or year. Please go back and select a date.\");\n//       setLoading(false);\n//     }\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\n\n//   // Define breadcrumb path for Account Level\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   // Render loading state\n//   if (loading) {\n//     return (\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\n//         </div>\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n//       </div>\n//     );\n//   }\n\n//   // Render error state\n//   if (error) {\n//     return (\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n//         <p className=\"fs-4\">Error: {error}</p>\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\n//           Go to Upload Page\n//         </button>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n//             <thead\n//               className=\"text-white\"\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//             >\n//               <tr>\n//                 <th className=\"px-3 py-2\">Account ID</th>\n//                 <th className=\"px-3 py-2\">Account Name</th>\n//                 <th className=\"px-3 py-2\">Total Projects</th>\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {accounts.length > 0 ? (\n//                 accounts.map((account) => (\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\n//                     {/* Apply the formatCurrency function here */}\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\n//                     <td className=\"px-3 py-2 text-center\">\n//                       <button\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\n//                           state: {\n//                             accountId: account.accountId, // Pass accountId explicitly\n//                             month: activeMonth, // Pass the active month\n//                             year: activeYear, // Pass the active year\n//                             accountName: account.accountName // Also pass account name for breadcrumbs in ProjectLevel\n//                           }\n//                         })}\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                         title={`View Projects for ${account.accountName}`}\n//                       >\n//                         üîç\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 ))\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\n//                     No account data found for the selected period.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs';\n// import commonData from '../../data/commonData.json';\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   const [accounts, setAccounts] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [activeMonth, setActiveMonth] = useState(null);\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   const {\n//     locale,\n//     currency,\n//     minimumFractionDigits,\n//     maximumFractionDigits\n//   } = commonData.currencySettings;\n\n//   const formatCurrency = (value = 0) =>\n//     value.toLocaleString(locale, {\n//       style: 'currency',\n//       currency,\n//       minimumFractionDigits,\n//       maximumFractionDigits\n//     });\n\n//   // Placeholder function for Download Data\n//   const handleDownloadData = () => {\n//     alert('Download Data button clicked! (Logic not yet implemented)');\n//     // Your actual CSV generation and download logic will go here later.\n//   };\n\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   useEffect(() => {\n//     const fetchAccountData = async (month, year) => {\n//       setLoading(true);\n//       setError(null);\n//       const requestBody = {\n//         month: month,\n//         year: year\n//       };\n//       console.log(\"Fetching account data with request body (POST):\", requestBody);\n//       try {\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify(requestBody),\n//         });\n//         if (!response.ok) {\n//           const errorText = await response.text();\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n//         }\n//         const data = await response.json();\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n//       } catch (err) {\n//         console.error(\"Error fetching account data:\", err);\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     let monthToUse = location.state?.month;\n//     let yearToUse = location.state?.year;\n\n//     if (!monthToUse || !yearToUse) {\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n//       if (storedMonth && storedYear) {\n//         monthToUse = parseInt(storedMonth, 10);\n//         yearToUse = parseInt(storedYear, 10);\n//       }\n//     }\n\n//     if (monthToUse && yearToUse) {\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n//         setActiveMonth(monthToUse);\n//         setActiveYear(yearToUse);\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n//         fetchAccountData(monthToUse, yearToUse);\n//       } else {\n//         setLoading(false);\n//       }\n//     } else {\n//       setError(\"Missing month or year. Please go back and select a date.\");\n//       setLoading(false);\n//     }\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\n\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   if (loading) {\n//     return (\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\n//         </div>\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n//         <p className=\"fs-4\">Error: {error}</p>\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\n//           Go to Upload Page\n//         </button>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\n//           <h2 className=\"mb-0 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n//           {/* Only the Download Data button is here now */}\n//           {accounts.length > 0 && ( // Conditionally render if there's data\n//             <div className=\"d-flex gap-2\">\n//               <button\n//                 className=\"btn btn-outline-success rounded-pill px-3\"\n//                 onClick={handleDownloadData}\n//                 title=\"Download Account Data\"\n//               >\n//                 <i className=\"bi bi-download me-2\"></i> Download Data\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n//             <thead\n//               className=\"text-white\"\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//             >\n//               <tr>\n//                 <th className=\"px-3 py-2\">Account ID</th>\n//                 <th className=\"px-3 py-2\">Account Name</th>\n//                 <th className=\"px-3 py-2\">Total Projects</th>\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {accounts.length > 0 ? (\n//                 accounts.map((account) => (\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\n//                     <td className=\"px-3 py-2 text-center\">\n//                       <button\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\n//                           state: {\n//                             accountId: account.accountId,\n//                             month: activeMonth,\n//                             year: activeYear,\n//                             accountName: account.accountName\n//                           }\n//                         })}\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                         title={`View Projects for ${account.accountName}`}\n//                       >\n//                         üîç\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 ))\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\n//                     No account data found for the selected period.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs';\n// import commonData from '../../data/commonData.json';\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   const [accounts, setAccounts] = useState([]);\n//   const [commentsMap, setCommentsMap] = useState({});\n//   const [modalVisible, setModalVisible] = useState(false);\n//   const [currentAccountId, setCurrentAccountId] = useState(null);\n//   const [commentInput, setCommentInput] = useState('');\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [activeMonth, setActiveMonth] = useState(null);\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Destructure currency settings from commonData.json\n//   const {\n//     locale,\n//     currency,\n//     minimumFractionDigits,\n//     maximumFractionDigits\n//   } = commonData.currencySettings;\n\n//   // Centralized currency formatter\n//   const formatCurrency = (value = 0) =>\n//     value.toLocaleString(locale, {\n//       style: 'currency',\n//       currency,\n//       minimumFractionDigits,\n//       maximumFractionDigits\n//     });\n\n//   // Load Poppins font on mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href =\n//       'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Fetch account data when month/year change\n//   useEffect(() => {\n//     const fetchAccountData = async (month, year) => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         const resp = await fetch(`${BACKEND_URL}/api/account`, {\n//           method: 'POST',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify({ month, year })\n//         });\n//         if (!resp.ok) {\n//           const msg = await resp.text();\n//           throw new Error(`status: ${resp.status}, message: ${msg || resp.statusText}`);\n//         }\n//         const data = await resp.json();\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n//       } catch (e) {\n//         console.error(e);\n//         setError(`Failed to load account data: ${e.message}`);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     let monthToUse = location.state?.month;\n//     let yearToUse = location.state?.year;\n\n//     if (!monthToUse || !yearToUse) {\n//       const m = sessionStorage.getItem('lastFetchedAccountMonth');\n//       const y = sessionStorage.getItem('lastFetchedAccountYear');\n//       if (m && y) {\n//         monthToUse = parseInt(m, 10);\n//         yearToUse = parseInt(y, 10);\n//       }\n//     }\n\n//     if (monthToUse && yearToUse) {\n//       if (\n//         monthToUse !== activeMonth ||\n//         yearToUse !== activeYear ||\n//         accounts.length === 0\n//       ) {\n//         setActiveMonth(monthToUse);\n//         setActiveYear(yearToUse);\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n//         fetchAccountData(monthToUse, yearToUse);\n//       } else {\n//         setLoading(false);\n//       }\n//     } else {\n//       setError('Missing month or year. Please go back and select a date.');\n//       setLoading(false);\n//     }\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\n\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   const openCommentModal = (accountId) => {\n//     setCurrentAccountId(accountId);\n//     setCommentInput(commentsMap[accountId] || '');\n//     setModalVisible(true);\n//   };\n\n//   const saveComment = () => {\n//     setCommentsMap(prev => ({\n//       ...prev,\n//       [currentAccountId]: commentInput\n//     }));\n//     setModalVisible(false);\n//   };\n\n//   const closeModal = () => {\n//     setModalVisible(false);\n//     setCommentInput('');\n//     setCurrentAccountId(null);\n//   };\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{\n//           maxWidth: '1100px',\n//           backgroundColor: '#ffffffdd',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n//           üè¢ Account Level Overview\n//         </h2>\n\n//         {loading ? (\n//           <div className=\"d-flex justify-content-center align-items-center\">\n//             <div className=\"spinner-border text-primary\" role=\"status\" />\n//             <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n//           </div>\n//         ) : error ? (\n//           <div className=\"d-flex flex-column justify-content-center align-items-center text-danger\">\n//             <p className=\"fs-4\">Error: {error}</p>\n//             <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\n//               Go to Upload Page\n//             </button>\n//           </div>\n//         ) : (\n//           <div className=\"table-responsive rounded\">\n//             <table className=\"table table-hover align-middle table-borderless mb-0\">\n//               <thead\n//                 className=\"text-white\"\n//                 style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//               >\n//                 <tr>\n//                   <th className=\"px-3 py-2\">Account ID</th>\n//                   <th className=\"px-3 py-2\">Account Name</th>\n//                   <th className=\"px-3 py-2\">Total Projects</th>\n//                   <th className=\"px-3 py-2\">Total Revenue</th>\n//                   <th className=\"px-3 py-2\">Forecast Revenue</th>\n//                   <th className=\"px-3 py-2\">Revenue Difference</th>\n//                   <th className=\"px-3 py-2 text-center\">Comment</th>\n//                   <th className=\"px-3 py-2 text-center\">View</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {accounts.length > 0 ? accounts.map(account => {\n//                   const actual = account.totalRevenue || 0;\n//                   const forecast = 0;\n//                   const difference = 0;\n//                   return (\n//                     <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\n//                       <td className=\"px-3 py-2\">{account.accountId}</td>\n//                       <td className=\"px-3 py-2\">{account.accountName}</td>\n//                       <td className=\"px-3 py-2\">{account.totalProjects}</td>\n//                       <td className=\"px-3 py-2\">{formatCurrency(actual)}</td>\n//                       <td className=\"px-3 py-2\">{formatCurrency(forecast)}</td>\n//                       <td className=\"px-3 py-2\">{formatCurrency(difference)}</td>\n//                       <td className=\"px-3 py-2 text-center\">\n//                         <button\n//                           className=\"btn btn-sm btn-outline-secondary\"\n//                           onClick={() => openCommentModal(account.accountId)}\n//                           title=\"Add/Edit comment\"\n//                         >\n//                           üí¨\n//                         </button>\n//                       </td>\n//                       <td className=\"px-3 py-2 text-center\">\n//                         <button\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                           onClick={() =>\n//                             navigate(\n//                               `/accounts/${account.accountId}/projects`,\n//                               { state: { accountId: account.accountId, month: activeMonth, year: activeYear } }\n//                             )\n//                           }\n//                           title={`View Projects for ${account.accountName}`}\n//                         >\n//                           üîç\n//                         </button>\n//                       </td>\n//                     </tr>\n//                   );\n//                 }) : (\n//                   <tr>\n//                     <td colSpan=\"8\" className=\"text-center text-muted py-4\">\n//                       No account data found for the selected period.\n//                     </td>\n//                   </tr>\n//                 )}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </div>\n\n//       {modalVisible && (\n//         <div className=\"modal fade show d-block\" style={{ backgroundColor: '#00000066' }}>\n//           <div className=\"modal-dialog modal-dialog-centered\">\n//             <div className=\"modal-content\">\n//               <div className=\"modal-header\">\n//                 <h5 className=\"modal-title\">üí¨ Comment</h5>\n//                 <button type=\"button\" className=\"btn-close\" onClick={closeModal} />\n//               </div>\n//               <div className=\"modal-body\">\n//                 <textarea\n//                   className=\"form-control\"\n//                   rows=\"4\"\n//                   placeholder=\"Enter your comment here...\"\n//                   value={commentInput}\n//                   onChange={e => setCommentInput(e.target.value)}\n//                 />\n//               </div>\n//               <div className=\"modal-footer\">\n//                 <button className=\"btn btn-secondary\" onClick={closeModal}>\n//                   Cancel\n//                 </button>\n//                 <button className=\"btn btn-primary\" onClick={saveComment}>\n//                   Save\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\n// src/components/Details/AccountLevel.js\n\n// import React, { useRef, useEffect, useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import $ from 'jquery';\n// import 'datatables.net';\n// import 'datatables.net-dt/css/dataTables.dataTables.min.css';\n// import Breadcrumbs from '../Breadcrumbs';\n// import commonData from '../../data/commonData.json';\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const tableRef = useRef(null);\n\n//   const [accounts, setAccounts]             = useState([]);\n//   const [commentsMap, setCommentsMap]       = useState({});\n//   const [modalVisible, setModalVisible]     = useState(false);\n//   const [currentAccountId, setCurrentAccountId] = useState(null);\n//   const [commentInput, setCommentInput]     = useState('');\n//   const [loading, setLoading]               = useState(true);\n//   const [error, setError]                   = useState(null);\n//   const [activeMonth, setActiveMonth]       = useState(null);\n//   const [activeYear, setActiveYear]         = useState(null);\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Currency settings\n//   const {\n//     locale,\n//     currency,\n//     minimumFractionDigits,\n//     maximumFractionDigits\n//   } = commonData.currencySettings;\n\n//   const formatCurrency = (value = 0) =>\n//     value.toLocaleString(locale, {\n//       style: 'currency',\n//       currency,\n//       minimumFractionDigits,\n//       maximumFractionDigits\n//     });\n\n//   // Load Poppins font\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href =\n//       'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Fetch data based on month/year\n//   useEffect(() => {\n//     const fetchAccountData = async (month, year) => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         const resp = await fetch(`${BACKEND_URL}/api/account`, {\n//           method: 'POST',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify({ month, year })\n//         });\n//         if (!resp.ok) {\n//           const msg = await resp.text();\n//           throw new Error(`status: ${resp.status}, message: ${msg || resp.statusText}`);\n//         }\n//         const data = await resp.json();\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n//       } catch (e) {\n//         console.error(e);\n//         setError(`Failed to load account data: ${e.message}`);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     let month = location.state?.month;\n//     let year  = location.state?.year;\n\n//     if (!month || !year) {\n//       const sm = sessionStorage.getItem('lastFetchedAccountMonth');\n//       const sy = sessionStorage.getItem('lastFetchedAccountYear');\n//       if (sm && sy) {\n//         month = parseInt(sm, 10);\n//         year  = parseInt(sy, 10);\n//       }\n//     }\n\n//     if (month && year) {\n//       if (\n//         month !== activeMonth ||\n//         year  !== activeYear ||\n//         accounts.length === 0\n//       ) {\n//         setActiveMonth(month);\n//         setActiveYear(year);\n//         sessionStorage.setItem('lastFetchedAccountMonth', month.toString());\n//         sessionStorage.setItem('lastFetchedAccountYear', year.toString());\n//         fetchAccountData(month, year);\n//       } else {\n//         setLoading(false);\n//       }\n//     } else {\n//       setError('Missing month or year. Please go back and select a date.');\n//       setLoading(false);\n//     }\n//   }, [location.state, activeMonth, activeYear, accounts.length]);\n\n//   // Initialize and destroy DataTable\n//   useEffect(() => {\n//     if (!loading && accounts.length > 0 && tableRef.current) {\n//       const $tbl = $(tableRef.current);\n//       if ($.fn.DataTable.isDataTable($tbl)) {\n//         $tbl.DataTable().destroy();\n//       }\n//       $tbl.DataTable({\n//         paging:    true,\n//         searching: true,\n//         ordering:  true,\n//         info:      true,\n//         autoWidth: false\n//       });\n//     }\n//     return () => {\n//       if (tableRef.current) {\n//         const $tbl = $(tableRef.current);\n//         if ($.fn.DataTable.isDataTable($tbl)) {\n//           $tbl.DataTable().destroy();\n//         }\n//       }\n//     };\n//   }, [loading, accounts]);\n\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   const openCommentModal = (accountId) => {\n//     setCurrentAccountId(accountId);\n//     setCommentInput(commentsMap[accountId] || '');\n//     setModalVisible(true);\n//   };\n\n//   const saveComment = () => {\n//     setCommentsMap(prev => ({\n//       ...prev,\n//       [currentAccountId]: commentInput\n//     }));\n//     setModalVisible(false);\n//   };\n\n//   const closeModal = () => {\n//     setModalVisible(false);\n//     setCommentInput('');\n//     setCurrentAccountId(null);\n//   };\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{\n//           maxWidth: '1100px',\n//           backgroundColor: '#ffffffdd',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n//           üè¢ Account Level Overview\n//         </h2>\n\n//         {loading ? (\n//           <div className=\"d-flex justify-content-center align-items-center\">\n//             <div className=\"spinner-border text-primary\" role=\"status\" />\n//             <p className=\"ms-3 text-primary\">Loading Account Data...</p>\n//           </div>\n//         ) : error ? (\n//           <div className=\"d-flex flex-column justify-content-center align-items-center text-danger\">\n//             <p className=\"fs-4\">Error: {error}</p>\n//             <button\n//               className=\"btn btn-primary mt-3\"\n//               onClick={() => navigate('/upload')}\n//             >\n//               Go to Upload Page\n//             </button>\n//           </div>\n//         ) : (\n//           <div className=\"table-responsive rounded\">\n//             <table\n//               ref={tableRef}\n//               className=\"display table table-hover align-middle table-bordered mb-0\"\n//               style={{ width: '100%' }}\n//             >\n//               <thead\n//                 className=\"text-white\"\n//                 style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//               >\n//                 <tr>\n//                   <th className=\"px-3 py-2\">Account ID</th>\n//                   <th className=\"px-3 py-2\">Account Name</th>\n//                   <th className=\"px-3 py-2\">Total Projects</th>\n//                   <th className=\"px-3 py-2\">Total Revenue</th>\n//                   <th className=\"px-3 py-2\">Forecast Revenue</th>\n//                   <th className=\"px-3 py-2\">Revenue Difference</th>\n//                   <th className=\"px-3 py-2 text-center\">Comment</th>\n//                   <th className=\"px-3 py-2 text-center\">View</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {accounts.length > 0 ? (\n//                   accounts.map(acc => (\n//                     <tr key={acc.accountId}>\n//                       <td>{acc.accountId}</td>\n//                       <td>{acc.accountName}</td>\n//                       <td>{acc.totalProjects}</td>\n//                       <td>{formatCurrency(acc.totalRevenue)}</td>\n//                       <td>{formatCurrency(0)}</td>\n//                       <td>{formatCurrency(0)}</td>\n//                       <td className=\"text-center\">\n//                         <button\n//                           className=\"btn btn-sm btn-outline-secondary\"\n//                           onClick={() => openCommentModal(acc.accountId)}\n//                         >\n//                           üí¨\n//                         </button>\n//                       </td>\n//                       <td className=\"text-center\">\n//                         <button\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                           onClick={() =>\n//                             navigate(`/accounts/${acc.accountId}/projects`, {\n//                               state: { accountId: acc.accountId, month: activeMonth, year: activeYear }\n//                             })\n//                           }\n//                         >\n//                           üîç\n//                         </button>\n//                       </td>\n//                     </tr>\n//                   ))\n//                 ) : (\n//                   <tr>\n//                     <td colSpan=\"8\" className=\"text-center text-muted py-4\">\n//                       No account data found for the selected period.\n//                     </td>\n//                   </tr>\n//                 )}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </div>\n\n//       {modalVisible && (\n//         <div className=\"modal fade show d-block\" style={{ backgroundColor: '#00000066' }}>\n//           <div className=\"modal-dialog modal-dialog-centered\">\n//             <div className=\"modal-content\">\n//               <div className=\"modal-header\">\n//                 <h5 className=\"modal-title\">üí¨ Comment</h5>\n//                 <button type=\"button\" className=\"btn-close\" onClick={closeModal} />\n//               </div>\n//               <div className=\"modal-body\">\n//                 <textarea\n//                   className=\"form-control\"\n//                   rows=\"4\"\n//                   placeholder=\"Enter your comment here...\"\n//                   value={commentInput}\n//                   onChange={e => setCommentInput(e.target.value)}\n//                 />\n//               </div>\n//               <div className=\"modal-footer\">\n//                 <button className=\"btn btn-secondary\" onClick={closeModal}>\n//                   Cancel\n//                 </button>\n//                 <button className=\"btn btn-primary\" onClick={saveComment}>\n//                   Save\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\n// src/components/Details/AccountLevel.js\n\n// src/components/Details/AccountLevel.js\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport $ from 'jquery';\nimport 'datatables.net';\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\nimport Breadcrumbs from '../Breadcrumbs';\nimport commonData from '../../data/commonData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const tableRef = useRef(null);\n\n  // UI state\n  const [accounts, setAccounts] = useState([]);\n  const [commentsMap, setCommentsMap] = useState({});\n  const [modalVisible, setModalVisible] = useState(false);\n  const [currentAccountId, setCurrentAccountId] = useState(null);\n  const [commentInput, setCommentInput] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const BACKEND_URL = 'http://localhost:8081';\n  const {\n    locale,\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  } = commonData.currencySettings;\n  const formatCurrency = (v = 0) => v.toLocaleString(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  });\n\n  // Load Poppins\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // 1) Fetch account data\n  useEffect(() => {\n    var _location$state, _location$state2;\n    const fetchAccountData = async (month, year) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const resp = await fetch(`${BACKEND_URL}/api/account`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            month,\n            year\n          })\n        });\n        if (!resp.ok) throw new Error(await resp.text());\n        const data = await resp.json();\n        setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n      } catch (e) {\n        console.error(e);\n        setError(`Failed to load accounts: ${e.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    let m = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let y = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    if (!m || !y) {\n      const sm = sessionStorage.getItem('lastFetchedAccountMonth');\n      const sy = sessionStorage.getItem('lastFetchedAccountYear');\n      if (sm && sy) {\n        m = +sm;\n        y = +sy;\n      }\n    }\n    if (m && y) {\n      if (m !== activeMonth || y !== activeYear || accounts.length === 0) {\n        setActiveMonth(m);\n        setActiveYear(y);\n        sessionStorage.setItem('lastFetchedAccountMonth', m);\n        sessionStorage.setItem('lastFetchedAccountYear', y);\n        fetchAccountData(m, y);\n      }\n    } else {\n      setError('Missing month or year.');\n      setLoading(false);\n    }\n  }, [location.state, activeMonth, activeYear, accounts.length]);\n\n  // 2) DataTables\n  useEffect(() => {\n    if (!loading && accounts.length && tableRef.current) {\n      const $tbl = $(tableRef.current);\n      if ($.fn.DataTable.isDataTable($tbl)) $tbl.DataTable().destroy();\n      $tbl.DataTable({\n        paging: true,\n        searching: true,\n        ordering: true,\n        info: true\n      });\n    }\n    return () => {\n      if (tableRef.current) {\n        const $tbl = $(tableRef.current);\n        if ($.fn.DataTable.isDataTable($tbl)) $tbl.DataTable().destroy();\n      }\n    };\n  }, [loading, accounts]);\n\n  // 3) Open the comment modal and fetch existing comment\n  const openCommentModal = async accId => {\n    setCurrentAccountId(accId);\n    setModalVisible(true);\n    try {\n      const resp = await fetch(`${BACKEND_URL}/api/account/comment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // Omit `comment` field entirely for fetch\n        body: JSON.stringify({\n          accId,\n          month: activeMonth,\n          year: activeYear\n        })\n      });\n      if (!resp.ok) throw new Error(await resp.text());\n      const result = await resp.json(); // { accId, comment, month, year }\n      setCommentInput(result.comment || '');\n      setCommentsMap(m => ({\n        ...m,\n        [accId]: result.comment || ''\n      }));\n    } catch (e) {\n      console.warn('Error fetching comment:', e.message);\n      setCommentInput('');\n    }\n  };\n\n  // 4) Save or update comment\n  const saveComment = async () => {\n    try {\n      const dto = {\n        accId: currentAccountId,\n        month: activeMonth,\n        year: activeYear,\n        comment: commentInput\n      };\n      const resp = await fetch(`${BACKEND_URL}/api/account/comment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dto)\n      });\n      if (!resp.ok) throw new Error(await resp.text());\n      setCommentsMap(m => ({\n        ...m,\n        [currentAccountId]: commentInput\n      }));\n      setModalVisible(false);\n    } catch (e) {\n      alert('Error saving comment: ' + e.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif'\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 w-100\",\n      style: {\n        maxWidth: '1100px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: [{\n          name: 'PMO Dashboard',\n          page: ''\n        }, {\n          name: 'Revenue Forecast ‚Äì Early View',\n          page: 'upload'\n        }, {\n          name: 'Account Level',\n          page: 'accounts'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1649,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4 fw-semibold text-dark\",\n        children: \"\\uD83C\\uDFE2 Account Level Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1654,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner-border text-primary\",\n          role: \"status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1660,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ms-3 text-primary\",\n          children: \"Loading Account Data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1661,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1659,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column justify-content-center align-items-center text-danger\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-4\",\n          children: [\"Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1665,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mt-3\",\n          onClick: () => navigate('/upload'),\n          children: \"Go to Upload Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1666,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1664,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          ref: tableRef,\n          className: \"display table table-hover align-middle table-bordered mb-0\",\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #1d4ed8, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Account ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1682,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Account Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1683,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Total Projects\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1684,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Total Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1685,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Forecast Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1686,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Revenue Difference\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1687,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-center\",\n                children: \"Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1688,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-center\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1689,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1681,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1677,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: accounts.map(acc => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: acc.accountId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1695,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: acc.accountName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1696,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: acc.totalProjects\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1697,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatCurrency(acc.totalRevenue)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1698,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatCurrency(0)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1699,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatCurrency(0)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1700,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-sm btn-outline-secondary\",\n                  onClick: () => openCommentModal(acc.accountId),\n                  children: \"\\uD83D\\uDCAC\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1702,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1701,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-sm btn-outline-primary rounded-circle\",\n                  onClick: () => navigate(`/accounts/${acc.accountId}/projects`, {\n                    state: {\n                      accountId: acc.accountId,\n                      month: activeMonth,\n                      year: activeYear\n                    }\n                  }),\n                  children: \"\\uD83D\\uDD0D\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1710,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1709,\n                columnNumber: 21\n              }, this)]\n            }, acc.accountId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1694,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1692,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1672,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1671,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1641,\n      columnNumber: 7\n    }, this), modalVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal fade show d-block\",\n      style: {\n        backgroundColor: '#00000066'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog modal-dialog-centered\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              children: [\"\\uD83D\\uDCAC Comment for \", currentAccountId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1738,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn-close\",\n              onClick: () => setModalVisible(false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1741,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1737,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              rows: \"4\",\n              value: commentInput,\n              onChange: e => setCommentInput(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1748,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1747,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-secondary\",\n              onClick: () => setModalVisible(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1756,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              onClick: saveComment,\n              disabled: !commentInput.trim(),\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1759,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1755,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1736,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1735,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1734,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1634,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountLevel, \"AJoWl2Aj3LoMO3ajZGJY1/pKGCA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AccountLevel;\nexport default AccountLevel;\nvar _c;\n$RefreshReg$(_c, \"AccountLevel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","useLocation","$","Breadcrumbs","commonData","jsxDEV","_jsxDEV","AccountLevel","_s","navigate","location","tableRef","accounts","setAccounts","commentsMap","setCommentsMap","modalVisible","setModalVisible","currentAccountId","setCurrentAccountId","commentInput","setCommentInput","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","BACKEND_URL","locale","currency","minimumFractionDigits","maximumFractionDigits","currencySettings","formatCurrency","v","toLocaleString","style","link","document","createElement","href","rel","head","appendChild","body","fontFamily","_location$state","_location$state2","fetchAccountData","month","year","resp","fetch","method","headers","JSON","stringify","ok","Error","text","data","json","Array","isArray","filter","Boolean","e","console","message","m","state","y","sm","sessionStorage","getItem","sy","length","setItem","current","$tbl","fn","DataTable","isDataTable","destroy","paging","searching","ordering","info","openCommentModal","accId","result","comment","warn","saveComment","dto","alert","className","background","children","maxWidth","backgroundColor","borderRadius","path","name","page","fileName","_jsxFileName","lineNumber","columnNumber","role","onClick","ref","width","map","acc","accountId","accountName","totalProjects","totalRevenue","type","rows","value","onChange","target","disabled","trim","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/AccountLevel.js"],"sourcesContent":["// import React, { useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\r\n// import accountData from '../../data/accountData.json'; // CORRECTED PATH: data is two levels up\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n\r\n//   // Set font family on component mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Define breadcrumb path for Account Level\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//             <thead\r\n//               className=\"text-white\"\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//             >\r\n//               <tr>\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n//                 <th className=\"px-3 py-2\">Actual Revenue</th>\r\n//                 <th className=\"px-3 py-2\">Forecast Revenue</th>\r\n//                 <th className=\"px-3 py-2\">Forecast vs Actual Revenue</th>\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {accountData.accounts.map((account) => {\r\n//                 const variance = account.actualRevenue - account.forecastRevenue;\r\n//                 return (\r\n//                   <tr key={account.id} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                     <td className=\"px-3 py-2\">{account.id}</td>\r\n//                     <td className=\"px-3 py-2\">{account.name}</td>\r\n//                     <td className=\"px-3 py-2\">${account.actualRevenue.toLocaleString()}</td>\r\n//                     <td className=\"px-3 py-2\">${account.forecastRevenue.toLocaleString()}</td>\r\n//                     <td\r\n//                       className={`px-3 py-2 fw-semibold ${\r\n//                         variance > 0 ? 'text-success' : variance < 0 ? 'text-danger' : 'text-muted'\r\n//                       }`}\r\n//                     >\r\n//                       ${variance.toLocaleString()}\r\n//                     </td>\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n//                       <button\r\n//                         onClick={() => navigate(`/accounts/${account.id}/projects`)} // Navigate to projects for this account\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                         title={`View Projects for ${account.name}`}\r\n//                       >\r\n//                         üîç\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 );\r\n//               })}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n//after demo after discussion for adding datatables.net\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\r\n\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\n// const AccountLevel = () => {\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State to store fetched account data\r\n\r\n//   const [accounts, setAccounts] = useState([]);\r\n\r\n//   // State for loading indicator\r\n\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // State for error messages\r\n\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // States to keep track of the month and year for which data was last fetched\r\n\r\n//   // This helps in preventing unnecessary re-fetches and retaining context\r\n\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Set font family on component mount\r\n\r\n//   useEffect(() => {\r\n\r\n//     const link = document.createElement('link');\r\n\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n\r\n//     link.rel = 'stylesheet';\r\n\r\n//     document.head.appendChild(link);\r\n\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n//   }, []);\r\n\r\n//   // Effect to handle month/year state and fetch data\r\n\r\n//   useEffect(() => {\r\n\r\n//     const fetchAccountData = async (month, year) => {\r\n\r\n//       setLoading(true);\r\n\r\n//       setError(null);\r\n\r\n//       // Construct the request body as expected by your backend\r\n\r\n//       const requestBody = {\r\n\r\n//         month: month,\r\n\r\n//         year: year\r\n\r\n//       };\r\n\r\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\r\n\r\n//       try {\r\n\r\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n\r\n//           method: 'POST',\r\n\r\n//           headers: {\r\n\r\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\r\n\r\n//           },\r\n\r\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\r\n\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n\r\n//           const errorText = await response.text(); // Get detailed error message from backend\r\n\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n\r\n//         }\r\n\r\n//         const data = await response.json();\r\n\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n\r\n//       } catch (err) {\r\n\r\n//         console.error(\"Error fetching account data:\", err);\r\n\r\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n\r\n//       } finally {\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     };\r\n\r\n//     // Logic to determine month and year for fetching\r\n\r\n//     let monthToUse = location.state?.month;\r\n\r\n//     let yearToUse = location.state?.year;\r\n\r\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\r\n\r\n//     if (!monthToUse || !yearToUse) {\r\n\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n\r\n//       if (storedMonth && storedYear) {\r\n\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n\r\n//         yearToUse = parseInt(storedYear, 10);\r\n\r\n//       }\r\n\r\n//     }\r\n\r\n//     // If we have valid month/year, set active states and fetch data if needed\r\n\r\n//     if (monthToUse && yearToUse) {\r\n\r\n//       // Only fetch if the active month/year has changed or if accounts are empty\r\n\r\n//       // This prevents re-fetching when simply navigating back to the same view\r\n\r\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n\r\n//         setActiveMonth(monthToUse);\r\n\r\n//         setActiveYear(yearToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n\r\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n\r\n//         fetchAccountData(monthToUse, yearToUse);\r\n\r\n//       } else {\r\n\r\n//         // Data is already present for the active month/year, no need to fetch\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     } else {\r\n\r\n//       // No month/year found in state or session, show error\r\n\r\n//       setError(\"Missing month or year. Please go back and select a date.\");\r\n\r\n//       setLoading(false);\r\n\r\n//     }\r\n\r\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\r\n\r\n//   // Define breadcrumb path for Account Level\r\n\r\n//   const breadcrumbPath = [\r\n\r\n//     { name: 'PMO Dashboard', page: '' },\r\n\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n\r\n//     { name: 'Account Level', page: 'accounts' }\r\n\r\n//   ];\r\n\r\n//   // Render loading state\r\n\r\n//   if (loading) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n\r\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\r\n\r\n//         </div>\r\n\r\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   // Render error state\r\n\r\n//   if (error) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n\r\n//           Go to Upload Page\r\n\r\n//         </button>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   return (\r\n\r\n//     <div\r\n\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n\r\n//       style={{\r\n\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n\r\n//       }}\r\n\r\n//     >\r\n\r\n//       <div\r\n\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n\r\n//       >\r\n\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n\r\n//             <thead\r\n\r\n//               className=\"text-white\"\r\n\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n\r\n//             >\r\n\r\n//               <tr>\r\n\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Total Projects</th>\r\n\r\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\r\n\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n\r\n//               </tr>\r\n\r\n//             </thead>\r\n\r\n//             <tbody>\r\n\r\n//               {accounts.length > 0 ? (\r\n\r\n//                 accounts.map((account) => (\r\n\r\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n\r\n//                     <td className=\"px-3 py-2\">${account.totalRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n\r\n//                       <button\r\n\r\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\r\n\r\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n\r\n//                           state: {\r\n\r\n//                             accountId: account.accountId, // Pass accountId explicitly\r\n\r\n//                             month: activeMonth, // Pass the active month\r\n\r\n//                             year: activeYear // Pass the active year\r\n\r\n//                           }\r\n\r\n//                         })}\r\n\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n\r\n//                         title={`View Projects for ${account.accountName}`}\r\n\r\n//                       >\r\n\r\n//                         üîç\r\n\r\n//                       </button>\r\n\r\n//                     </td>\r\n\r\n//                   </tr>\r\n\r\n//                 ))\r\n\r\n//               ) : (\r\n\r\n//                 <tr>\r\n\r\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\r\n\r\n//                     No account data found for the selected period.\r\n\r\n//                   </td>\r\n\r\n//                 </tr>\r\n\r\n//               )}\r\n\r\n//             </tbody>\r\n\r\n//           </table>\r\n\r\n//         </div>\r\n\r\n//       </div>\r\n\r\n//     </div>\r\n\r\n//   );\r\n\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n// // Import your commonData.json\r\n// import commonData from '../../data/commonData.json';\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State to store fetched account data\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   // State for loading indicator\r\n//   const [loading, setLoading] = useState(true);\r\n//   // State for error messages\r\n//   const [error, setError] = useState(null);\r\n//   // States to keep track of the month and year for which data was last fetched\r\n//   // This helps in preventing unnecessary re-fetches and retaining context\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Destructure your currency settings from commonData.json\r\n//   const {\r\n//     locale,\r\n//     currency,\r\n//     minimumFractionDigits,\r\n//     maximumFractionDigits\r\n//   } = commonData.currencySettings;\r\n\r\n//   // Utility to format any number to your centralized currency format\r\n//   const formatCurrency = (value = 0) =>\r\n//     value.toLocaleString(locale, {\r\n//       style: 'currency',\r\n//       currency,\r\n//       minimumFractionDigits,\r\n//       maximumFractionDigits\r\n//     });\r\n\r\n\r\n//   // Set font family on component mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Effect to handle month/year state and fetch data\r\n//   useEffect(() => {\r\n//     const fetchAccountData = async (month, year) => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       // Construct the request body as expected by your backend\r\n//       const requestBody = {\r\n//         month: month,\r\n//         year: year\r\n//       };\r\n//       console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\r\n//       try {\r\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json', // Specify that we are sending JSON\r\n//           },\r\n//           body: JSON.stringify(requestBody), // Send the month and year in the body\r\n//         });\r\n//         if (!response.ok) {\r\n//           const errorText = await response.text(); // Get detailed error message from backend\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n//         }\r\n//         const data = await response.json();\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching account data:\", err);\r\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n//     // Logic to determine month and year for fetching\r\n//     let monthToUse = location.state?.month;\r\n//     let yearToUse = location.state?.year;\r\n//     // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\r\n//     if (!monthToUse || !yearToUse) {\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n//       if (storedMonth && storedYear) {\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n//         yearToUse = parseInt(storedYear, 10);\r\n//       }\r\n//     }\r\n//     // If we have valid month/year, set active states and fetch data if needed\r\n//     if (monthToUse && yearToUse) {\r\n//       // Only fetch if the active month/year has changed or if accounts are empty\r\n//       // This prevents re-fetching when simply navigating back to the same view\r\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n//         setActiveMonth(monthToUse);\r\n//         setActiveYear(yearToUse);\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n//         fetchAccountData(monthToUse, yearToUse);\r\n//       } else {\r\n//         // Data is already present for the active month/year, no need to fetch\r\n//         setLoading(false);\r\n//       }\r\n//     } else {\r\n//       // No month/year found in state or session, show error\r\n//       setError(\"Missing month or year. Please go back and select a date.\");\r\n//       setLoading(false);\r\n//     }\r\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\r\n\r\n//   // Define breadcrumb path for Account Level\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   // Render loading state\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\r\n//         </div>\r\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // Render error state\r\n//   if (error) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n//           Go to Upload Page\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//             <thead\r\n//               className=\"text-white\"\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//             >\r\n//               <tr>\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n//                 <th className=\"px-3 py-2\">Total Projects</th>\r\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {accounts.length > 0 ? (\r\n//                 accounts.map((account) => (\r\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\r\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\r\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n//                     {/* Apply the formatCurrency function here */}\r\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n//                       <button\r\n//                         // Navigate to ProjectLevel, passing accountId, month, and year\r\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n//                           state: {\r\n//                             accountId: account.accountId, // Pass accountId explicitly\r\n//                             month: activeMonth, // Pass the active month\r\n//                             year: activeYear, // Pass the active year\r\n//                             accountName: account.accountName // Also pass account name for breadcrumbs in ProjectLevel\r\n//                           }\r\n//                         })}\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                         title={`View Projects for ${account.accountName}`}\r\n//                       >\r\n//                         üîç\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\r\n//                     No account data found for the selected period.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs';\r\n// import commonData from '../../data/commonData.json';\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   const {\r\n//     locale,\r\n//     currency,\r\n//     minimumFractionDigits,\r\n//     maximumFractionDigits\r\n//   } = commonData.currencySettings;\r\n\r\n//   const formatCurrency = (value = 0) =>\r\n//     value.toLocaleString(locale, {\r\n//       style: 'currency',\r\n//       currency,\r\n//       minimumFractionDigits,\r\n//       maximumFractionDigits\r\n//     });\r\n\r\n//   // Placeholder function for Download Data\r\n//   const handleDownloadData = () => {\r\n//     alert('Download Data button clicked! (Logic not yet implemented)');\r\n//     // Your actual CSV generation and download logic will go here later.\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const fetchAccountData = async (month, year) => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       const requestBody = {\r\n//         month: month,\r\n//         year: year\r\n//       };\r\n//       console.log(\"Fetching account data with request body (POST):\", requestBody);\r\n//       try {\r\n//         const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//           body: JSON.stringify(requestBody),\r\n//         });\r\n//         if (!response.ok) {\r\n//           const errorText = await response.text();\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n//         }\r\n//         const data = await response.json();\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching account data:\", err);\r\n//         setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     let monthToUse = location.state?.month;\r\n//     let yearToUse = location.state?.year;\r\n\r\n//     if (!monthToUse || !yearToUse) {\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n//       if (storedMonth && storedYear) {\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n//         yearToUse = parseInt(storedYear, 10);\r\n//       }\r\n//     }\r\n\r\n//     if (monthToUse && yearToUse) {\r\n//       if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n//         setActiveMonth(monthToUse);\r\n//         setActiveYear(yearToUse);\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n//         fetchAccountData(monthToUse, yearToUse);\r\n//       } else {\r\n//         setLoading(false);\r\n//       }\r\n//     } else {\r\n//       setError(\"Missing month or year. Please go back and select a date.\");\r\n//       setLoading(false);\r\n//     }\r\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\r\n\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n//           <span className=\"visually-hidden\">Loading Account Data...</span>\r\n//         </div>\r\n//         <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (error) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n//           Go to Upload Page\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n//           <h2 className=\"mb-0 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n//           {/* Only the Download Data button is here now */}\r\n//           {accounts.length > 0 && ( // Conditionally render if there's data\r\n//             <div className=\"d-flex gap-2\">\r\n//               <button\r\n//                 className=\"btn btn-outline-success rounded-pill px-3\"\r\n//                 onClick={handleDownloadData}\r\n//                 title=\"Download Account Data\"\r\n//               >\r\n//                 <i className=\"bi bi-download me-2\"></i> Download Data\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//             <thead\r\n//               className=\"text-white\"\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//             >\r\n//               <tr>\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n//                 <th className=\"px-3 py-2\">Total Projects</th>\r\n//                 <th className=\"px-3 py-2\">Total Revenue</th>\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {accounts.length > 0 ? (\r\n//                 accounts.map((account) => (\r\n//                   <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                     <td className=\"px-3 py-2\">{account.accountId}</td>\r\n//                     <td className=\"px-3 py-2\">{account.accountName}</td>\r\n//                     <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n//                     <td className=\"px-3 py-2\">{formatCurrency(account.totalRevenue)}</td>\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n//                       <button\r\n//                         onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n//                           state: {\r\n//                             accountId: account.accountId,\r\n//                             month: activeMonth,\r\n//                             year: activeYear,\r\n//                             accountName: account.accountName\r\n//                           }\r\n//                         })}\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                         title={`View Projects for ${account.accountName}`}\r\n//                       >\r\n//                         üîç\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"5\" className=\"text-center text-muted py-4\">\r\n//                     No account data found for the selected period.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs';\r\n// import commonData from '../../data/commonData.json';\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n\r\n//   const [accounts, setAccounts] = useState([]);\r\n//   const [commentsMap, setCommentsMap] = useState({});\r\n//   const [modalVisible, setModalVisible] = useState(false);\r\n//   const [currentAccountId, setCurrentAccountId] = useState(null);\r\n//   const [commentInput, setCommentInput] = useState('');\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Destructure currency settings from commonData.json\r\n//   const {\r\n//     locale,\r\n//     currency,\r\n//     minimumFractionDigits,\r\n//     maximumFractionDigits\r\n//   } = commonData.currencySettings;\r\n\r\n//   // Centralized currency formatter\r\n//   const formatCurrency = (value = 0) =>\r\n//     value.toLocaleString(locale, {\r\n//       style: 'currency',\r\n//       currency,\r\n//       minimumFractionDigits,\r\n//       maximumFractionDigits\r\n//     });\r\n\r\n//   // Load Poppins font on mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href =\r\n//       'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Fetch account data when month/year change\r\n//   useEffect(() => {\r\n//     const fetchAccountData = async (month, year) => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         const resp = await fetch(`${BACKEND_URL}/api/account`, {\r\n//           method: 'POST',\r\n//           headers: { 'Content-Type': 'application/json' },\r\n//           body: JSON.stringify({ month, year })\r\n//         });\r\n//         if (!resp.ok) {\r\n//           const msg = await resp.text();\r\n//           throw new Error(`status: ${resp.status}, message: ${msg || resp.statusText}`);\r\n//         }\r\n//         const data = await resp.json();\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n//       } catch (e) {\r\n//         console.error(e);\r\n//         setError(`Failed to load account data: ${e.message}`);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     let monthToUse = location.state?.month;\r\n//     let yearToUse = location.state?.year;\r\n\r\n//     if (!monthToUse || !yearToUse) {\r\n//       const m = sessionStorage.getItem('lastFetchedAccountMonth');\r\n//       const y = sessionStorage.getItem('lastFetchedAccountYear');\r\n//       if (m && y) {\r\n//         monthToUse = parseInt(m, 10);\r\n//         yearToUse = parseInt(y, 10);\r\n//       }\r\n//     }\r\n\r\n//     if (monthToUse && yearToUse) {\r\n//       if (\r\n//         monthToUse !== activeMonth ||\r\n//         yearToUse !== activeYear ||\r\n//         accounts.length === 0\r\n//       ) {\r\n//         setActiveMonth(monthToUse);\r\n//         setActiveYear(yearToUse);\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n//         sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n//         fetchAccountData(monthToUse, yearToUse);\r\n//       } else {\r\n//         setLoading(false);\r\n//       }\r\n//     } else {\r\n//       setError('Missing month or year. Please go back and select a date.');\r\n//       setLoading(false);\r\n//     }\r\n//   }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]);\r\n\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   const openCommentModal = (accountId) => {\r\n//     setCurrentAccountId(accountId);\r\n//     setCommentInput(commentsMap[accountId] || '');\r\n//     setModalVisible(true);\r\n//   };\r\n\r\n//   const saveComment = () => {\r\n//     setCommentsMap(prev => ({\r\n//       ...prev,\r\n//       [currentAccountId]: commentInput\r\n//     }));\r\n//     setModalVisible(false);\r\n//   };\r\n\r\n//   const closeModal = () => {\r\n//     setModalVisible(false);\r\n//     setCommentInput('');\r\n//     setCurrentAccountId(null);\r\n//   };\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{\r\n//           maxWidth: '1100px',\r\n//           backgroundColor: '#ffffffdd',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n//           üè¢ Account Level Overview\r\n//         </h2>\r\n\r\n//         {loading ? (\r\n//           <div className=\"d-flex justify-content-center align-items-center\">\r\n//             <div className=\"spinner-border text-primary\" role=\"status\" />\r\n//             <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n//           </div>\r\n//         ) : error ? (\r\n//           <div className=\"d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//             <p className=\"fs-4\">Error: {error}</p>\r\n//             <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n//               Go to Upload Page\r\n//             </button>\r\n//           </div>\r\n//         ) : (\r\n//           <div className=\"table-responsive rounded\">\r\n//             <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//               <thead\r\n//                 className=\"text-white\"\r\n//                 style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//               >\r\n//                 <tr>\r\n//                   <th className=\"px-3 py-2\">Account ID</th>\r\n//                   <th className=\"px-3 py-2\">Account Name</th>\r\n//                   <th className=\"px-3 py-2\">Total Projects</th>\r\n//                   <th className=\"px-3 py-2\">Total Revenue</th>\r\n//                   <th className=\"px-3 py-2\">Forecast Revenue</th>\r\n//                   <th className=\"px-3 py-2\">Revenue Difference</th>\r\n//                   <th className=\"px-3 py-2 text-center\">Comment</th>\r\n//                   <th className=\"px-3 py-2 text-center\">View</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {accounts.length > 0 ? accounts.map(account => {\r\n//                   const actual = account.totalRevenue || 0;\r\n//                   const forecast = 0;\r\n//                   const difference = 0;\r\n//                   return (\r\n//                     <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                       <td className=\"px-3 py-2\">{account.accountId}</td>\r\n//                       <td className=\"px-3 py-2\">{account.accountName}</td>\r\n//                       <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n//                       <td className=\"px-3 py-2\">{formatCurrency(actual)}</td>\r\n//                       <td className=\"px-3 py-2\">{formatCurrency(forecast)}</td>\r\n//                       <td className=\"px-3 py-2\">{formatCurrency(difference)}</td>\r\n//                       <td className=\"px-3 py-2 text-center\">\r\n//                         <button\r\n//                           className=\"btn btn-sm btn-outline-secondary\"\r\n//                           onClick={() => openCommentModal(account.accountId)}\r\n//                           title=\"Add/Edit comment\"\r\n//                         >\r\n//                           üí¨\r\n//                         </button>\r\n//                       </td>\r\n//                       <td className=\"px-3 py-2 text-center\">\r\n//                         <button\r\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                           onClick={() =>\r\n//                             navigate(\r\n//                               `/accounts/${account.accountId}/projects`,\r\n//                               { state: { accountId: account.accountId, month: activeMonth, year: activeYear } }\r\n//                             )\r\n//                           }\r\n//                           title={`View Projects for ${account.accountName}`}\r\n//                         >\r\n//                           üîç\r\n//                         </button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   );\r\n//                 }) : (\r\n//                   <tr>\r\n//                     <td colSpan=\"8\" className=\"text-center text-muted py-4\">\r\n//                       No account data found for the selected period.\r\n//                     </td>\r\n//                   </tr>\r\n//                 )}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {modalVisible && (\r\n//         <div className=\"modal fade show d-block\" style={{ backgroundColor: '#00000066' }}>\r\n//           <div className=\"modal-dialog modal-dialog-centered\">\r\n//             <div className=\"modal-content\">\r\n//               <div className=\"modal-header\">\r\n//                 <h5 className=\"modal-title\">üí¨ Comment</h5>\r\n//                 <button type=\"button\" className=\"btn-close\" onClick={closeModal} />\r\n//               </div>\r\n//               <div className=\"modal-body\">\r\n//                 <textarea\r\n//                   className=\"form-control\"\r\n//                   rows=\"4\"\r\n//                   placeholder=\"Enter your comment here...\"\r\n//                   value={commentInput}\r\n//                   onChange={e => setCommentInput(e.target.value)}\r\n//                 />\r\n//               </div>\r\n//               <div className=\"modal-footer\">\r\n//                 <button className=\"btn btn-secondary\" onClick={closeModal}>\r\n//                   Cancel\r\n//                 </button>\r\n//                 <button className=\"btn btn-primary\" onClick={saveComment}>\r\n//                   Save\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n// src/components/Details/AccountLevel.js\r\n\r\n// import React, { useRef, useEffect, useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import $ from 'jquery';\r\n// import 'datatables.net';\r\n// import 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\n// import Breadcrumbs from '../Breadcrumbs';\r\n// import commonData from '../../data/commonData.json';\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n//   const tableRef = useRef(null);\r\n\r\n//   const [accounts, setAccounts]             = useState([]);\r\n//   const [commentsMap, setCommentsMap]       = useState({});\r\n//   const [modalVisible, setModalVisible]     = useState(false);\r\n//   const [currentAccountId, setCurrentAccountId] = useState(null);\r\n//   const [commentInput, setCommentInput]     = useState('');\r\n//   const [loading, setLoading]               = useState(true);\r\n//   const [error, setError]                   = useState(null);\r\n//   const [activeMonth, setActiveMonth]       = useState(null);\r\n//   const [activeYear, setActiveYear]         = useState(null);\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Currency settings\r\n//   const {\r\n//     locale,\r\n//     currency,\r\n//     minimumFractionDigits,\r\n//     maximumFractionDigits\r\n//   } = commonData.currencySettings;\r\n\r\n//   const formatCurrency = (value = 0) =>\r\n//     value.toLocaleString(locale, {\r\n//       style: 'currency',\r\n//       currency,\r\n//       minimumFractionDigits,\r\n//       maximumFractionDigits\r\n//     });\r\n\r\n//   // Load Poppins font\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href =\r\n//       'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Fetch data based on month/year\r\n//   useEffect(() => {\r\n//     const fetchAccountData = async (month, year) => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         const resp = await fetch(`${BACKEND_URL}/api/account`, {\r\n//           method: 'POST',\r\n//           headers: { 'Content-Type': 'application/json' },\r\n//           body: JSON.stringify({ month, year })\r\n//         });\r\n//         if (!resp.ok) {\r\n//           const msg = await resp.text();\r\n//           throw new Error(`status: ${resp.status}, message: ${msg || resp.statusText}`);\r\n//         }\r\n//         const data = await resp.json();\r\n//         setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n//       } catch (e) {\r\n//         console.error(e);\r\n//         setError(`Failed to load account data: ${e.message}`);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     let month = location.state?.month;\r\n//     let year  = location.state?.year;\r\n\r\n//     if (!month || !year) {\r\n//       const sm = sessionStorage.getItem('lastFetchedAccountMonth');\r\n//       const sy = sessionStorage.getItem('lastFetchedAccountYear');\r\n//       if (sm && sy) {\r\n//         month = parseInt(sm, 10);\r\n//         year  = parseInt(sy, 10);\r\n//       }\r\n//     }\r\n\r\n//     if (month && year) {\r\n//       if (\r\n//         month !== activeMonth ||\r\n//         year  !== activeYear ||\r\n//         accounts.length === 0\r\n//       ) {\r\n//         setActiveMonth(month);\r\n//         setActiveYear(year);\r\n//         sessionStorage.setItem('lastFetchedAccountMonth', month.toString());\r\n//         sessionStorage.setItem('lastFetchedAccountYear', year.toString());\r\n//         fetchAccountData(month, year);\r\n//       } else {\r\n//         setLoading(false);\r\n//       }\r\n//     } else {\r\n//       setError('Missing month or year. Please go back and select a date.');\r\n//       setLoading(false);\r\n//     }\r\n//   }, [location.state, activeMonth, activeYear, accounts.length]);\r\n\r\n//   // Initialize and destroy DataTable\r\n//   useEffect(() => {\r\n//     if (!loading && accounts.length > 0 && tableRef.current) {\r\n//       const $tbl = $(tableRef.current);\r\n//       if ($.fn.DataTable.isDataTable($tbl)) {\r\n//         $tbl.DataTable().destroy();\r\n//       }\r\n//       $tbl.DataTable({\r\n//         paging:    true,\r\n//         searching: true,\r\n//         ordering:  true,\r\n//         info:      true,\r\n//         autoWidth: false\r\n//       });\r\n//     }\r\n//     return () => {\r\n//       if (tableRef.current) {\r\n//         const $tbl = $(tableRef.current);\r\n//         if ($.fn.DataTable.isDataTable($tbl)) {\r\n//           $tbl.DataTable().destroy();\r\n//         }\r\n//       }\r\n//     };\r\n//   }, [loading, accounts]);\r\n\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   const openCommentModal = (accountId) => {\r\n//     setCurrentAccountId(accountId);\r\n//     setCommentInput(commentsMap[accountId] || '');\r\n//     setModalVisible(true);\r\n//   };\r\n\r\n//   const saveComment = () => {\r\n//     setCommentsMap(prev => ({\r\n//       ...prev,\r\n//       [currentAccountId]: commentInput\r\n//     }));\r\n//     setModalVisible(false);\r\n//   };\r\n\r\n//   const closeModal = () => {\r\n//     setModalVisible(false);\r\n//     setCommentInput('');\r\n//     setCurrentAccountId(null);\r\n//   };\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{\r\n//           maxWidth: '1100px',\r\n//           backgroundColor: '#ffffffdd',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n//           üè¢ Account Level Overview\r\n//         </h2>\r\n\r\n//         {loading ? (\r\n//           <div className=\"d-flex justify-content-center align-items-center\">\r\n//             <div className=\"spinner-border text-primary\" role=\"status\" />\r\n//             <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n//           </div>\r\n//         ) : error ? (\r\n//           <div className=\"d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//             <p className=\"fs-4\">Error: {error}</p>\r\n//             <button\r\n//               className=\"btn btn-primary mt-3\"\r\n//               onClick={() => navigate('/upload')}\r\n//             >\r\n//               Go to Upload Page\r\n//             </button>\r\n//           </div>\r\n//         ) : (\r\n//           <div className=\"table-responsive rounded\">\r\n//             <table\r\n//               ref={tableRef}\r\n//               className=\"display table table-hover align-middle table-bordered mb-0\"\r\n//               style={{ width: '100%' }}\r\n//             >\r\n//               <thead\r\n//                 className=\"text-white\"\r\n//                 style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//               >\r\n//                 <tr>\r\n//                   <th className=\"px-3 py-2\">Account ID</th>\r\n//                   <th className=\"px-3 py-2\">Account Name</th>\r\n//                   <th className=\"px-3 py-2\">Total Projects</th>\r\n//                   <th className=\"px-3 py-2\">Total Revenue</th>\r\n//                   <th className=\"px-3 py-2\">Forecast Revenue</th>\r\n//                   <th className=\"px-3 py-2\">Revenue Difference</th>\r\n//                   <th className=\"px-3 py-2 text-center\">Comment</th>\r\n//                   <th className=\"px-3 py-2 text-center\">View</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {accounts.length > 0 ? (\r\n//                   accounts.map(acc => (\r\n//                     <tr key={acc.accountId}>\r\n//                       <td>{acc.accountId}</td>\r\n//                       <td>{acc.accountName}</td>\r\n//                       <td>{acc.totalProjects}</td>\r\n//                       <td>{formatCurrency(acc.totalRevenue)}</td>\r\n//                       <td>{formatCurrency(0)}</td>\r\n//                       <td>{formatCurrency(0)}</td>\r\n//                       <td className=\"text-center\">\r\n//                         <button\r\n//                           className=\"btn btn-sm btn-outline-secondary\"\r\n//                           onClick={() => openCommentModal(acc.accountId)}\r\n//                         >\r\n//                           üí¨\r\n//                         </button>\r\n//                       </td>\r\n//                       <td className=\"text-center\">\r\n//                         <button\r\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                           onClick={() =>\r\n//                             navigate(`/accounts/${acc.accountId}/projects`, {\r\n//                               state: { accountId: acc.accountId, month: activeMonth, year: activeYear }\r\n//                             })\r\n//                           }\r\n//                         >\r\n//                           üîç\r\n//                         </button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   ))\r\n//                 ) : (\r\n//                   <tr>\r\n//                     <td colSpan=\"8\" className=\"text-center text-muted py-4\">\r\n//                       No account data found for the selected period.\r\n//                     </td>\r\n//                   </tr>\r\n//                 )}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {modalVisible && (\r\n//         <div className=\"modal fade show d-block\" style={{ backgroundColor: '#00000066' }}>\r\n//           <div className=\"modal-dialog modal-dialog-centered\">\r\n//             <div className=\"modal-content\">\r\n//               <div className=\"modal-header\">\r\n//                 <h5 className=\"modal-title\">üí¨ Comment</h5>\r\n//                 <button type=\"button\" className=\"btn-close\" onClick={closeModal} />\r\n//               </div>\r\n//               <div className=\"modal-body\">\r\n//                 <textarea\r\n//                   className=\"form-control\"\r\n//                   rows=\"4\"\r\n//                   placeholder=\"Enter your comment here...\"\r\n//                   value={commentInput}\r\n//                   onChange={e => setCommentInput(e.target.value)}\r\n//                 />\r\n//               </div>\r\n//               <div className=\"modal-footer\">\r\n//                 <button className=\"btn btn-secondary\" onClick={closeModal}>\r\n//                   Cancel\r\n//                 </button>\r\n//                 <button className=\"btn btn-primary\" onClick={saveComment}>\r\n//                   Save\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n// src/components/Details/AccountLevel.js\r\n\r\n// src/components/Details/AccountLevel.js\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation }           from 'react-router-dom';\r\nimport $                                      from 'jquery';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\nimport Breadcrumbs                            from '../Breadcrumbs';\r\nimport commonData                             from '../../data/commonData.json';\r\n\r\nconst AccountLevel = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const tableRef = useRef(null);\r\n\r\n  // UI state\r\n  const [accounts, setAccounts]               = useState([]);\r\n  const [commentsMap, setCommentsMap]         = useState({});\r\n  const [modalVisible, setModalVisible]       = useState(false);\r\n  const [currentAccountId, setCurrentAccountId] = useState(null);\r\n  const [commentInput, setCommentInput]       = useState('');\r\n  const [loading, setLoading]                 = useState(true);\r\n  const [error, setError]                     = useState(null);\r\n  const [activeMonth, setActiveMonth]         = useState(null);\r\n  const [activeYear, setActiveYear]           = useState(null);\r\n\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n  const { locale, currency, minimumFractionDigits, maximumFractionDigits } =\r\n    commonData.currencySettings;\r\n\r\n  const formatCurrency = (v = 0) =>\r\n    v.toLocaleString(locale, {\r\n      style: 'currency',\r\n      currency,\r\n      minimumFractionDigits,\r\n      maximumFractionDigits\r\n    });\r\n\r\n  // Load Poppins\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href =\r\n      'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // 1) Fetch account data\r\n  useEffect(() => {\r\n    const fetchAccountData = async (month, year) => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const resp = await fetch(`${BACKEND_URL}/api/account`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ month, year })\r\n        });\r\n        if (!resp.ok) throw new Error(await resp.text());\r\n        const data = await resp.json();\r\n        setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n      } catch (e) {\r\n        console.error(e);\r\n        setError(`Failed to load accounts: ${e.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    let m = location.state?.month;\r\n    let y = location.state?.year;\r\n    if (!m || !y) {\r\n      const sm = sessionStorage.getItem('lastFetchedAccountMonth');\r\n      const sy = sessionStorage.getItem('lastFetchedAccountYear');\r\n      if (sm && sy) {\r\n        m = +sm; y = +sy;\r\n      }\r\n    }\r\n\r\n    if (m && y) {\r\n      if (m !== activeMonth || y !== activeYear || accounts.length === 0) {\r\n        setActiveMonth(m);\r\n        setActiveYear(y);\r\n        sessionStorage.setItem('lastFetchedAccountMonth', m);\r\n        sessionStorage.setItem('lastFetchedAccountYear', y);\r\n        fetchAccountData(m, y);\r\n      }\r\n    } else {\r\n      setError('Missing month or year.');\r\n      setLoading(false);\r\n    }\r\n  }, [location.state, activeMonth, activeYear, accounts.length]);\r\n\r\n  // 2) DataTables\r\n  useEffect(() => {\r\n    if (!loading && accounts.length && tableRef.current) {\r\n      const $tbl = $(tableRef.current);\r\n      if ($.fn.DataTable.isDataTable($tbl)) $tbl.DataTable().destroy();\r\n      $tbl.DataTable({ paging: true, searching: true, ordering: true, info: true });\r\n    }\r\n    return () => {\r\n      if (tableRef.current) {\r\n        const $tbl = $(tableRef.current);\r\n        if ($.fn.DataTable.isDataTable($tbl)) $tbl.DataTable().destroy();\r\n      }\r\n    };\r\n  }, [loading, accounts]);\r\n\r\n  // 3) Open the comment modal and fetch existing comment\r\n  const openCommentModal = async (accId) => {\r\n    setCurrentAccountId(accId);\r\n    setModalVisible(true);\r\n\r\n    try {\r\n      const resp = await fetch(`${BACKEND_URL}/api/account/comment`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        // Omit `comment` field entirely for fetch\r\n        body: JSON.stringify({ accId, month: activeMonth, year: activeYear })\r\n      });\r\n\r\n      if (!resp.ok) throw new Error(await resp.text());\r\n      const result = await resp.json();   // { accId, comment, month, year }\r\n      setCommentInput(result.comment || '');\r\n      setCommentsMap((m) => ({ ...m, [accId]: result.comment || '' }));\r\n    } catch (e) {\r\n      console.warn('Error fetching comment:', e.message);\r\n      setCommentInput('');\r\n    }\r\n  };\r\n\r\n  // 4) Save or update comment\r\n  const saveComment = async () => {\r\n    try {\r\n      const dto = {\r\n        accId:   currentAccountId,\r\n        month:   activeMonth,\r\n        year:    activeYear,\r\n        comment: commentInput\r\n      };\r\n      const resp = await fetch(`${BACKEND_URL}/api/account/comment`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(dto)\r\n      });\r\n      if (!resp.ok) throw new Error(await resp.text());\r\n\r\n      setCommentsMap((m) => ({ ...m, [currentAccountId]: commentInput }));\r\n      setModalVisible(false);\r\n    } catch (e) {\r\n      alert('Error saving comment: ' + e.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background:  'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif'\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 w-100\"\r\n        style={{\r\n          maxWidth:       '1100px',\r\n          backgroundColor:'#ffffffdd',\r\n          borderRadius:   '1rem'\r\n        }}\r\n      >\r\n        <Breadcrumbs path={[\r\n          { name: 'PMO Dashboard', page: '' },\r\n          { name: 'Revenue Forecast ‚Äì Early View', page: 'upload' },\r\n          { name: 'Account Level', page: 'accounts' }\r\n        ]}/>\r\n        <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n          üè¢ Account Level Overview\r\n        </h2>\r\n\r\n        {loading ? (\r\n          <div className=\"d-flex justify-content-center align-items-center\">\r\n            <div className=\"spinner-border text-primary\" role=\"status\" />\r\n            <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n          </div>\r\n        ) : error ? (\r\n          <div className=\"d-flex flex-column justify-content-center align-items-center text-danger\">\r\n            <p className=\"fs-4\">Error: {error}</p>\r\n            <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n              Go to Upload Page\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"table-responsive rounded\">\r\n            <table\r\n              ref={tableRef}\r\n              className=\"display table table-hover align-middle table-bordered mb-0\"\r\n              style={{ width: '100%' }}\r\n            >\r\n              <thead\r\n                className=\"text-white\"\r\n                style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n              >\r\n                <tr>\r\n                  <th>Account ID</th>\r\n                  <th>Account Name</th>\r\n                  <th>Total Projects</th>\r\n                  <th>Total Revenue</th>\r\n                  <th>Forecast Revenue</th>\r\n                  <th>Revenue Difference</th>\r\n                  <th className=\"text-center\">Comment</th>\r\n                  <th className=\"text-center\">View</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {accounts.map((acc) => (\r\n                  <tr key={acc.accountId}>\r\n                    <td>{acc.accountId}</td>\r\n                    <td>{acc.accountName}</td>\r\n                    <td>{acc.totalProjects}</td>\r\n                    <td>{formatCurrency(acc.totalRevenue)}</td>\r\n                    <td>{formatCurrency(0)}</td>\r\n                    <td>{formatCurrency(0)}</td>\r\n                    <td className=\"text-center\">\r\n                      <button\r\n                        className=\"btn btn-sm btn-outline-secondary\"\r\n                        onClick={() => openCommentModal(acc.accountId)}\r\n                      >\r\n                        üí¨\r\n                      </button>\r\n                    </td>\r\n                    <td className=\"text-center\">\r\n                      <button\r\n                        className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n                        onClick={() =>\r\n                          navigate(`/accounts/${acc.accountId}/projects`, {\r\n                            state: {\r\n                              accountId: acc.accountId,\r\n                              month:      activeMonth,\r\n                              year:       activeYear\r\n                            }\r\n                          })\r\n                        }\r\n                      >\r\n                        üîç\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {modalVisible && (\r\n        <div className=\"modal fade show d-block\" style={{ backgroundColor: '#00000066' }}>\r\n          <div className=\"modal-dialog modal-dialog-centered\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\">\r\n                  üí¨ Comment for {currentAccountId}\r\n                </h5>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn-close\"\r\n                  onClick={() => setModalVisible(false)}\r\n                />\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <textarea\r\n                  className=\"form-control\"\r\n                  rows=\"4\"\r\n                  value={commentInput}\r\n                  onChange={(e) => setCommentInput(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button className=\"btn btn-secondary\" onClick={() => setModalVisible(false)}>\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-primary\"\r\n                  onClick={saveComment}\r\n                  disabled={!commentInput.trim()}\r\n                >\r\n                  Save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountLevel;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,WAAW,QAAkB,kBAAkB;AACrE,OAAOC,CAAC,MAA2C,QAAQ;AAC3D,OAAO,gBAAgB;AACvB,OAAO,qDAAqD;AAC5D,OAAOC,WAAW,MAAiC,gBAAgB;AACnE,OAAOC,UAAU,MAAkC,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhF,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,QAAQ,GAAGd,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACA,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAiBd,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAWhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAASlB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACmB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACqB,YAAY,EAAEC,eAAe,CAAC,GAAStB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAmBxB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAuB1B,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAAC2B,WAAW,EAAEC,cAAc,CAAC,GAAW5B,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAAC6B,UAAU,EAAEC,aAAa,CAAC,GAAa9B,QAAQ,CAAC,IAAI,CAAC;EAE5D,MAAM+B,WAAW,GAAG,uBAAuB;EAC3C,MAAM;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,qBAAqB;IAAEC;EAAsB,CAAC,GACtE9B,UAAU,CAAC+B,gBAAgB;EAE7B,MAAMC,cAAc,GAAGA,CAACC,CAAC,GAAG,CAAC,KAC3BA,CAAC,CAACC,cAAc,CAACP,MAAM,EAAE;IACvBQ,KAAK,EAAE,UAAU;IACjBP,QAAQ;IACRC,qBAAqB;IACrBC;EACF,CAAC,CAAC;;EAEJ;EACApC,SAAS,CAAC,MAAM;IACd,MAAM0C,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IAC3CF,IAAI,CAACG,IAAI,GACP,gFAAgF;IAClFH,IAAI,CAACI,GAAG,GAAG,YAAY;IACvBH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;IAC/BC,QAAQ,CAACM,IAAI,CAACR,KAAK,CAACS,UAAU,GAAG,uBAAuB;EAC1D,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAlD,SAAS,CAAC,MAAM;IAAA,IAAAmD,eAAA,EAAAC,gBAAA;IACd,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,IAAI,KAAK;MAC9C9B,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,IAAI;QACF,MAAM6B,IAAI,GAAG,MAAMC,KAAK,CAAC,GAAGzB,WAAW,cAAc,EAAE;UACrD0B,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CV,IAAI,EAAEW,IAAI,CAACC,SAAS,CAAC;YAAEP,KAAK;YAAEC;UAAK,CAAC;QACtC,CAAC,CAAC;QACF,IAAI,CAACC,IAAI,CAACM,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC,CAAC;QAChD,MAAMC,IAAI,GAAG,MAAMT,IAAI,CAACU,IAAI,CAAC,CAAC;QAC9BnD,WAAW,CAACoD,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC,CAACI,MAAM,CAACC,OAAO,CAAC,CAAC;MAClE,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVC,OAAO,CAAC9C,KAAK,CAAC6C,CAAC,CAAC;QAChB5C,QAAQ,CAAC,4BAA4B4C,CAAC,CAACE,OAAO,EAAE,CAAC;MACnD,CAAC,SAAS;QACRhD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED,IAAIiD,CAAC,IAAAvB,eAAA,GAAGvC,QAAQ,CAAC+D,KAAK,cAAAxB,eAAA,uBAAdA,eAAA,CAAgBG,KAAK;IAC7B,IAAIsB,CAAC,IAAAxB,gBAAA,GAAGxC,QAAQ,CAAC+D,KAAK,cAAAvB,gBAAA,uBAAdA,gBAAA,CAAgBG,IAAI;IAC5B,IAAI,CAACmB,CAAC,IAAI,CAACE,CAAC,EAAE;MACZ,MAAMC,EAAE,GAAGC,cAAc,CAACC,OAAO,CAAC,yBAAyB,CAAC;MAC5D,MAAMC,EAAE,GAAGF,cAAc,CAACC,OAAO,CAAC,wBAAwB,CAAC;MAC3D,IAAIF,EAAE,IAAIG,EAAE,EAAE;QACZN,CAAC,GAAG,CAACG,EAAE;QAAED,CAAC,GAAG,CAACI,EAAE;MAClB;IACF;IAEA,IAAIN,CAAC,IAAIE,CAAC,EAAE;MACV,IAAIF,CAAC,KAAK9C,WAAW,IAAIgD,CAAC,KAAK9C,UAAU,IAAIhB,QAAQ,CAACmE,MAAM,KAAK,CAAC,EAAE;QAClEpD,cAAc,CAAC6C,CAAC,CAAC;QACjB3C,aAAa,CAAC6C,CAAC,CAAC;QAChBE,cAAc,CAACI,OAAO,CAAC,yBAAyB,EAAER,CAAC,CAAC;QACpDI,cAAc,CAACI,OAAO,CAAC,wBAAwB,EAAEN,CAAC,CAAC;QACnDvB,gBAAgB,CAACqB,CAAC,EAAEE,CAAC,CAAC;MACxB;IACF,CAAC,MAAM;MACLjD,QAAQ,CAAC,wBAAwB,CAAC;MAClCF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACb,QAAQ,CAAC+D,KAAK,EAAE/C,WAAW,EAAEE,UAAU,EAAEhB,QAAQ,CAACmE,MAAM,CAAC,CAAC;;EAE9D;EACAjF,SAAS,CAAC,MAAM;IACd,IAAI,CAACwB,OAAO,IAAIV,QAAQ,CAACmE,MAAM,IAAIpE,QAAQ,CAACsE,OAAO,EAAE;MACnD,MAAMC,IAAI,GAAGhF,CAAC,CAACS,QAAQ,CAACsE,OAAO,CAAC;MAChC,IAAI/E,CAAC,CAACiF,EAAE,CAACC,SAAS,CAACC,WAAW,CAACH,IAAI,CAAC,EAAEA,IAAI,CAACE,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAAC;MAChEJ,IAAI,CAACE,SAAS,CAAC;QAAEG,MAAM,EAAE,IAAI;QAAEC,SAAS,EAAE,IAAI;QAAEC,QAAQ,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;IAC/E;IACA,OAAO,MAAM;MACX,IAAI/E,QAAQ,CAACsE,OAAO,EAAE;QACpB,MAAMC,IAAI,GAAGhF,CAAC,CAACS,QAAQ,CAACsE,OAAO,CAAC;QAChC,IAAI/E,CAAC,CAACiF,EAAE,CAACC,SAAS,CAACC,WAAW,CAACH,IAAI,CAAC,EAAEA,IAAI,CAACE,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAAC;MAClE;IACF,CAAC;EACH,CAAC,EAAE,CAAChE,OAAO,EAAEV,QAAQ,CAAC,CAAC;;EAEvB;EACA,MAAM+E,gBAAgB,GAAG,MAAOC,KAAK,IAAK;IACxCzE,mBAAmB,CAACyE,KAAK,CAAC;IAC1B3E,eAAe,CAAC,IAAI,CAAC;IAErB,IAAI;MACF,MAAMqC,IAAI,GAAG,MAAMC,KAAK,CAAC,GAAGzB,WAAW,sBAAsB,EAAE;QAC7D0B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/C;QACAV,IAAI,EAAEW,IAAI,CAACC,SAAS,CAAC;UAAEiC,KAAK;UAAExC,KAAK,EAAE1B,WAAW;UAAE2B,IAAI,EAAEzB;QAAW,CAAC;MACtE,CAAC,CAAC;MAEF,IAAI,CAAC0B,IAAI,CAACM,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC,CAAC;MAChD,MAAM+B,MAAM,GAAG,MAAMvC,IAAI,CAACU,IAAI,CAAC,CAAC,CAAC,CAAG;MACpC3C,eAAe,CAACwE,MAAM,CAACC,OAAO,IAAI,EAAE,CAAC;MACrC/E,cAAc,CAAEyD,CAAC,KAAM;QAAE,GAAGA,CAAC;QAAE,CAACoB,KAAK,GAAGC,MAAM,CAACC,OAAO,IAAI;MAAG,CAAC,CAAC,CAAC;IAClE,CAAC,CAAC,OAAOzB,CAAC,EAAE;MACVC,OAAO,CAACyB,IAAI,CAAC,yBAAyB,EAAE1B,CAAC,CAACE,OAAO,CAAC;MAClDlD,eAAe,CAAC,EAAE,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAM2E,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,GAAG,GAAG;QACVL,KAAK,EAAI1E,gBAAgB;QACzBkC,KAAK,EAAI1B,WAAW;QACpB2B,IAAI,EAAKzB,UAAU;QACnBkE,OAAO,EAAE1E;MACX,CAAC;MACD,MAAMkC,IAAI,GAAG,MAAMC,KAAK,CAAC,GAAGzB,WAAW,sBAAsB,EAAE;QAC7D0B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CV,IAAI,EAAEW,IAAI,CAACC,SAAS,CAACsC,GAAG;MAC1B,CAAC,CAAC;MACF,IAAI,CAAC3C,IAAI,CAACM,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC,CAAC;MAEhD/C,cAAc,CAAEyD,CAAC,KAAM;QAAE,GAAGA,CAAC;QAAE,CAACtD,gBAAgB,GAAGE;MAAa,CAAC,CAAC,CAAC;MACnEH,eAAe,CAAC,KAAK,CAAC;IACxB,CAAC,CAAC,OAAOoD,CAAC,EAAE;MACV6B,KAAK,CAAC,wBAAwB,GAAG7B,CAAC,CAACE,OAAO,CAAC;IAC7C;EACF,CAAC;EAED,oBACEjE,OAAA;IACE6F,SAAS,EAAC,4DAA4D;IACtE5D,KAAK,EAAE;MACL6D,UAAU,EAAG,oDAAoD;MACjEpD,UAAU,EAAE;IACd,CAAE;IAAAqD,QAAA,gBAEF/F,OAAA;MACE6F,SAAS,EAAC,uBAAuB;MACjC5D,KAAK,EAAE;QACL+D,QAAQ,EAAQ,QAAQ;QACxBC,eAAe,EAAC,WAAW;QAC3BC,YAAY,EAAI;MAClB,CAAE;MAAAH,QAAA,gBAEF/F,OAAA,CAACH,WAAW;QAACsG,IAAI,EAAE,CACjB;UAAEC,IAAI,EAAE,eAAe;UAAEC,IAAI,EAAE;QAAG,CAAC,EACnC;UAAED,IAAI,EAAE,+BAA+B;UAAEC,IAAI,EAAE;QAAS,CAAC,EACzD;UAAED,IAAI,EAAE,eAAe;UAAEC,IAAI,EAAE;QAAW,CAAC;MAC3C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACJzG,OAAA;QAAI6F,SAAS,EAAC,wCAAwC;QAAAE,QAAA,EAAC;MAEvD;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAEJzF,OAAO,gBACNhB,OAAA;QAAK6F,SAAS,EAAC,kDAAkD;QAAAE,QAAA,gBAC/D/F,OAAA;UAAK6F,SAAS,EAAC,6BAA6B;UAACa,IAAI,EAAC;QAAQ;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC7DzG,OAAA;UAAG6F,SAAS,EAAC,mBAAmB;UAAAE,QAAA,EAAC;QAAuB;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzD,CAAC,GACJvF,KAAK,gBACPlB,OAAA;QAAK6F,SAAS,EAAC,0EAA0E;QAAAE,QAAA,gBACvF/F,OAAA;UAAG6F,SAAS,EAAC,MAAM;UAAAE,QAAA,GAAC,SAAO,EAAC7E,KAAK;QAAA;UAAAoF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtCzG,OAAA;UAAQ6F,SAAS,EAAC,sBAAsB;UAACc,OAAO,EAAEA,CAAA,KAAMxG,QAAQ,CAAC,SAAS,CAAE;UAAA4F,QAAA,EAAC;QAE7E;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,gBAENzG,OAAA;QAAK6F,SAAS,EAAC,0BAA0B;QAAAE,QAAA,eACvC/F,OAAA;UACE4G,GAAG,EAAEvG,QAAS;UACdwF,SAAS,EAAC,4DAA4D;UACtE5D,KAAK,EAAE;YAAE4E,KAAK,EAAE;UAAO,CAAE;UAAAd,QAAA,gBAEzB/F,OAAA;YACE6F,SAAS,EAAC,YAAY;YACtB5D,KAAK,EAAE;cAAE6D,UAAU,EAAE;YAA8C,CAAE;YAAAC,QAAA,eAErE/F,OAAA;cAAA+F,QAAA,gBACE/F,OAAA;gBAAA+F,QAAA,EAAI;cAAU;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACnBzG,OAAA;gBAAA+F,QAAA,EAAI;cAAY;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACrBzG,OAAA;gBAAA+F,QAAA,EAAI;cAAc;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACvBzG,OAAA;gBAAA+F,QAAA,EAAI;cAAa;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACtBzG,OAAA;gBAAA+F,QAAA,EAAI;cAAgB;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACzBzG,OAAA;gBAAA+F,QAAA,EAAI;cAAkB;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC3BzG,OAAA;gBAAI6F,SAAS,EAAC,aAAa;gBAAAE,QAAA,EAAC;cAAO;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACxCzG,OAAA;gBAAI6F,SAAS,EAAC,aAAa;gBAAAE,QAAA,EAAC;cAAI;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACRzG,OAAA;YAAA+F,QAAA,EACGzF,QAAQ,CAACwG,GAAG,CAAEC,GAAG,iBAChB/G,OAAA;cAAA+F,QAAA,gBACE/F,OAAA;gBAAA+F,QAAA,EAAKgB,GAAG,CAACC;cAAS;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACxBzG,OAAA;gBAAA+F,QAAA,EAAKgB,GAAG,CAACE;cAAW;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC1BzG,OAAA;gBAAA+F,QAAA,EAAKgB,GAAG,CAACG;cAAa;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC5BzG,OAAA;gBAAA+F,QAAA,EAAKjE,cAAc,CAACiF,GAAG,CAACI,YAAY;cAAC;gBAAAb,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC3CzG,OAAA;gBAAA+F,QAAA,EAAKjE,cAAc,CAAC,CAAC;cAAC;gBAAAwE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC5BzG,OAAA;gBAAA+F,QAAA,EAAKjE,cAAc,CAAC,CAAC;cAAC;gBAAAwE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC5BzG,OAAA;gBAAI6F,SAAS,EAAC,aAAa;gBAAAE,QAAA,eACzB/F,OAAA;kBACE6F,SAAS,EAAC,kCAAkC;kBAC5Cc,OAAO,EAAEA,CAAA,KAAMtB,gBAAgB,CAAC0B,GAAG,CAACC,SAAS,CAAE;kBAAAjB,QAAA,EAChD;gBAED;kBAAAO,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACLzG,OAAA;gBAAI6F,SAAS,EAAC,aAAa;gBAAAE,QAAA,eACzB/F,OAAA;kBACE6F,SAAS,EAAC,+CAA+C;kBACzDc,OAAO,EAAEA,CAAA,KACPxG,QAAQ,CAAC,aAAa4G,GAAG,CAACC,SAAS,WAAW,EAAE;oBAC9C7C,KAAK,EAAE;sBACL6C,SAAS,EAAED,GAAG,CAACC,SAAS;sBACxBlE,KAAK,EAAO1B,WAAW;sBACvB2B,IAAI,EAAQzB;oBACd;kBACF,CAAC,CACF;kBAAAyE,QAAA,EACF;gBAED;kBAAAO,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC;YAAA,GA9BEM,GAAG,CAACC,SAAS;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA+BlB,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAEL/F,YAAY,iBACXV,OAAA;MAAK6F,SAAS,EAAC,yBAAyB;MAAC5D,KAAK,EAAE;QAAEgE,eAAe,EAAE;MAAY,CAAE;MAAAF,QAAA,eAC/E/F,OAAA;QAAK6F,SAAS,EAAC,oCAAoC;QAAAE,QAAA,eACjD/F,OAAA;UAAK6F,SAAS,EAAC,eAAe;UAAAE,QAAA,gBAC5B/F,OAAA;YAAK6F,SAAS,EAAC,cAAc;YAAAE,QAAA,gBAC3B/F,OAAA;cAAI6F,SAAS,EAAC,aAAa;cAAAE,QAAA,GAAC,2BACX,EAACnF,gBAAgB;YAAA;cAAA0F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9B,CAAC,eACLzG,OAAA;cACEoH,IAAI,EAAC,QAAQ;cACbvB,SAAS,EAAC,WAAW;cACrBc,OAAO,EAAEA,CAAA,KAAMhG,eAAe,CAAC,KAAK;YAAE;cAAA2F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACNzG,OAAA;YAAK6F,SAAS,EAAC,YAAY;YAAAE,QAAA,eACzB/F,OAAA;cACE6F,SAAS,EAAC,cAAc;cACxBwB,IAAI,EAAC,GAAG;cACRC,KAAK,EAAExG,YAAa;cACpByG,QAAQ,EAAGxD,CAAC,IAAKhD,eAAe,CAACgD,CAAC,CAACyD,MAAM,CAACF,KAAK;YAAE;cAAAhB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClD;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACNzG,OAAA;YAAK6F,SAAS,EAAC,cAAc;YAAAE,QAAA,gBAC3B/F,OAAA;cAAQ6F,SAAS,EAAC,mBAAmB;cAACc,OAAO,EAAEA,CAAA,KAAMhG,eAAe,CAAC,KAAK,CAAE;cAAAoF,QAAA,EAAC;YAE7E;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTzG,OAAA;cACE6F,SAAS,EAAC,iBAAiB;cAC3Bc,OAAO,EAAEjB,WAAY;cACrB+B,QAAQ,EAAE,CAAC3G,YAAY,CAAC4G,IAAI,CAAC,CAAE;cAAA3B,QAAA,EAChC;YAED;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvG,EAAA,CA7RID,YAAY;EAAA,QACCP,WAAW,EACXC,WAAW;AAAA;AAAAgI,EAAA,GAFxB1H,YAAY;AA+RlB,eAAeA,YAAY;AAAC,IAAA0H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}