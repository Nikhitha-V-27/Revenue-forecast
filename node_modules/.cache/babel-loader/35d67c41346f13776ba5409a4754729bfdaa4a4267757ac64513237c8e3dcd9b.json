{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Upload\\\\UploadFiles.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport UploadCard from './UploadCard';\nimport Breadcrumbs from '../Breadcrumbs';\nimport uploadData from '../../data/uploadPage.json';\nimport DatePicker from 'react-datepicker';\n\n// REMEMBER: The CSS import for react-datepicker should be in App.js or index.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingSpinner = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"d-flex justify-content-center align-items-center\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spinner-border text-primary\",\n    role: \"status\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"visually-hidden\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"ms-2 text-primary\",\n    children: \"Uploading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n_c = LoadingSpinner;\nconst UploadFiles = () => {\n  _s();\n  const navigate = useNavigate();\n  // **IMPORTANT**: Replace with your actual Spring Boot backend URL\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // States to track the actual File objects selected by the user\n  const [teamFile, setTeamFile] = useState(null);\n  const [customerFile, setCustomerFile] = useState(null);\n  const [forecastRevenueFile, setForecastRevenueFile] = useState(null); // NEW STATE\n  const [associateMappingFile, setAssociateMappingFile] = useState(null);\n\n  // States to store the names of the selected/uploaded files (for display)\n  const [teamFileName, setTeamFileName] = useState('');\n  const [customerFileName, setCustomerFileName] = useState('');\n  const [forecastRevenueFileName, setForecastRevenueFileName] = useState(''); // NEW STATE\n  const [associateMappingFileName, setAssociateMappingFileName] = useState('');\n\n  // States to track if files have been successfully uploaded/processed by the backend\n  const [teamUploaded, setTeamUploaded] = useState(false);\n  const [customerUploaded, setCustomerUploaded] = useState(false);\n  const [forecastRevenueUploaded, setForecastRevenueUploaded] = useState(false); // NEW STATE\n  const [associateMappingUploaded, setAssociateMappingUploaded] = useState(false);\n\n  // States to track loading status for each individual upload card\n  const [teamLoading, setTeamLoading] = useState(false);\n  const [customerLoading, setCustomerLoading] = useState(false);\n  const [forecastRevenueLoading, setForecastRevenueLoading] = useState(false); // NEW STATE\n  const [associateMappingLoading, setAssociateMappingLoading] = useState(false);\n\n  // State for the \"Get Data\" popup visibility and selected date\n  const [showGetDataPopup, setShowGetDataPopup] = useState(false);\n  // Initialize selectedDate to null so DatePicker starts empty\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  // Effect to load Poppins font (runs once on component mount)\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  /**\r\n   * Handles file selection from the file input dialog.\r\n   * Stores the file object and its name in the component's state.\r\n   * @param {string} type - The type of file ('team', 'customer', 'forecastRevenue', 'associateMapping').\r\n   * @param {File} file - The File object selected by the user.\r\n   */\n  const handleFileSelect = (type, file) => {\n    if (!file) return;\n    const name = file.name || 'Unnamed file';\n    if (type === 'team') {\n      setTeamFile(file);\n      setTeamFileName(name);\n      setTeamUploaded(false); // Reset uploaded status if a new file is selected\n    } else if (type === 'customer') {\n      setCustomerFile(file);\n      setCustomerFileName(name);\n      setCustomerUploaded(false);\n    } else if (type === 'forecastRevenue') {\n      // NEW FILE TYPE\n      setForecastRevenueFile(file);\n      setForecastRevenueFileName(name);\n      setForecastRevenueUploaded(false);\n    } else if (type === 'associateMapping') {\n      setAssociateMappingFile(file);\n      setAssociateMappingFileName(name);\n      setAssociateMappingUploaded(false);\n    }\n  };\n\n  /**\r\n   * Handles the \"Upload\" button click for each card.\r\n   * Sends the selected file to the backend via a POST request.\r\n   * @param {string} type - The type of file being uploaded ('team', 'customer', 'forecastRevenue', 'associateMapping').\r\n   */\n  const handleProcessUpload = async type => {\n    let fileToUpload = null;\n    let backendType = ''; // This will be 'company', 'client', 'forecast', or 'associate'\n    let setLoading = null;\n    let setUploaded = null;\n    let fileNameForAlert = ''; // Used for user feedback\n    let setFileState = null; // To clear the actual File object after successful upload\n\n    // Determine which file and state setters to use based on the 'type'\n    if (type === 'team') {\n      fileToUpload = teamFile;\n      backendType = 'company';\n      setLoading = setTeamLoading;\n      setUploaded = setTeamUploaded;\n      fileNameForAlert = teamFileName;\n      setFileState = setTeamFile;\n    } else if (type === 'customer') {\n      fileToUpload = customerFile;\n      backendType = 'client';\n      setLoading = setCustomerLoading;\n      setUploaded = setCustomerUploaded;\n      fileNameForAlert = customerFileName;\n      setFileState = setCustomerFile;\n    } else if (type === 'forecastRevenue') {\n      // NEW FILE TYPE\n      fileToUpload = forecastRevenueFile;\n      backendType = 'forecast'; // Assuming your backend expects 'forecast'\n      setLoading = setForecastRevenueLoading;\n      setUploaded = setForecastRevenueUploaded;\n      fileNameForAlert = forecastRevenueFileName;\n      setFileState = setForecastRevenueFile;\n    } else if (type === 'associateMapping') {\n      fileToUpload = associateMappingFile;\n      backendType = 'associate';\n      setLoading = setAssociateMappingLoading;\n      setUploaded = setAssociateMappingUploaded;\n      fileNameForAlert = associateMappingFileName;\n      setFileState = setAssociateMappingFile;\n    }\n\n    // Prevent upload if no file is selected for this card\n    if (!fileToUpload) {\n      // Replaced alert with a custom dialog or toast for better UX\n      // For now, let's just log a message\n      console.log(`Please select a file for ${type} before uploading.`);\n      return;\n    }\n    setLoading(true); // Activate loading spinner\n    const formData = new FormData();\n    formData.append('file', fileToUpload); // 'file' matches @RequestParam(\"file\")\n\n    try {\n      const response = await fetch(`${BACKEND_URL}/upload`, {\n        method: 'POST',\n        headers: {\n          // Custom header for the file type, as expected by your Spring Boot @RequestHeader\n          'type': backendType\n        },\n        body: formData // FormData automatically sets 'Content-Type': 'multipart/form-data'\n      });\n      if (response.ok) {\n        // Check for a successful HTTP status (200-299)\n        console.log(`${type} file uploaded successfully!`);\n        // Replaced alert with a custom dialog or toast for better UX\n        // alert(`${type} file (${fileNameForAlert}) uploaded successfully!`); \n        setUploaded(true); // Mark as successfully uploaded\n        setFileState(null); // Clear the actual File object after successful upload\n      } else {\n        const errorText = await response.text(); // Get detailed error message from backend\n        console.error(`Failed to upload ${type} file: ${response.status} - ${errorText}`);\n        // alert(`Failed to upload ${type} file (${fileNameForAlert}): ${errorText || response.statusText}`);\n        setUploaded(false); // Ensure it's not marked as uploaded on failure\n      }\n    } catch (error) {\n      // Catches network errors (e.g., server not running, no internet)\n      console.error('Network error during file upload:', error);\n      // alert(`Network error during ${type} file upload. Please check your connection or server status.`);\n      setUploaded(false);\n    } finally {\n      setLoading(false); // Deactivate loading spinner, regardless of success or failure\n    }\n  };\n\n  /**\r\n   * Handles the \"Remove\" button click for each card.\r\n   * Resets the file, filename, uploaded status, and loading status for that card.\r\n   * @param {string} type - The type of file being removed.\r\n   */\n  const handleRemoveFile = type => {\n    if (type === 'team') {\n      setTeamFile(null);\n      setTeamFileName('');\n      setTeamUploaded(false);\n      setTeamLoading(false);\n    } else if (type === 'customer') {\n      setCustomerFile(null);\n      setCustomerFileName('');\n      setCustomerUploaded(false);\n      setCustomerLoading(false);\n    } else if (type === 'forecastRevenue') {\n      // NEW FILE TYPE\n      setForecastRevenueFile(null);\n      setForecastRevenueFileName('');\n      setForecastRevenueUploaded(false);\n      setForecastRevenueLoading(false);\n    } else if (type === 'associateMapping') {\n      setAssociateMappingFile(null);\n      setAssociateMappingFileName('');\n      setAssociateMappingUploaded(false);\n      setAssociateMappingLoading(false);\n    }\n  };\n\n  /**\r\n   * Handles the \"Start Reconciliation\" button click in the Month/Year popup.\r\n   * Extracts month and year and navigates to the SBU level page.\r\n   */\n  const handleStartReconciliation = () => {\n    if (!selectedDate) {\n      // Use custom UI instead of alert for better UX\n      console.log('Please select both a month and a year.');\n      return;\n    }\n    // Extract month (1-indexed) and year from the selected Date object\n    const month = selectedDate.getMonth() + 1; // getMonth() is 0-indexed, so add 1\n    const year = selectedDate.getFullYear();\n    setShowGetDataPopup(false); // Close the popup\n\n    // Navigate to the SBU level page, passing month and year as state\n    navigate('/sbu', {\n      state: {\n        month: month,\n        year: year\n      }\n    });\n  };\n\n  // Breadcrumb path configuration\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  }];\n\n  // Calculate maxDate for the DatePicker\n  // This will be the last day of the previous month\n  const today = new Date();\n  const lastDayOfPreviousMonth = new Date(today.getFullYear(), today.getMonth(), 0); // Day 0 of current month is last day of previous month\n\n  // Determine if the \"Get Data\" button should be enabled\n  // Requires Team, Customer, and Forecast Revenue files uploaded\n  const isGetDataButtonEnabled = teamUploaded && customerUploaded && forecastRevenueUploaded; // UPDATED LOGIC\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #e0f2fe, #f8fafc)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '960px',\n        backgroundColor: '#ffffffee'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center fw-bold text-dark mb-3\",\n        children: \"Revenue Forecast \\u2013 Early View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"nav nav-pills nav-fill mb-5\",\n        role: \"tablist\",\n        children: uploadData.tabs.map((tab, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"nav-item\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `nav-link rounded-pill px-4 py-2 ${tab === 'Early View' ? 'active' : 'text-muted'}`,\n            style: {\n              fontWeight: 500\n            },\n            children: tab\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"fw-semibold text-dark mb-4\",\n        children: \"Upload Required Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row g-4 justify-content-center\",\n        children: uploadData.cards.map(card => {\n          let currentFileState, currentFileNameState, currentUploadedState, currentLoadingState;\n          let isDisabled = false; // Default to not disabled\n\n          // Dynamically assign correct state and handlers based on card type\n          if (card.type === 'team') {\n            currentFileState = teamFile;\n            currentFileNameState = teamFileName;\n            currentUploadedState = teamUploaded;\n            currentLoadingState = teamLoading;\n          } else if (card.type === 'customer') {\n            currentFileState = customerFile;\n            currentFileNameState = customerFileName;\n            currentUploadedState = customerUploaded;\n            currentLoadingState = customerLoading;\n          } else if (card.type === 'forecastRevenue') {\n            // NEW CARD TYPE\n            currentFileState = forecastRevenueFile;\n            currentFileNameState = forecastRevenueFileName;\n            currentUploadedState = forecastRevenueUploaded;\n            currentLoadingState = forecastRevenueLoading;\n          } else if (card.type === 'associateMapping') {\n            currentFileState = associateMappingFile;\n            currentFileNameState = associateMappingFileName;\n            currentUploadedState = associateMappingUploaded;\n            currentLoadingState = associateMappingLoading;\n            // Disable associate mapping until team, customer, AND forecast are uploaded\n            isDisabled = !teamUploaded || !customerUploaded || !forecastRevenueUploaded; // UPDATED LOGIC\n          }\n          return /*#__PURE__*/_jsxDEV(UploadCard, {\n            title: card.title,\n            description: card.description,\n            icon: card.icon,\n            onFileSelect: e => handleFileSelect(card.type, e.target.files[0]),\n            onProcessUpload: () => handleProcessUpload(card.type),\n            onRemove: () => handleRemoveFile(card.type),\n            isSelected: !!currentFileState // True if a file object exists\n            ,\n            uploaded: currentUploadedState // Reflects if upload was successful\n            ,\n            fileName: currentFileNameState,\n            disabled: isDisabled // Pass the calculated disabled state to UploadCard\n            ,\n            children: currentLoadingState && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 41\n            }, this)\n          }, card.type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), isGetDataButtonEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary px-5 py-2\",\n          onClick: () => {\n            setSelectedDate(null); // Set to null to make DatePicker empty initially\n            setShowGetDataPopup(true); // Open Month/Year popup\n          },\n          children: \"Get Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), showGetDataPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\",\n      style: {\n        zIndex: 999,\n        minWidth: '360px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"fw-bold mb-3 text-center\",\n        children: \"Select Month and Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3 text-center\",\n        children: /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: selectedDate,\n          onChange: date => setSelectedDate(date),\n          dateFormat: \"MM/yyyy\",\n          showMonthYearPicker: true,\n          showFullMonthYearPicker: true // Ensures only month/year are selectable\n          ,\n          maxDate: lastDayOfPreviousMonth // <--- Restricts to past months\n          ,\n          className: \"form-control text-center\" // Apply Bootstrap styling\n          ,\n          placeholderText: \"Select Month & Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary w-100 mb-2\",\n        onClick: handleStartReconciliation,\n        disabled: !selectedDate // Disable button if no date is selected\n        ,\n        children: \"Start Reconciliation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-secondary w-100\",\n        onClick: () => setShowGetDataPopup(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadFiles, \"a6euaaY4rGd31XEDifO3zi3wdPA=\", false, function () {\n  return [useNavigate];\n});\n_c2 = UploadFiles;\nexport default UploadFiles;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingSpinner\");\n$RefreshReg$(_c2, \"UploadFiles\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","UploadCard","Breadcrumbs","uploadData","DatePicker","jsxDEV","_jsxDEV","LoadingSpinner","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","UploadFiles","_s","navigate","BACKEND_URL","teamFile","setTeamFile","customerFile","setCustomerFile","forecastRevenueFile","setForecastRevenueFile","associateMappingFile","setAssociateMappingFile","teamFileName","setTeamFileName","customerFileName","setCustomerFileName","forecastRevenueFileName","setForecastRevenueFileName","associateMappingFileName","setAssociateMappingFileName","teamUploaded","setTeamUploaded","customerUploaded","setCustomerUploaded","forecastRevenueUploaded","setForecastRevenueUploaded","associateMappingUploaded","setAssociateMappingUploaded","teamLoading","setTeamLoading","customerLoading","setCustomerLoading","forecastRevenueLoading","setForecastRevenueLoading","associateMappingLoading","setAssociateMappingLoading","showGetDataPopup","setShowGetDataPopup","selectedDate","setSelectedDate","link","document","createElement","href","rel","head","appendChild","body","style","fontFamily","handleFileSelect","type","file","name","handleProcessUpload","fileToUpload","backendType","setLoading","setUploaded","fileNameForAlert","setFileState","console","log","formData","FormData","append","response","fetch","method","headers","ok","errorText","text","error","status","handleRemoveFile","handleStartReconciliation","month","getMonth","year","getFullYear","state","breadcrumbPath","page","today","Date","lastDayOfPreviousMonth","isGetDataButtonEnabled","background","maxWidth","backgroundColor","path","tabs","map","tab","i","fontWeight","cards","card","currentFileState","currentFileNameState","currentUploadedState","currentLoadingState","isDisabled","title","description","icon","onFileSelect","e","target","files","onProcessUpload","onRemove","isSelected","uploaded","disabled","onClick","zIndex","minWidth","selected","onChange","date","dateFormat","showMonthYearPicker","showFullMonthYearPicker","maxDate","placeholderText","_c2","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Upload/UploadFiles.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport UploadCard from './UploadCard';\r\nimport Breadcrumbs from '../Breadcrumbs';\r\nimport uploadData from '../../data/uploadPage.json';\r\nimport DatePicker from 'react-datepicker';\r\n\r\n// REMEMBER: The CSS import for react-datepicker should be in App.js or index.js\r\n\r\nconst LoadingSpinner = () => (\r\n  <div className=\"d-flex justify-content-center align-items-center\">\r\n    <div className=\"spinner-border text-primary\" role=\"status\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n    <span className=\"ms-2 text-primary\">Uploading...</span>\r\n  </div>\r\n);\r\n\r\nconst UploadFiles = () => {\r\n  const navigate = useNavigate();\r\n  // **IMPORTANT**: Replace with your actual Spring Boot backend URL\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // States to track the actual File objects selected by the user\r\n  const [teamFile, setTeamFile] = useState(null);\r\n  const [customerFile, setCustomerFile] = useState(null);\r\n  const [forecastRevenueFile, setForecastRevenueFile] = useState(null); // NEW STATE\r\n  const [associateMappingFile, setAssociateMappingFile] = useState(null);\r\n\r\n  // States to store the names of the selected/uploaded files (for display)\r\n  const [teamFileName, setTeamFileName] = useState('');\r\n  const [customerFileName, setCustomerFileName] = useState('');\r\n  const [forecastRevenueFileName, setForecastRevenueFileName] = useState(''); // NEW STATE\r\n  const [associateMappingFileName, setAssociateMappingFileName] = useState('');\r\n\r\n  // States to track if files have been successfully uploaded/processed by the backend\r\n  const [teamUploaded, setTeamUploaded] = useState(false);\r\n  const [customerUploaded, setCustomerUploaded] = useState(false);\r\n  const [forecastRevenueUploaded, setForecastRevenueUploaded] = useState(false); // NEW STATE\r\n  const [associateMappingUploaded, setAssociateMappingUploaded] = useState(false);\r\n\r\n  // States to track loading status for each individual upload card\r\n  const [teamLoading, setTeamLoading] = useState(false);\r\n  const [customerLoading, setCustomerLoading] = useState(false);\r\n  const [forecastRevenueLoading, setForecastRevenueLoading] = useState(false); // NEW STATE\r\n  const [associateMappingLoading, setAssociateMappingLoading] = useState(false);\r\n\r\n  // State for the \"Get Data\" popup visibility and selected date\r\n  const [showGetDataPopup, setShowGetDataPopup] = useState(false);\r\n  // Initialize selectedDate to null so DatePicker starts empty\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n  // Effect to load Poppins font (runs once on component mount)\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  /**\r\n   * Handles file selection from the file input dialog.\r\n   * Stores the file object and its name in the component's state.\r\n   * @param {string} type - The type of file ('team', 'customer', 'forecastRevenue', 'associateMapping').\r\n   * @param {File} file - The File object selected by the user.\r\n   */\r\n  const handleFileSelect = (type, file) => {\r\n    if (!file) return;\r\n    const name = file.name || 'Unnamed file';\r\n    if (type === 'team') {\r\n      setTeamFile(file);\r\n      setTeamFileName(name);\r\n      setTeamUploaded(false); // Reset uploaded status if a new file is selected\r\n    } else if (type === 'customer') {\r\n      setCustomerFile(file);\r\n      setCustomerFileName(name);\r\n      setCustomerUploaded(false);\r\n    } else if (type === 'forecastRevenue') { // NEW FILE TYPE\r\n      setForecastRevenueFile(file);\r\n      setForecastRevenueFileName(name);\r\n      setForecastRevenueUploaded(false);\r\n    } else if (type === 'associateMapping') {\r\n      setAssociateMappingFile(file);\r\n      setAssociateMappingFileName(name);\r\n      setAssociateMappingUploaded(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles the \"Upload\" button click for each card.\r\n   * Sends the selected file to the backend via a POST request.\r\n   * @param {string} type - The type of file being uploaded ('team', 'customer', 'forecastRevenue', 'associateMapping').\r\n   */\r\n  const handleProcessUpload = async (type) => {\r\n    let fileToUpload = null;\r\n    let backendType = ''; // This will be 'company', 'client', 'forecast', or 'associate'\r\n    let setLoading = null;\r\n    let setUploaded = null;\r\n    let fileNameForAlert = ''; // Used for user feedback\r\n    let setFileState = null; // To clear the actual File object after successful upload\r\n\r\n    // Determine which file and state setters to use based on the 'type'\r\n    if (type === 'team') {\r\n      fileToUpload = teamFile;\r\n      backendType = 'company';\r\n      setLoading = setTeamLoading;\r\n      setUploaded = setTeamUploaded;\r\n      fileNameForAlert = teamFileName;\r\n      setFileState = setTeamFile;\r\n    } else if (type === 'customer') {\r\n      fileToUpload = customerFile;\r\n      backendType = 'client';\r\n      setLoading = setCustomerLoading;\r\n      setUploaded = setCustomerUploaded;\r\n      fileNameForAlert = customerFileName;\r\n      setFileState = setCustomerFile;\r\n    } else if (type === 'forecastRevenue') { // NEW FILE TYPE\r\n      fileToUpload = forecastRevenueFile;\r\n      backendType = 'forecast'; // Assuming your backend expects 'forecast'\r\n      setLoading = setForecastRevenueLoading;\r\n      setUploaded = setForecastRevenueUploaded;\r\n      fileNameForAlert = forecastRevenueFileName;\r\n      setFileState = setForecastRevenueFile;\r\n    } else if (type === 'associateMapping') {\r\n      fileToUpload = associateMappingFile;\r\n      backendType = 'associate';\r\n      setLoading = setAssociateMappingLoading;\r\n      setUploaded = setAssociateMappingUploaded;\r\n      fileNameForAlert = associateMappingFileName;\r\n      setFileState = setAssociateMappingFile;\r\n    }\r\n\r\n    // Prevent upload if no file is selected for this card\r\n    if (!fileToUpload) {\r\n      // Replaced alert with a custom dialog or toast for better UX\r\n      // For now, let's just log a message\r\n      console.log(`Please select a file for ${type} before uploading.`);\r\n      return;\r\n    }\r\n\r\n    setLoading(true); // Activate loading spinner\r\n    const formData = new FormData();\r\n    formData.append('file', fileToUpload); // 'file' matches @RequestParam(\"file\")\r\n\r\n    try {\r\n      const response = await fetch(`${BACKEND_URL}/upload`, {\r\n        method: 'POST',\r\n        headers: {\r\n          // Custom header for the file type, as expected by your Spring Boot @RequestHeader\r\n          'type': backendType\r\n        },\r\n        body: formData, // FormData automatically sets 'Content-Type': 'multipart/form-data'\r\n      });\r\n\r\n      if (response.ok) { // Check for a successful HTTP status (200-299)\r\n        console.log(`${type} file uploaded successfully!`);\r\n        // Replaced alert with a custom dialog or toast for better UX\r\n        // alert(`${type} file (${fileNameForAlert}) uploaded successfully!`); \r\n        setUploaded(true); // Mark as successfully uploaded\r\n        setFileState(null); // Clear the actual File object after successful upload\r\n      } else {\r\n        const errorText = await response.text(); // Get detailed error message from backend\r\n        console.error(`Failed to upload ${type} file: ${response.status} - ${errorText}`);\r\n        // alert(`Failed to upload ${type} file (${fileNameForAlert}): ${errorText || response.statusText}`);\r\n        setUploaded(false); // Ensure it's not marked as uploaded on failure\r\n      }\r\n    } catch (error) {\r\n      // Catches network errors (e.g., server not running, no internet)\r\n      console.error('Network error during file upload:', error);\r\n      // alert(`Network error during ${type} file upload. Please check your connection or server status.`);\r\n      setUploaded(false);\r\n    } finally {\r\n      setLoading(false); // Deactivate loading spinner, regardless of success or failure\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles the \"Remove\" button click for each card.\r\n   * Resets the file, filename, uploaded status, and loading status for that card.\r\n   * @param {string} type - The type of file being removed.\r\n   */\r\n  const handleRemoveFile = (type) => {\r\n    if (type === 'team') {\r\n      setTeamFile(null);\r\n      setTeamFileName('');\r\n      setTeamUploaded(false);\r\n      setTeamLoading(false);\r\n    } else if (type === 'customer') {\r\n      setCustomerFile(null);\r\n      setCustomerFileName('');\r\n      setCustomerUploaded(false);\r\n      setCustomerLoading(false);\r\n    } else if (type === 'forecastRevenue') { // NEW FILE TYPE\r\n      setForecastRevenueFile(null);\r\n      setForecastRevenueFileName('');\r\n      setForecastRevenueUploaded(false);\r\n      setForecastRevenueLoading(false);\r\n    } else if (type === 'associateMapping') {\r\n      setAssociateMappingFile(null);\r\n      setAssociateMappingFileName('');\r\n      setAssociateMappingUploaded(false);\r\n      setAssociateMappingLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles the \"Start Reconciliation\" button click in the Month/Year popup.\r\n   * Extracts month and year and navigates to the SBU level page.\r\n   */\r\n  const handleStartReconciliation = () => {\r\n    if (!selectedDate) {\r\n      // Use custom UI instead of alert for better UX\r\n      console.log('Please select both a month and a year.');\r\n      return;\r\n    }\r\n    // Extract month (1-indexed) and year from the selected Date object\r\n    const month = selectedDate.getMonth() + 1; // getMonth() is 0-indexed, so add 1\r\n    const year = selectedDate.getFullYear();\r\n    setShowGetDataPopup(false); // Close the popup\r\n\r\n    // Navigate to the SBU level page, passing month and year as state\r\n    navigate('/sbu', { state: { month: month, year: year } });\r\n  };\r\n\r\n  // Breadcrumb path configuration\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' },\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' }\r\n  ];\r\n\r\n  // Calculate maxDate for the DatePicker\r\n  // This will be the last day of the previous month\r\n  const today = new Date();\r\n  const lastDayOfPreviousMonth = new Date(today.getFullYear(), today.getMonth(), 0); // Day 0 of current month is last day of previous month\r\n\r\n  // Determine if the \"Get Data\" button should be enabled\r\n  // Requires Team, Customer, and Forecast Revenue files uploaded\r\n  const isGetDataButtonEnabled = teamUploaded && customerUploaded && forecastRevenueUploaded; // UPDATED LOGIC\r\n\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #e0f2fe, #f8fafc)'\r\n      }}\r\n    >\r\n      <div className=\"card shadow p-4 p-md-5 w-100\" style={{ maxWidth: '960px', backgroundColor: '#ffffffee' }}>\r\n        <Breadcrumbs path={breadcrumbPath} /> {/* Display breadcrumbs */}\r\n        <h2 className=\"text-center fw-bold text-dark mb-3\">Revenue Forecast – Early View</h2>\r\n        {/* Tab Navigation */}\r\n        <ul className=\"nav nav-pills nav-fill mb-5\" role=\"tablist\">\r\n          {uploadData.tabs.map((tab, i) => (\r\n            <li className=\"nav-item\" key={i}>\r\n              <button\r\n                type=\"button\"\r\n                className={`nav-link rounded-pill px-4 py-2 ${tab === 'Early View' ? 'active' : 'text-muted'}`}\r\n                style={{ fontWeight: 500 }}\r\n              >\r\n                {tab}\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <h4 className=\"fw-semibold text-dark mb-4\">Upload Required Files</h4>\r\n        {/* Upload Cards Section */}\r\n        {/* Changed 'row g-4' to 'row g-4 justify-content-center' for better 2x2 alignment if less than 4 cards */}\r\n        <div className=\"row g-4 justify-content-center\"> \r\n          {uploadData.cards.map((card) => {\r\n            let currentFileState, currentFileNameState, currentUploadedState, currentLoadingState;\r\n            let isDisabled = false; // Default to not disabled\r\n\r\n            // Dynamically assign correct state and handlers based on card type\r\n            if (card.type === 'team') {\r\n              currentFileState = teamFile;\r\n              currentFileNameState = teamFileName;\r\n              currentUploadedState = teamUploaded;\r\n              currentLoadingState = teamLoading;\r\n            } else if (card.type === 'customer') {\r\n              currentFileState = customerFile;\r\n              currentFileNameState = customerFileName;\r\n              currentUploadedState = customerUploaded;\r\n              currentLoadingState = customerLoading;\r\n            } else if (card.type === 'forecastRevenue') { // NEW CARD TYPE\r\n              currentFileState = forecastRevenueFile;\r\n              currentFileNameState = forecastRevenueFileName;\r\n              currentUploadedState = forecastRevenueUploaded;\r\n              currentLoadingState = forecastRevenueLoading;\r\n            } else if (card.type === 'associateMapping') {\r\n              currentFileState = associateMappingFile;\r\n              currentFileNameState = associateMappingFileName;\r\n              currentUploadedState = associateMappingUploaded;\r\n              currentLoadingState = associateMappingLoading;\r\n              // Disable associate mapping until team, customer, AND forecast are uploaded\r\n              isDisabled = !teamUploaded || !customerUploaded || !forecastRevenueUploaded; // UPDATED LOGIC\r\n            }\r\n\r\n            return (\r\n              <UploadCard\r\n                key={card.type}\r\n                title={card.title}\r\n                description={card.description}\r\n                icon={card.icon}\r\n                onFileSelect={(e) => handleFileSelect(card.type, e.target.files[0])}\r\n                onProcessUpload={() => handleProcessUpload(card.type)}\r\n                onRemove={() => handleRemoveFile(card.type)}\r\n                isSelected={!!currentFileState} // True if a file object exists\r\n                uploaded={currentUploadedState} // Reflects if upload was successful\r\n                fileName={currentFileNameState}\r\n                disabled={isDisabled} // Pass the calculated disabled state to UploadCard\r\n              >\r\n                {/* Render loading spinner as children when currentLoading is true */}\r\n                {currentLoadingState && <LoadingSpinner />}\r\n              </UploadCard>\r\n            );\r\n          })}\r\n        </div>\r\n        {/* \"Get Data\" Button - Appears only after Team, Customer, and Forecast Revenue files are uploaded */}\r\n        {isGetDataButtonEnabled && (\r\n          <div className=\"text-center mt-5\">\r\n            <button\r\n              className=\"btn btn-primary px-5 py-2\"\r\n              onClick={() => {\r\n                setSelectedDate(null); // Set to null to make DatePicker empty initially\r\n                setShowGetDataPopup(true); // Open Month/Year popup\r\n              }}\r\n            >\r\n              Get Data\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {/* Month/Year Selection Popup */}\r\n      {showGetDataPopup && (\r\n        <div\r\n          className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\"\r\n          style={{ zIndex: 999, minWidth: '360px' }}\r\n        >\r\n          <h5 className=\"fw-bold mb-3 text-center\">Select Month and Year</h5>\r\n          <div className=\"mb-3 text-center\">\r\n            <DatePicker\r\n              selected={selectedDate}\r\n              onChange={(date) => setSelectedDate(date)}\r\n              dateFormat=\"MM/yyyy\"\r\n              showMonthYearPicker\r\n              showFullMonthYearPicker // Ensures only month/year are selectable\r\n              maxDate={lastDayOfPreviousMonth} // <--- Restricts to past months\r\n              className=\"form-control text-center\" // Apply Bootstrap styling\r\n              placeholderText=\"Select Month & Year\"\r\n            />\r\n          </div>\r\n          <button\r\n            className=\"btn btn-primary w-100 mb-2\"\r\n            onClick={handleStartReconciliation}\r\n            disabled={!selectedDate} // Disable button if no date is selected\r\n          >\r\n            Start Reconciliation\r\n          </button>\r\n          <button className=\"btn btn-outline-secondary w-100\" onClick={() => setShowGetDataPopup(false)}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadFiles;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}