{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\ProjectLevel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport $ from 'jquery';\nimport 'datatables.net';\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\nimport Breadcrumbs from '../Breadcrumbs'; // Assuming this path is correct\nimport commonData from '../../data/commonData.json'; // Assuming this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    accountId: urlAccountId\n  } = useParams(); // accountId from URL path\n  const location = useLocation();\n  const tableRef = useRef(null);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\n  const [activeSbu, setActiveSbu] = useState(null);\n  const [activeProjectType, setActiveProjectType] = useState(null);\n\n  // Backend URL for API calls\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Currency formatting function\n  const formatCurrency = (value = 0) => value.toLocaleString(commonData.currencySettings.locale, {\n    style: 'currency',\n    currency: commonData.currencySettings.currency,\n    minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\n    maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\n  });\n\n  // Utility to get month name (for file naming)\n  const getMonthName = monthNumber => {\n    if (!monthNumber) return '';\n    const date = new Date();\n    date.setMonth(monthNumber - 1);\n    return date.toLocaleString('en-US', {\n      month: 'long'\n    });\n  };\n\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data and triggers a download.\r\n   */\n  const handleDownloadData = () => {\n    if (projects.length === 0) {\n      console.log('No data to download.');\n      return;\n    }\n\n    // Define CSV headers matching the table columns\n    const headers = [\"Project ID\", \"Project Name\", \"Total Associates\", \"Company Hours\", \"Client Hours\", \"Variance Hours\", \"Revenue\"];\n\n    // Map project data to CSV rows\n    const csvRows = projects.map(project => {\n      return [`\"${project.projectId}\"`,\n      // Enclose in quotes to handle commas if any\n      `\"${project.projectName}\"`, project.totalAssociatesCount, project.totalCompanyHours, project.totalClientHours, project.varianceHours, `\"${formatCurrency(project.revenue)}\"` // Format currency and enclose in quotes\n      ].join(','); // Join values with a comma\n    });\n\n    // Combine headers and rows\n    const csvContent = [headers.join(','),\n    // Join headers with a comma\n    ...csvRows].join('\\n'); // Join rows with a newline character\n\n    // Create a Blob from the CSV content\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n\n    // Create a download link and trigger the download\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n\n    // Generate a dynamic filename\n    const monthName = getMonthName(activeMonth);\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`;\n    link.setAttribute('href', url);\n    link.setAttribute('download', fileName);\n    link.style.visibility = 'hidden'; // Hide the link\n    document.body.appendChild(link); // Append to body\n    link.click(); // Programmatically click the link to trigger download\n    document.body.removeChild(link); // Clean up\n    URL.revokeObjectURL(url); // Release the object URL\n  };\n\n  // Load Poppins font from Google Fonts\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Fetch project data when context (month, year, accountId, projectType) changes\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5;\n    const fetchProjectData = async (month, year, accId, projectType) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const payload = {\n          month,\n          year,\n          accId,\n          projectType\n        };\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(payload)\n        });\n        if (!resp.ok) {\n          const errText = await resp.text();\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\n        }\n        const data = await resp.json();\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\n        setProjects(list);\n\n        // Derive accountName from response or sessionStorage\n        if (list.length > 0 && list[0].accountName) {\n          setActiveAccountName(list[0].accountName);\n        } else {\n          const storedName = sessionStorage.getItem('lastFetchedProjectAccountName');\n          setActiveAccountName(storedName || accId); // Fallback to accountId if name not found\n        }\n      } catch (e) {\n        console.error('Error fetching project data:', e);\n        setError(`Failed to load project data: ${e.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Determine context from location.state, URL params, or sessionStorage\n    let monthToUse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let yearToUse = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    let accountIdToUse = urlAccountId; // Always from URL params for this component\n    let accountNameToUse = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.accountName;\n    let sbuToUse = (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.sbu;\n    let projectTypeToUse = (_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.projectType;\n\n    // Prioritize sessionStorage for all parameters if not in location.state\n    // This makes the context retrieval more robust\n    if (!monthToUse) monthToUse = sessionStorage.getItem('lastFetchedProjectMonth');\n    if (!yearToUse) yearToUse = sessionStorage.getItem('lastFetchedProjectYear');\n    // accountIdToUse is primarily from useParams (urlAccountId)\n    if (!accountNameToUse) accountNameToUse = sessionStorage.getItem('lastFetchedProjectAccountName');\n    if (!sbuToUse) sbuToUse = sessionStorage.getItem('lastFetchedProjectSbu');\n    if (!projectTypeToUse) projectTypeToUse = sessionStorage.getItem('lastFetchedProjectType');\n\n    // Convert to number\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\n\n    // Only fetch data if all necessary context is available and it's a new context\n    if (monthToUse && yearToUse && accountIdToUse) {\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accountIdToUse !== activeAccountId || sbuToUse !== activeSbu || projectTypeToUse !== activeProjectType || projects.length === 0 // Re-fetch if projects array is empty (e.g., first load)\n      ) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        setActiveAccountId(accountIdToUse);\n        if (accountNameToUse) {\n          setActiveAccountName(accountNameToUse);\n        }\n        setActiveSbu(sbuToUse);\n        setActiveProjectType(projectTypeToUse);\n\n        // Persist context to sessionStorage for future loads\n        sessionStorage.setItem('lastFetchedProjectMonth', monthToUse.toString());\n        sessionStorage.setItem('lastFetchedProjectYear', yearToUse.toString());\n        sessionStorage.setItem('lastFetchedProjectAccountId', accountIdToUse);\n        if (accountNameToUse) {\n          sessionStorage.setItem('lastFetchedProjectAccountName', accountNameToUse);\n        }\n        if (sbuToUse) {\n          sessionStorage.setItem('lastFetchedProjectSbu', sbuToUse);\n        }\n        if (projectTypeToUse) {\n          sessionStorage.setItem('lastFetchedProjectType', projectTypeToUse);\n        }\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse);\n      } else {\n        setLoading(false);\n      }\n    } else {\n      setError('Missing month, year, or Account ID. Please navigate here with all parameters.');\n      setLoading(false);\n    }\n  }, [location.state, urlAccountId, activeMonth, activeYear, activeAccountId, activeSbu, activeProjectType, projects.length]);\n\n  // Initialize and destroy DataTable when projects data changes or component unmounts\n  useEffect(() => {\n    if (!loading && projects.length > 0 && tableRef.current) {\n      const $tbl = $(tableRef.current);\n      if ($.fn.DataTable.isDataTable($tbl)) {\n        $tbl.DataTable().destroy();\n      }\n      $tbl.DataTable({\n        paging: true,\n        searching: true,\n        ordering: true,\n        info: true,\n        autoWidth: false\n      });\n    }\n    return () => {\n      if (tableRef.current) {\n        const $tbl = $(tableRef.current);\n        if ($.fn.DataTable.isDataTable($tbl)) {\n          $tbl.DataTable().destroy();\n        }\n      }\n    };\n  }, [loading, projects]);\n\n  // Define breadcrumb path for navigation\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  },\n  // Conditionally add SBU Level\n  ...(activeSbu ? [{\n    name: `${activeSbu} SBU Level`,\n    page: 'sbu',\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }] : []),\n  // Account Level breadcrumb\n  {\n    name: 'Account Level',\n    page: `accounts`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  },\n  // Conditionally add Project Type breadcrumb (name changed to \"Project Type\")\n  ...(activeProjectType ? [{\n    name: `${activeProjectType} Project Type`,\n    page: `accounts/${activeAccountId}/project-types`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu,\n      accId: activeAccountId\n    }\n  }] : []), {\n    name: `Projects (${activeAccountName})`,\n    page: `accounts/${activeAccountId}/projects`\n  }].filter(Boolean);\n\n  // Render loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Project Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate('/accounts', {\n          state: {\n            month: activeMonth,\n            year: activeYear,\n            sbu: activeSbu\n          }\n        }),\n        children: \"Go to Account Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Main component render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '1200px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-0 fw-semibold text-dark\",\n          children: [\"\\uD83D\\uDCC1 Project Level Overview\", ' ', activeAccountId ? `for ${activeAccountName}` : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), projects.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-success rounded-pill px-3\",\n          onClick: handleDownloadData,\n          title: \"Download Project Data\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-download me-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this), \" Download Data\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          ref: tableRef,\n          className: \"display table table-hover align-middle table-borderless mb-0\",\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #3b82f6, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Total Associates\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Company Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Client Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Variance Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-center\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: projects.map(project => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.projectId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.projectName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalAssociatesCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalCompanyHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalClientHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.varianceHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatCurrency(project.revenue)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-sm btn-outline-primary rounded-circle\",\n                  onClick: () => navigate(`/projects/${project.projectId}/associates`, {\n                    state: {\n                      projectId: project.projectId,\n                      projectName: project.projectName,\n                      accountId: project.accountId,\n                      accountName: project.accountName,\n                      month: activeMonth,\n                      year: activeYear,\n                      sbu: activeSbu,\n                      projectType: activeProjectType\n                    }\n                  }),\n                  title: \"View Associates\",\n                  children: \"\\uD83D\\uDD0D\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 19\n              }, this)]\n            }, project.projectId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectLevel, \"ojgAonQJ8bEUW6BBqCDC7NFUhKI=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = ProjectLevel;\nexport default ProjectLevel;\nvar _c;\n$RefreshReg$(_c, \"ProjectLevel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","useParams","useLocation","$","Breadcrumbs","commonData","jsxDEV","_jsxDEV","ProjectLevel","_s","navigate","accountId","urlAccountId","location","tableRef","projects","setProjects","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","activeSbu","setActiveSbu","activeProjectType","setActiveProjectType","BACKEND_URL","formatCurrency","value","toLocaleString","currencySettings","locale","style","currency","minimumFractionDigits","maximumFractionDigits","getMonthName","monthNumber","date","Date","setMonth","month","handleDownloadData","length","console","log","headers","csvRows","map","project","projectId","projectName","totalAssociatesCount","totalCompanyHours","totalClientHours","varianceHours","revenue","join","csvContent","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","monthName","fileName","setAttribute","visibility","body","appendChild","click","removeChild","revokeObjectURL","href","rel","head","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","fetchProjectData","year","accId","projectType","payload","resp","fetch","method","JSON","stringify","ok","errText","text","Error","status","statusText","data","json","list","Array","isArray","filter","Boolean","accountName","storedName","sessionStorage","getItem","e","message","monthToUse","state","yearToUse","accountIdToUse","accountNameToUse","sbuToUse","sbu","projectTypeToUse","parseInt","setItem","toString","current","$tbl","fn","DataTable","isDataTable","destroy","paging","searching","ordering","info","autoWidth","breadcrumbPath","name","page","className","children","role","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","title","ref","width","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/ProjectLevel.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport $ from 'jquery';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\nimport Breadcrumbs from '../Breadcrumbs'; // Assuming this path is correct\r\nimport commonData from '../../data/commonData.json'; // Assuming this path is correct\r\n\r\nconst ProjectLevel = () => {\r\n  const navigate = useNavigate();\r\n  const { accountId: urlAccountId } = useParams(); // accountId from URL path\r\n  const location = useLocation();\r\n  const tableRef = useRef(null);\r\n\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n  const [activeAccountId, setActiveAccountId] = useState(null);\r\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n  const [activeSbu, setActiveSbu] = useState(null);\r\n  const [activeProjectType, setActiveProjectType] = useState(null);\r\n\r\n\r\n  // Backend URL for API calls\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Currency formatting function\r\n  const formatCurrency = (value = 0) =>\r\n    value.toLocaleString(commonData.currencySettings.locale, {\r\n      style: 'currency',\r\n      currency: commonData.currencySettings.currency,\r\n      minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\r\n      maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\r\n    });\r\n\r\n  // Utility to get month name (for file naming)\r\n  const getMonthName = (monthNumber) => {\r\n    if (!monthNumber) return '';\r\n    const date = new Date();\r\n    date.setMonth(monthNumber - 1);\r\n    return date.toLocaleString('en-US', { month: 'long' });\r\n  };\r\n\r\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data and triggers a download.\r\n   */\r\n  const handleDownloadData = () => {\r\n    if (projects.length === 0) {\r\n      console.log('No data to download.');\r\n      return;\r\n    }\r\n\r\n    // Define CSV headers matching the table columns\r\n    const headers = [\r\n      \"Project ID\", \"Project Name\", \"Total Associates\", \"Company Hours\",\r\n      \"Client Hours\", \"Variance Hours\", \"Revenue\"\r\n    ];\r\n\r\n    // Map project data to CSV rows\r\n    const csvRows = projects.map(project => {\r\n      return [\r\n        `\"${project.projectId}\"`, // Enclose in quotes to handle commas if any\r\n        `\"${project.projectName}\"`,\r\n        project.totalAssociatesCount,\r\n        project.totalCompanyHours,\r\n        project.totalClientHours,\r\n        project.varianceHours,\r\n        `\"${formatCurrency(project.revenue)}\"` // Format currency and enclose in quotes\r\n      ].join(','); // Join values with a comma\r\n    });\r\n\r\n    // Combine headers and rows\r\n    const csvContent = [\r\n      headers.join(','), // Join headers with a comma\r\n      ...csvRows\r\n    ].join('\\n'); // Join rows with a newline character\r\n\r\n    // Create a Blob from the CSV content\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n\r\n    // Create a download link and trigger the download\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    // Generate a dynamic filename\r\n    const monthName = getMonthName(activeMonth);\r\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`;\r\n\r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', fileName);\r\n    link.style.visibility = 'hidden'; // Hide the link\r\n    document.body.appendChild(link); // Append to body\r\n    link.click(); // Programmatically click the link to trigger download\r\n    document.body.removeChild(link); // Clean up\r\n    URL.revokeObjectURL(url); // Release the object URL\r\n  };\r\n\r\n  // Load Poppins font from Google Fonts\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Fetch project data when context (month, year, accountId, projectType) changes\r\n  useEffect(() => {\r\n    const fetchProjectData = async (month, year, accId, projectType) => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const payload = { month, year, accId, projectType };\r\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(payload)\r\n        });\r\n\r\n        if (!resp.ok) {\r\n          const errText = await resp.text();\r\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\r\n        }\r\n\r\n        const data = await resp.json();\r\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\r\n        setProjects(list);\r\n\r\n        // Derive accountName from response or sessionStorage\r\n        if (list.length > 0 && list[0].accountName) {\r\n          setActiveAccountName(list[0].accountName);\r\n        } else {\r\n          const storedName = sessionStorage.getItem('lastFetchedProjectAccountName');\r\n          setActiveAccountName(storedName || accId); // Fallback to accountId if name not found\r\n        }\r\n      } catch (e) {\r\n        console.error('Error fetching project data:', e);\r\n        setError(`Failed to load project data: ${e.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Determine context from location.state, URL params, or sessionStorage\r\n    let monthToUse = location.state?.month;\r\n    let yearToUse = location.state?.year;\r\n    let accountIdToUse = urlAccountId; // Always from URL params for this component\r\n    let accountNameToUse = location.state?.accountName;\r\n    let sbuToUse = location.state?.sbu;\r\n    let projectTypeToUse = location.state?.projectType;\r\n\r\n    // Prioritize sessionStorage for all parameters if not in location.state\r\n    // This makes the context retrieval more robust\r\n    if (!monthToUse) monthToUse = sessionStorage.getItem('lastFetchedProjectMonth');\r\n    if (!yearToUse) yearToUse = sessionStorage.getItem('lastFetchedProjectYear');\r\n    // accountIdToUse is primarily from useParams (urlAccountId)\r\n    if (!accountNameToUse) accountNameToUse = sessionStorage.getItem('lastFetchedProjectAccountName');\r\n    if (!sbuToUse) sbuToUse = sessionStorage.getItem('lastFetchedProjectSbu');\r\n    if (!projectTypeToUse) projectTypeToUse = sessionStorage.getItem('lastFetchedProjectType');\r\n\r\n    // Convert to number\r\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\r\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\r\n\r\n    // Only fetch data if all necessary context is available and it's a new context\r\n    if (monthToUse && yearToUse && accountIdToUse) {\r\n      if (\r\n        monthToUse !== activeMonth ||\r\n        yearToUse !== activeYear ||\r\n        accountIdToUse !== activeAccountId ||\r\n        sbuToUse !== activeSbu ||\r\n        projectTypeToUse !== activeProjectType ||\r\n        projects.length === 0 // Re-fetch if projects array is empty (e.g., first load)\r\n      ) {\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        setActiveAccountId(accountIdToUse);\r\n        if (accountNameToUse) {\r\n          setActiveAccountName(accountNameToUse);\r\n        }\r\n        setActiveSbu(sbuToUse);\r\n        setActiveProjectType(projectTypeToUse);\r\n\r\n        // Persist context to sessionStorage for future loads\r\n        sessionStorage.setItem('lastFetchedProjectMonth', monthToUse.toString());\r\n        sessionStorage.setItem('lastFetchedProjectYear', yearToUse.toString());\r\n        sessionStorage.setItem('lastFetchedProjectAccountId', accountIdToUse);\r\n        if (accountNameToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectAccountName', accountNameToUse);\r\n        }\r\n        if (sbuToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectSbu', sbuToUse);\r\n        }\r\n        if (projectTypeToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectType', projectTypeToUse);\r\n        }\r\n\r\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setError('Missing month, year, or Account ID. Please navigate here with all parameters.');\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    location.state,\r\n    urlAccountId,\r\n    activeMonth,\r\n    activeYear,\r\n    activeAccountId,\r\n    activeSbu,\r\n    activeProjectType,\r\n    projects.length\r\n  ]);\r\n\r\n  // Initialize and destroy DataTable when projects data changes or component unmounts\r\n  useEffect(() => {\r\n    if (!loading && projects.length > 0 && tableRef.current) {\r\n      const $tbl = $(tableRef.current);\r\n      if ($.fn.DataTable.isDataTable($tbl)) {\r\n        $tbl.DataTable().destroy();\r\n      }\r\n      $tbl.DataTable({\r\n        paging: true,\r\n        searching: true,\r\n        ordering: true,\r\n        info: true,\r\n        autoWidth: false\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (tableRef.current) {\r\n        const $tbl = $(tableRef.current);\r\n        if ($.fn.DataTable.isDataTable($tbl)) {\r\n          $tbl.DataTable().destroy();\r\n        }\r\n      }\r\n    };\r\n  }, [loading, projects]);\r\n\r\n  // Define breadcrumb path for navigation\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' },\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n    // Conditionally add SBU Level\r\n    ...(activeSbu ? [{ name: `${activeSbu} SBU Level`, page: 'sbu', state: { month: activeMonth, year: activeYear, sbu: activeSbu } }] : []),\r\n    // Account Level breadcrumb\r\n    { name: 'Account Level', page: `accounts`, state: { month: activeMonth, year: activeYear, sbu: activeSbu } },\r\n    // Conditionally add Project Type breadcrumb (name changed to \"Project Type\")\r\n    ...(activeProjectType ? [{ name: `${activeProjectType} Project Type`, page: `accounts/${activeAccountId}/project-types`, state: { month: activeMonth, year: activeYear, sbu: activeSbu, accId: activeAccountId } }] : []),\r\n    {\r\n      name: `Projects (${activeAccountName})`,\r\n      page: `accounts/${activeAccountId}/projects`\r\n    }\r\n  ].filter(Boolean);\r\n\r\n  // Render loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\" />\r\n        <p className=\"ms-3 text-primary\">Loading Project Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        <button\r\n          className=\"btn btn-primary mt-3\"\r\n          onClick={() => navigate('/accounts', { state: { month: activeMonth, year: activeYear, sbu: activeSbu } })}\r\n        >\r\n          Go to Account Level\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main component render\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{\r\n          maxWidth: '1200px',\r\n          backgroundColor: '#ffffffdd',\r\n          borderRadius: '1rem'\r\n        }}\r\n      >\r\n        {/* Breadcrumbs component */}\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n          <h2 className=\"mb-0 fw-semibold text-dark\">\r\n            📁 Project Level Overview{' '}\r\n            {activeAccountId ? `for ${activeAccountName}` : ''}\r\n          </h2>\r\n          {/* Download button, visible only if projects are loaded */}\r\n          {projects.length > 0 && (\r\n            <button\r\n              className=\"btn btn-outline-success rounded-pill px-3\"\r\n              onClick={handleDownloadData}\r\n              title=\"Download Project Data\"\r\n            >\r\n              <i className=\"bi bi-download me-2\"></i> Download Data\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Responsive table container */}\r\n        <div className=\"table-responsive rounded\">\r\n          <table\r\n            ref={tableRef}\r\n            className=\"display table table-hover align-middle table-borderless mb-0\"\r\n            style={{ width: '100%' }}\r\n          >\r\n            <thead\r\n              className=\"text-white\"\r\n              style={{ background: 'linear-gradient(to right, #3b82f6, #2563eb)' }}\r\n            >\r\n              <tr>\r\n                <th>Project ID</th>\r\n                <th>Project Name</th>\r\n                <th>Total Associates</th>\r\n                <th>Company Hours</th>\r\n                <th>Client Hours</th>\r\n                <th>Variance Hours</th>\r\n                <th>Revenue</th>\r\n                <th className=\"text-center\">View</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {/* Map through projects data to render table rows */}\r\n              {projects.map(project => (\r\n                <tr key={project.projectId}>\r\n                  <td>{project.projectId}</td>\r\n                  <td>{project.projectName}</td>\r\n                  <td>{project.totalAssociatesCount}</td>\r\n                  <td>{project.totalCompanyHours}</td>\r\n                  <td>{project.totalClientHours}</td>\r\n                  <td>{project.varianceHours}</td>\r\n                  <td>{formatCurrency(project.revenue)}</td>\r\n                  <td className=\"text-center\">\r\n                    {/* Button to navigate to Associate Level details */}\r\n                    <button\r\n                      className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n                      onClick={() =>\r\n                        navigate(\r\n                          `/projects/${project.projectId}/associates`,\r\n                          {\r\n                            state: {\r\n                              projectId: project.projectId,\r\n                              projectName: project.projectName,\r\n                              accountId: project.accountId,\r\n                              accountName: project.accountName,\r\n                              month: activeMonth,\r\n                              year: activeYear,\r\n                              sbu: activeSbu,\r\n                              projectType: activeProjectType\r\n                            }\r\n                          }\r\n                        )\r\n                      }\r\n                      title=\"View Associates\"\r\n                    >\r\n                      🔍\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectLevel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}