{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\ProjectLevel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport $ from 'jquery';\nimport 'datatables.net';\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\n// Assuming Breadcrumbs and commonData are available in the correct relative paths\nimport Breadcrumbs from '../Breadcrumbs'; // Uncomment if you have this component\nimport commonData from '../../data/commonData.json'; // Uncomment if you have this file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    accountId: urlAccountId\n  } = useParams();\n  const location = useLocation();\n  const tableRef = useRef(null);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\n  // New state variables to store SBU and Project Type for breadcrumbs and navigation\n  const [activeSbu, setActiveSbu] = useState(null);\n  const [activeProjectType, setActiveProjectType] = useState(null);\n\n  // Backend URL for API calls\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Currency formatting function\n  const formatCurrency = (value = 0) => value.toLocaleString(commonData.currencySettings.locale, {\n    style: 'currency',\n    currency: commonData.currencySettings.currency,\n    minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\n    maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\n  });\n\n  // Placeholder download logic\n  const handleDownloadData = () => {\n    // In a real application, replace this with actual CSV/Excel download logic\n    console.log('Download Project Data button clicked!');\n    // Example: Trigger a backend endpoint to generate and download a file\n    // window.open(`${BACKEND_URL}/api/download-projects?month=${activeMonth}&year=${activeYear}&accountId=${activeAccountId}`);\n  };\n\n  // Load Poppins font from Google Fonts\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Fetch project data when context (month, year, accountId, projectType) changes\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5;\n    const fetchProjectData = async (month, year, accId, projectType) => {\n      // Added projectType parameter\n      setLoading(true);\n      setError(null);\n      try {\n        const payload = {\n          month,\n          year,\n          accId,\n          projectType\n        }; // Include projectType in payload\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(payload)\n        });\n        if (!resp.ok) {\n          const errText = await resp.text();\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\n        }\n        const data = await resp.json();\n        // Ensure data is always an array for consistent processing\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\n        setProjects(list);\n\n        // Derive accountName from response or sessionStorage\n        if (list.length > 0 && list[0].accountName) {\n          setActiveAccountName(list[0].accountName);\n        } else {\n          const storedName = sessionStorage.getItem('lastFetchedProjectAccountName');\n          setActiveAccountName(storedName || accId); // Fallback to accountId if name not found\n        }\n      } catch (e) {\n        console.error('Error fetching project data:', e);\n        setError(`Failed to load project data: ${e.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Determine context from location.state, URL params, or sessionStorage\n    let monthToUse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let yearToUse = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    let accountIdToUse = urlAccountId; // From URL params\n    let accountNameToUse = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.accountName;\n    let sbuToUse = (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.sbu; // NEW: Get SBU from state\n    let projectTypeToUse = (_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.projectType; // NEW: Get projectType from state\n\n    // If context is missing from location.state, try sessionStorage\n    if (!monthToUse || !yearToUse || !accountIdToUse) {\n      const sm = sessionStorage.getItem('lastFetchedProjectMonth');\n      const sy = sessionStorage.getItem('lastFetchedProjectYear');\n      const sa = sessionStorage.getItem('lastFetchedProjectAccountId');\n      const san = sessionStorage.getItem('lastFetchedProjectAccountName');\n      const ssbu = sessionStorage.getItem('lastFetchedProjectSbu'); // NEW\n      const spt = sessionStorage.getItem('lastFetchedProjectType'); // NEW\n\n      if (sm && sy && sa) {\n        monthToUse = parseInt(sm, 10);\n        yearToUse = parseInt(sy, 10);\n        accountIdToUse = sa;\n        accountNameToUse = san;\n        sbuToUse = ssbu; // NEW\n        projectTypeToUse = spt; // NEW\n      }\n    }\n\n    // Only fetch data if all necessary context is available and it's a new context\n    if (monthToUse && yearToUse && accountIdToUse) {\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accountIdToUse !== activeAccountId || sbuToUse !== activeSbu ||\n      // Re-fetch if SBU changes\n      projectTypeToUse !== activeProjectType ||\n      // Re-fetch if projectType changes\n      projects.length === 0 // Re-fetch if projects array is empty (e.g., first load)\n      ) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        setActiveAccountId(accountIdToUse);\n        if (accountNameToUse) {\n          setActiveAccountName(accountNameToUse);\n        }\n        setActiveSbu(sbuToUse); // Set active SBU\n        setActiveProjectType(projectTypeToUse); // Set active Project Type\n\n        // Persist context to sessionStorage for future loads\n        sessionStorage.setItem('lastFetchedProjectMonth', monthToUse.toString());\n        sessionStorage.setItem('lastFetchedProjectYear', yearToUse.toString());\n        sessionStorage.setItem('lastFetchedProjectAccountId', accountIdToUse);\n        if (accountNameToUse) {\n          sessionStorage.setItem('lastFetchedProjectAccountName', accountNameToUse);\n        }\n        if (sbuToUse) {\n          sessionStorage.setItem('lastFetchedProjectSbu', sbuToUse);\n        }\n        if (projectTypeToUse) {\n          sessionStorage.setItem('lastFetchedProjectType', projectTypeToUse);\n        }\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse); // Pass projectType\n      } else {\n        // If context hasn't changed and projects are already loaded, just set loading to false\n        setLoading(false);\n      }\n    } else {\n      // If essential context is missing, show an error\n      setError('Missing project context (month, year, or account ID). Please go back.');\n      setLoading(false);\n    }\n  }, [location.state, urlAccountId, activeMonth, activeYear, activeAccountId, activeSbu,\n  // Add activeSbu to dependencies\n  activeProjectType,\n  // Add activeProjectType to dependencies\n  projects.length // Include projects.length to trigger re-fetch if data is cleared\n  ]);\n\n  // Initialize and destroy DataTable when projects data changes or component unmounts\n  useEffect(() => {\n    if (!loading && projects.length > 0 && tableRef.current) {\n      const $tbl = $(tableRef.current);\n      // Destroy existing DataTable instance if it exists\n      if ($.fn.DataTable.isDataTable($tbl)) {\n        $tbl.DataTable().destroy();\n      }\n      // Initialize new DataTable instance\n      $tbl.DataTable({\n        paging: true,\n        searching: true,\n        ordering: true,\n        info: true,\n        autoWidth: false\n      });\n    }\n\n    // Cleanup function to destroy DataTable when component unmounts or dependencies change\n    return () => {\n      if (tableRef.current) {\n        const $tbl = $(tableRef.current);\n        if ($.fn.DataTable.isDataTable($tbl)) {\n          $tbl.DataTable().destroy();\n        }\n      }\n    };\n  }, [loading, projects]); // Re-run effect when loading or projects data changes\n\n  // Define breadcrumb path for navigation\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  },\n  // Navigates to root (e.g., your main dashboard)\n  {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  },\n  // Navigates to the upload page\n  // Conditionally add SBU Level if activeSbu is available\n  ...(activeSbu ? [{\n    name: `${activeSbu} SBU Level`,\n    page: 'sbu',\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }] : []),\n  // Account Level breadcrumb, passing necessary state back to AccountLevel\n  {\n    name: 'Account Level',\n    page: `accounts`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  },\n  // Conditionally add Project Type Level if activeProjectType is available\n  ...(activeProjectType ? [{\n    name: `${activeProjectType} Project Type Level`,\n    page: `accounts/${activeAccountId}/project-types`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu,\n      accId: activeAccountId\n    }\n  }] : []), {\n    name: `Projects (${activeAccountName})`,\n    // The current page doesn't need a `page` property for navigation within itself\n    // but it's good to keep for consistency in Breadcrumbs component if it handles active state.\n    page: `accounts/${activeAccountId}/projects`\n  }].filter(Boolean); // Filter out any null/undefined entries\n\n  // Render loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Project Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate('/accounts', {\n          state: {\n            month: activeMonth,\n            year: activeYear,\n            sbu: activeSbu\n          }\n        }) // Navigate back to account level with state\n        ,\n        children: \"Go to Account Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Main component render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '1200px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-0 fw-semibold text-dark\",\n          children: [\"\\uD83D\\uDCC1 Project Level Overview\", ' ', activeAccountId ? `for ${activeAccountName}` : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), projects.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-success rounded-pill px-3\",\n          onClick: handleDownloadData,\n          title: \"Download Project Data\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-download me-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this), \" Download Data\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          ref: tableRef,\n          className: \"display table table-hover align-middle table-borderless mb-0\",\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #3b82f6, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Total Associates\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Company Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Client Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Variance Hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-center\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: projects.map(project => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.projectId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.projectName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalAssociatesCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalCompanyHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalClientHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.varianceHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatCurrency(project.revenue)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-sm btn-outline-primary rounded-circle\",\n                  onClick: () => navigate(`/projects/${project.projectId}/associates`, {\n                    state: {\n                      projectId: project.projectId,\n                      projectName: project.projectName,\n                      accountId: project.accountId,\n                      accountName: project.accountName,\n                      month: activeMonth,\n                      year: activeYear,\n                      sbu: activeSbu,\n                      // Pass activeSbu\n                      projectType: activeProjectType // Pass activeProjectType\n                    }\n                  }),\n                  title: \"View Associates\",\n                  children: \"\\uD83D\\uDD0D\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 19\n              }, this)]\n            }, project.projectId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectLevel, \"ojgAonQJ8bEUW6BBqCDC7NFUhKI=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = ProjectLevel;\nexport default ProjectLevel;\nvar _c;\n$RefreshReg$(_c, \"ProjectLevel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","useParams","useLocation","$","Breadcrumbs","commonData","jsxDEV","_jsxDEV","ProjectLevel","_s","navigate","accountId","urlAccountId","location","tableRef","projects","setProjects","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","activeSbu","setActiveSbu","activeProjectType","setActiveProjectType","BACKEND_URL","formatCurrency","value","toLocaleString","currencySettings","locale","style","currency","minimumFractionDigits","maximumFractionDigits","handleDownloadData","console","log","link","document","createElement","href","rel","head","appendChild","body","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","fetchProjectData","month","year","accId","projectType","payload","resp","fetch","method","headers","JSON","stringify","ok","errText","text","Error","status","statusText","data","json","list","Array","isArray","filter","Boolean","length","accountName","storedName","sessionStorage","getItem","e","message","monthToUse","state","yearToUse","accountIdToUse","accountNameToUse","sbuToUse","sbu","projectTypeToUse","sm","sy","sa","san","ssbu","spt","parseInt","setItem","toString","current","$tbl","fn","DataTable","isDataTable","destroy","paging","searching","ordering","info","autoWidth","breadcrumbPath","name","page","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","title","ref","width","map","project","projectId","projectName","totalAssociatesCount","totalCompanyHours","totalClientHours","varianceHours","revenue","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/ProjectLevel.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport $ from 'jquery';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\n// Assuming Breadcrumbs and commonData are available in the correct relative paths\r\nimport Breadcrumbs from '../Breadcrumbs'; // Uncomment if you have this component\r\nimport commonData from '../../data/commonData.json'; // Uncomment if you have this file\r\n\r\nconst ProjectLevel = () => {\r\n  const navigate = useNavigate();\r\n  const { accountId: urlAccountId } = useParams();\r\n  const location = useLocation();\r\n  const tableRef = useRef(null);\r\n\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n  const [activeAccountId, setActiveAccountId] = useState(null);\r\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n  // New state variables to store SBU and Project Type for breadcrumbs and navigation\r\n  const [activeSbu, setActiveSbu] = useState(null);\r\n  const [activeProjectType, setActiveProjectType] = useState(null);\r\n\r\n\r\n  // Backend URL for API calls\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Currency formatting function\r\n  const formatCurrency = (value = 0) =>\r\n    value.toLocaleString(commonData.currencySettings.locale, {\r\n      style: 'currency',\r\n      currency: commonData.currencySettings.currency,\r\n      minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\r\n      maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\r\n    });\r\n\r\n  // Placeholder download logic\r\n  const handleDownloadData = () => {\r\n    // In a real application, replace this with actual CSV/Excel download logic\r\n    console.log('Download Project Data button clicked!');\r\n    // Example: Trigger a backend endpoint to generate and download a file\r\n    // window.open(`${BACKEND_URL}/api/download-projects?month=${activeMonth}&year=${activeYear}&accountId=${activeAccountId}`);\r\n  };\r\n\r\n  // Load Poppins font from Google Fonts\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Fetch project data when context (month, year, accountId, projectType) changes\r\n  useEffect(() => {\r\n    const fetchProjectData = async (month, year, accId, projectType) => { // Added projectType parameter\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const payload = { month, year, accId, projectType }; // Include projectType in payload\r\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(payload)\r\n        });\r\n\r\n        if (!resp.ok) {\r\n          const errText = await resp.text();\r\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\r\n        }\r\n\r\n        const data = await resp.json();\r\n        // Ensure data is always an array for consistent processing\r\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\r\n        setProjects(list);\r\n\r\n        // Derive accountName from response or sessionStorage\r\n        if (list.length > 0 && list[0].accountName) {\r\n          setActiveAccountName(list[0].accountName);\r\n        } else {\r\n          const storedName = sessionStorage.getItem('lastFetchedProjectAccountName');\r\n          setActiveAccountName(storedName || accId); // Fallback to accountId if name not found\r\n        }\r\n      } catch (e) {\r\n        console.error('Error fetching project data:', e);\r\n        setError(`Failed to load project data: ${e.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Determine context from location.state, URL params, or sessionStorage\r\n    let monthToUse = location.state?.month;\r\n    let yearToUse = location.state?.year;\r\n    let accountIdToUse = urlAccountId; // From URL params\r\n    let accountNameToUse = location.state?.accountName;\r\n    let sbuToUse = location.state?.sbu; // NEW: Get SBU from state\r\n    let projectTypeToUse = location.state?.projectType; // NEW: Get projectType from state\r\n\r\n    // If context is missing from location.state, try sessionStorage\r\n    if (!monthToUse || !yearToUse || !accountIdToUse) {\r\n      const sm = sessionStorage.getItem('lastFetchedProjectMonth');\r\n      const sy = sessionStorage.getItem('lastFetchedProjectYear');\r\n      const sa = sessionStorage.getItem('lastFetchedProjectAccountId');\r\n      const san = sessionStorage.getItem('lastFetchedProjectAccountName');\r\n      const ssbu = sessionStorage.getItem('lastFetchedProjectSbu'); // NEW\r\n      const spt = sessionStorage.getItem('lastFetchedProjectType'); // NEW\r\n\r\n      if (sm && sy && sa) {\r\n        monthToUse = parseInt(sm, 10);\r\n        yearToUse = parseInt(sy, 10);\r\n        accountIdToUse = sa;\r\n        accountNameToUse = san;\r\n        sbuToUse = ssbu; // NEW\r\n        projectTypeToUse = spt; // NEW\r\n      }\r\n    }\r\n\r\n    // Only fetch data if all necessary context is available and it's a new context\r\n    if (monthToUse && yearToUse && accountIdToUse) {\r\n      if (\r\n        monthToUse !== activeMonth ||\r\n        yearToUse !== activeYear ||\r\n        accountIdToUse !== activeAccountId ||\r\n        sbuToUse !== activeSbu || // Re-fetch if SBU changes\r\n        projectTypeToUse !== activeProjectType || // Re-fetch if projectType changes\r\n        projects.length === 0 // Re-fetch if projects array is empty (e.g., first load)\r\n      ) {\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        setActiveAccountId(accountIdToUse);\r\n        if (accountNameToUse) {\r\n          setActiveAccountName(accountNameToUse);\r\n        }\r\n        setActiveSbu(sbuToUse); // Set active SBU\r\n        setActiveProjectType(projectTypeToUse); // Set active Project Type\r\n\r\n        // Persist context to sessionStorage for future loads\r\n        sessionStorage.setItem('lastFetchedProjectMonth', monthToUse.toString());\r\n        sessionStorage.setItem('lastFetchedProjectYear', yearToUse.toString());\r\n        sessionStorage.setItem('lastFetchedProjectAccountId', accountIdToUse);\r\n        if (accountNameToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectAccountName', accountNameToUse);\r\n        }\r\n        if (sbuToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectSbu', sbuToUse);\r\n        }\r\n        if (projectTypeToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectType', projectTypeToUse);\r\n        }\r\n\r\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse); // Pass projectType\r\n      } else {\r\n        // If context hasn't changed and projects are already loaded, just set loading to false\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      // If essential context is missing, show an error\r\n      setError('Missing project context (month, year, or account ID). Please go back.');\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    location.state,\r\n    urlAccountId,\r\n    activeMonth,\r\n    activeYear,\r\n    activeAccountId,\r\n    activeSbu, // Add activeSbu to dependencies\r\n    activeProjectType, // Add activeProjectType to dependencies\r\n    projects.length // Include projects.length to trigger re-fetch if data is cleared\r\n  ]);\r\n\r\n  // Initialize and destroy DataTable when projects data changes or component unmounts\r\n  useEffect(() => {\r\n    if (!loading && projects.length > 0 && tableRef.current) {\r\n      const $tbl = $(tableRef.current);\r\n      // Destroy existing DataTable instance if it exists\r\n      if ($.fn.DataTable.isDataTable($tbl)) {\r\n        $tbl.DataTable().destroy();\r\n      }\r\n      // Initialize new DataTable instance\r\n      $tbl.DataTable({\r\n        paging: true,\r\n        searching: true,\r\n        ordering: true,\r\n        info: true,\r\n        autoWidth: false\r\n      });\r\n    }\r\n\r\n    // Cleanup function to destroy DataTable when component unmounts or dependencies change\r\n    return () => {\r\n      if (tableRef.current) {\r\n        const $tbl = $(tableRef.current);\r\n        if ($.fn.DataTable.isDataTable($tbl)) {\r\n          $tbl.DataTable().destroy();\r\n        }\r\n      }\r\n    };\r\n  }, [loading, projects]); // Re-run effect when loading or projects data changes\r\n\r\n  // Define breadcrumb path for navigation\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' }, // Navigates to root (e.g., your main dashboard)\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' }, // Navigates to the upload page\r\n    // Conditionally add SBU Level if activeSbu is available\r\n    ...(activeSbu ? [{ name: `${activeSbu} SBU Level`, page: 'sbu', state: { month: activeMonth, year: activeYear, sbu: activeSbu } }] : []),\r\n    // Account Level breadcrumb, passing necessary state back to AccountLevel\r\n    { name: 'Account Level', page: `accounts`, state: { month: activeMonth, year: activeYear, sbu: activeSbu } },\r\n    // Conditionally add Project Type Level if activeProjectType is available\r\n    ...(activeProjectType ? [{ name: `${activeProjectType} Project Type Level`, page: `accounts/${activeAccountId}/project-types`, state: { month: activeMonth, year: activeYear, sbu: activeSbu, accId: activeAccountId } }] : []),\r\n    {\r\n      name: `Projects (${activeAccountName})`,\r\n      // The current page doesn't need a `page` property for navigation within itself\r\n      // but it's good to keep for consistency in Breadcrumbs component if it handles active state.\r\n      page: `accounts/${activeAccountId}/projects`\r\n    }\r\n  ].filter(Boolean); // Filter out any null/undefined entries\r\n\r\n  // Render loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\" />\r\n        <p className=\"ms-3 text-primary\">Loading Project Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        <button\r\n          className=\"btn btn-primary mt-3\"\r\n          onClick={() => navigate('/accounts', { state: { month: activeMonth, year: activeYear, sbu: activeSbu } })} // Navigate back to account level with state\r\n        >\r\n          Go to Account Level\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main component render\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{\r\n          maxWidth: '1200px',\r\n          backgroundColor: '#ffffffdd',\r\n          borderRadius: '1rem'\r\n        }}\r\n      >\r\n        {/* Breadcrumbs component */}\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n          <h2 className=\"mb-0 fw-semibold text-dark\">\r\n            📁 Project Level Overview{' '}\r\n            {activeAccountId ? `for ${activeAccountName}` : ''}\r\n          </h2>\r\n          {/* Download button, visible only if projects are loaded */}\r\n          {projects.length > 0 && (\r\n            <button\r\n              className=\"btn btn-outline-success rounded-pill px-3\"\r\n              onClick={handleDownloadData}\r\n              title=\"Download Project Data\"\r\n            >\r\n              <i className=\"bi bi-download me-2\"></i> Download Data\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Responsive table container */}\r\n        <div className=\"table-responsive rounded\">\r\n          <table\r\n            ref={tableRef}\r\n            className=\"display table table-hover align-middle table-borderless mb-0\"\r\n            style={{ width: '100%' }}\r\n          >\r\n            <thead\r\n              className=\"text-white\"\r\n              style={{ background: 'linear-gradient(to right, #3b82f6, #2563eb)' }}\r\n            >\r\n              <tr>\r\n                <th>Project ID</th>\r\n                <th>Project Name</th>\r\n                <th>Total Associates</th>\r\n                <th>Company Hours</th>\r\n                <th>Client Hours</th>\r\n                <th>Variance Hours</th>\r\n                <th>Revenue</th>\r\n                <th className=\"text-center\">View</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {/* Map through projects data to render table rows */}\r\n              {projects.map(project => (\r\n                <tr key={project.projectId}>\r\n                  <td>{project.projectId}</td>\r\n                  <td>{project.projectName}</td>\r\n                  <td>{project.totalAssociatesCount}</td>\r\n                  <td>{project.totalCompanyHours}</td>\r\n                  <td>{project.totalClientHours}</td>\r\n                  <td>{project.varianceHours}</td>\r\n                  <td>{formatCurrency(project.revenue)}</td>\r\n                  <td className=\"text-center\">\r\n                    {/* Button to navigate to Associate Level details */}\r\n                    <button\r\n                      className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n                      onClick={() =>\r\n                        navigate(\r\n                          `/projects/${project.projectId}/associates`,\r\n                          {\r\n                            state: {\r\n                              projectId: project.projectId,\r\n                              projectName: project.projectName,\r\n                              accountId: project.accountId,\r\n                              accountName: project.accountName,\r\n                              month: activeMonth,\r\n                              year: activeYear,\r\n                              sbu: activeSbu, // Pass activeSbu\r\n                              projectType: activeProjectType // Pass activeProjectType\r\n                            }\r\n                          }\r\n                        )\r\n                      }\r\n                      title=\"View Associates\"\r\n                    >\r\n                      🔍\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectLevel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}