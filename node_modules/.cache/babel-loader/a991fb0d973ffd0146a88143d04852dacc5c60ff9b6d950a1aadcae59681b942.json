{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\Frontend\\\\Revenue-forecast\\\\src\\\\components\\\\Details\\\\ProjectLevel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useNavigate, useParams, useLocation } from \"react-router-dom\";\nimport $ from \"jquery\";\nimport \"datatables.net\";\nimport \"datatables.net-dt/css/dataTables.dataTables.min.css\";\nimport Breadcrumbs from \"../Breadcrumbs\";\nimport commonData from \"../../data/commonData.json\";\n\n// Declare the BACKEND_URL constant at the top level\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_URL = \"http://localhost:8081\";\nconst ProjectLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    accountId: urlAccountId\n  } = useParams();\n  const location = useLocation();\n  const tableRef = useRef(null);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState(\"Loading...\");\n  const [activeSbu, setActiveSbu] = useState(null);\n  const [activeProjectType, setActiveProjectType] = useState(null);\n\n  // State to manage column filters\n  const [columnFilters, setColumnFilters] = useState({});\n\n  // Currency formatting function\n  const formatCurrency = (value = 0) => value.toLocaleString(commonData.currencySettings.locale, {\n    style: \"currency\",\n    currency: commonData.currencySettings.currency,\n    minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\n    maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\n  });\n\n  // Utility to get month name (for file naming)\n  const getMonthName = monthNumber => {\n    if (!monthNumber) return \"\";\n    const date = new Date();\n    date.setMonth(monthNumber - 1);\n    return date.toLocaleString(\"en-US\", {\n      month: \"long\"\n    });\n  };\n\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data and triggers a download.\r\n   */\n  const handleDownloadData = () => {\n    if (projects.length === 0) {\n      console.log(\"No data to download.\");\n      return;\n    }\n\n    // Define CSV headers matching the table columns\n    const headers = [\"Project ID\", \"Project Name\", \"Total Associates\", \"Company Hours\", \"Client Hours\", \"Variance Hours\", \"Revenue\"];\n\n    // Map projects data to CSV rows, using the currently filtered projects\n    const csvRows = applyFilters(projects, columnFilters).map(project => {\n      return [`\"${project.projectId}\"`, `\"${project.projectName}\"`, project.totalAssociatesCount, project.totalCompanyHours, project.totalClientHours, project.varianceHours, `\"${formatCurrency(project.revenue)}\"`].join(\",\");\n    });\n    const csvContent = [headers.join(\",\"), ...csvRows].join(\"\\n\");\n    const blob = new Blob([csvContent], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(blob);\n    const monthName = getMonthName(activeMonth);\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`;\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", fileName);\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  /**\r\n   * Generates a unique list of options for a given column key.\r\n   * @param {string} columnKey The key of the column to get unique values for.\r\n   * @returns {string[]} An array of unique values, including an 'All' option.\r\n   */\n  const getUniqueOptions = columnKey => {\n    // Return default options if projects is not available\n    if (!projects || !Array.isArray(projects) || projects.length === 0) {\n      return [\"All\"];\n    }\n\n    // Build option values consistently with what is rendered in the table\n    const options = projects.map(project => {\n      const value = project[columnKey];\n      if (columnKey === \"revenue\") {\n        // Table shows formatted currency, so dropdown must match that exactly\n        return formatCurrency(value);\n      }\n      return String(value);\n    });\n\n    // Ensure stable sorting: numeric columns sorted numerically, others lexicographically\n    const uniqueOptions = [...new Set(options)].sort((a, b) => {\n      const isNumericColumn = columnKey === \"totalAssociatesCount\" || columnKey === \"totalCompanyHours\" || columnKey === \"totalClientHours\" || columnKey === \"varianceHours\";\n      if (isNumericColumn) {\n        return Number(a) - Number(b);\n      }\n      return a.localeCompare(b);\n    });\n    return [\"All\", ...uniqueOptions];\n  };\n\n  /**\r\n   * Handles changes to a column's filter dropdown.\r\n   * Updates the `columnFilters` state with the new value.\r\n   * @param {string} columnKey The key of the column being filtered.\r\n   * @param {string} value The selected filter value.\r\n   */\n  const handleFilterChange = (columnKey, value) => {\n    setColumnFilters(prevFilters => ({\n      ...prevFilters,\n      [columnKey]: value === \"All\" ? null : value\n    }));\n  };\n\n  /**\r\n   * Filters the projects array based on the current columnFilters state.\r\n   * This is used for the download functionality to get the currently filtered data.\r\n   * DataTables handles the actual table filtering.\r\n   * @param {Array} projectsArray The array of projects to filter.\r\n   * @param {Object} filters The object containing column filters.\r\n   * @returns {Array} The filtered array of projects.\r\n   */\n  const applyFilters = (projectsArray, filters) => {\n    return projectsArray.filter(project => {\n      return Object.keys(filters).every(columnKey => {\n        const filterValue = filters[columnKey];\n        if (filterValue === null || filterValue === undefined) {\n          return true; // No filter applied for this column\n        }\n        const projectValue = project[columnKey];\n        if (projectValue === null || projectValue === undefined) {\n          return false; // Cannot match if project value is null/undefined\n        }\n\n        // Special handling for revenue since the dropdown and table use formatted currency\n        if (columnKey === \"revenue\") {\n          return formatCurrency(project.revenue) === String(filterValue);\n        }\n\n        // Handle numeric and string comparisons\n        if (typeof projectValue === \"number\" && !Number.isNaN(Number(filterValue))) {\n          // Strict equality for numbers\n          return projectValue === Number(filterValue);\n        }\n\n        // Case-insensitive string comparison for others\n        return String(projectValue).toLowerCase() === String(filterValue).toLowerCase();\n      });\n    });\n  };\n\n  // Load Poppins font from Google Fonts\n  useEffect(() => {\n    const link = document.createElement(\"link\");\n    link.href = \"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap\";\n    link.rel = \"stylesheet\";\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Fetch project data when context (month, year, accountId, projectType) changes\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5;\n    const fetchProjectData = async (month, year, accId, projectType) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const payload = {\n          month,\n          year,\n          accId,\n          projectType\n        };\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(payload)\n        });\n        if (!resp.ok) {\n          const errText = await resp.text();\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\n        }\n        const data = await resp.json();\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\n        setProjects(list);\n        setColumnFilters({}); // Reset filters when new data is fetched\n\n        if (list.length > 0 && list[0].accountName) {\n          setActiveAccountName(list[0].accountName);\n        } else {\n          const storedName = sessionStorage.getItem(\"lastFetchedProjectAccountName\");\n          setActiveAccountName(storedName || accId);\n        }\n      } catch (e) {\n        console.error(\"Error fetching project data:\", e);\n        setError(`Failed to load project data: ${e.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    let monthToUse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let yearToUse = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    let accountIdToUse = urlAccountId;\n    let accountNameToUse = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.accountName;\n    let sbuToUse = (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.sbu;\n    let projectTypeToUse = (_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.projectType;\n    if (!monthToUse) monthToUse = sessionStorage.getItem(\"lastFetchedProjectMonth\");\n    if (!yearToUse) yearToUse = sessionStorage.getItem(\"lastFetchedProjectYear\");\n    if (!accountNameToUse) accountNameToUse = sessionStorage.getItem(\"lastFetchedProjectAccountName\");\n    if (!sbuToUse) sbuToUse = sessionStorage.getItem(\"lastFetchedProjectSbu\");\n    if (!projectTypeToUse) projectTypeToUse = sessionStorage.getItem(\"lastFetchedProjectType\");\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\n    if (monthToUse && yearToUse && accountIdToUse) {\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accountIdToUse !== activeAccountId || sbuToUse !== activeSbu || projectTypeToUse !== activeProjectType) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        setActiveAccountId(accountIdToUse);\n        if (accountNameToUse) {\n          setActiveAccountName(accountNameToUse);\n        }\n        setActiveSbu(sbuToUse);\n        setActiveProjectType(projectTypeToUse);\n        sessionStorage.setItem(\"lastFetchedProjectMonth\", monthToUse.toString());\n        sessionStorage.setItem(\"lastFetchedProjectYear\", yearToUse.toString());\n        sessionStorage.setItem(\"lastFetchedProjectAccountId\", accountIdToUse);\n        if (accountNameToUse) {\n          sessionStorage.setItem(\"lastFetchedProjectAccountName\", accountNameToUse);\n        }\n        if (sbuToUse) {\n          sessionStorage.setItem(\"lastFetchedProjectSbu\", sbuToUse);\n        }\n        if (projectTypeToUse) {\n          sessionStorage.setItem(\"lastFetchedProjectType\", projectTypeToUse);\n        }\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse);\n      } else {\n        setLoading(false);\n      }\n    } else {\n      setError(\"Missing month, year, or Account ID. Please navigate here with all parameters.\");\n      setLoading(false);\n    }\n  }, [location.state, urlAccountId, activeMonth, activeYear, activeAccountId, activeSbu, activeProjectType]);\n\n  // useEffect to handle DataTables initialization and destruction\n  useEffect(() => {\n    if (!loading && projects.length > 0 && tableRef.current) {\n      const $tbl = $(tableRef.current);\n      if ($.fn.DataTable.isDataTable($tbl)) {\n        $tbl.DataTable().destroy();\n      }\n\n      // Initialize DataTable\n      const tableInstance = $tbl.DataTable({\n        paging: true,\n        searching: true,\n        // Keep this for the global search bar\n        ordering: false,\n        // Disabling default ordering as per original code\n        info: true,\n        autoWidth: false\n      });\n\n      // Store the DataTables instance on the ref for later access\n      tableRef.current.dataTableInstance = tableInstance;\n    }\n\n    // Cleanup function: destroy DataTable when component unmounts or data changes\n    return () => {\n      if (tableRef.current && tableRef.current.dataTableInstance) {\n        tableRef.current.dataTableInstance.destroy();\n        tableRef.current.dataTableInstance = null;\n      }\n    };\n  }, [loading, projects]); // Re-run when loading state or projects data changes\n\n  // New useEffect to apply filters using DataTables API\n  useEffect(() => {\n    if (tableRef.current && tableRef.current.dataTableInstance) {\n      const tableInstance = tableRef.current.dataTableInstance;\n\n      // Clear all column-specific searches first to prevent cumulative filtering\n      tableInstance.columns().search(\"\");\n\n      // Define a mapping from column keys (used in state) to DataTables column indices\n      const columnMapping = {\n        projectId: 0,\n        projectName: 1,\n        totalAssociatesCount: 2,\n        totalCompanyHours: 3,\n        totalClientHours: 4,\n        varianceHours: 5,\n        revenue: 6\n      };\n\n      // Apply filters for each column based on the columnFilters state\n      Object.keys(columnFilters).forEach(columnKey => {\n        const filterValue = columnFilters[columnKey];\n        if (filterValue !== null) {\n          const columnIndex = columnMapping[columnKey];\n          if (columnIndex !== undefined) {\n            // Escape regex special characters for exact matching\n            const escapedValue = String(filterValue).replace(/[.*+?^${}()|[\\\\]\\\\]/g, \"\\\\$&\");\n            // DataTables search method requires a regex-like string for exact match\n            // Using \"^\" and \"$\" ensures an exact match for the cell content\n            tableInstance.column(columnIndex).search(`^${escapedValue}$`, true, false);\n          }\n        }\n      });\n\n      // Redraw the table to apply all set filters\n      tableInstance.draw();\n    }\n  }, [columnFilters]); // Re-run this effect whenever columnFilters state changes\n\n  // Define breadcrumb path for navigation\n  const breadcrumbPath = [{\n    name: \"PMO Dashboard\",\n    page: \"\"\n  }, {\n    name: \"Revenue Forecast - Early View\",\n    page: \"upload\"\n  }, ...(activeSbu ? [{\n    name: `${activeSbu} SBU Level`,\n    page: \"sbu\",\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }] : []), {\n    name: \"Account Level\",\n    page: `accounts`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }, ...(activeProjectType ? [{\n    name: `${activeProjectType} Project Type`,\n    page: `accounts/${activeAccountId}/project-types`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu,\n      accId: activeAccountId\n    }\n  }] : []), {\n    name: `Projects (${activeAccountName})`,\n    page: `accounts/${activeAccountId}/projects`\n  }].filter(Boolean);\n\n  // Render loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Project Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate(\"/accounts\", {\n          state: {\n            month: activeMonth,\n            year: activeYear,\n            sbu: activeSbu\n          }\n        }),\n        children: \"Go to Account Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Main component render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: \"linear-gradient(to bottom right, #f5f7fa, #e9ecef)\",\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: \"1200px\",\n        backgroundColor: \"#ffffffdd\",\n        borderRadius: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-0 fw-semibold text-dark\",\n          children: [\"\\uD83D\\uDCC1 Project Level Overview\", \" \", activeAccountId ? `for ${activeAccountName}` : \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), projects.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-success rounded-pill px-3\",\n          onClick: handleDownloadData,\n          title: \"Download Project Data\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-download me-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 15\n          }, this), \" Download Data\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          ref: tableRef,\n          className: \"display table table-hover align-middle table-borderless mb-0\",\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: \"linear-gradient(to right, #3b82f6, #2563eb)\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Project ID\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"projectId\", e.target.value),\n                  value: columnFilters.projectId || \"All\",\n                  children: getUniqueOptions(\"projectId\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 530,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 522,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Project Name\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"projectName\", e.target.value),\n                  value: columnFilters.projectName || \"All\",\n                  children: getUniqueOptions(\"projectName\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 546,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 538,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Total Associates\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"totalAssociatesCount\", e.target.value),\n                  value: columnFilters.totalAssociatesCount || \"All\",\n                  children: getUniqueOptions(\"totalAssociatesCount\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 562,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Company Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"totalCompanyHours\", e.target.value),\n                  value: columnFilters.totalCompanyHours || \"All\",\n                  children: getUniqueOptions(\"totalCompanyHours\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 578,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 570,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 568,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Client Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"totalClientHours\", e.target.value),\n                  value: columnFilters.totalClientHours || \"All\",\n                  children: getUniqueOptions(\"totalClientHours\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 594,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 586,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 584,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Variance Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"varianceHours\", e.target.value),\n                  value: columnFilters.varianceHours || \"All\",\n                  children: getUniqueOptions(\"varianceHours\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 610,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 602,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 600,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Revenue\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"revenue\", e.target.value),\n                  value: columnFilters.revenue || \"All\",\n                  children: getUniqueOptions(\"revenue\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 626,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 618,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 616,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-center\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 632,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: projects.map(project => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.projectId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 639,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.projectName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 640,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalAssociatesCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalCompanyHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalClientHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 643,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.varianceHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 644,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatCurrency(project.revenue)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-sm btn-outline-primary rounded-circle\",\n                  onClick: () => navigate(`/projects/${project.projectId}/associates`, {\n                    state: {\n                      projectId: project.projectId,\n                      projectName: project.projectName,\n                      accountId: project.accountId,\n                      accountName: project.accountName,\n                      month: activeMonth,\n                      year: activeYear,\n                      sbu: activeSbu,\n                      projectType: activeProjectType\n                    }\n                  }),\n                  title: \"View Associates\",\n                  children: \"\\uD83D\\uDD0D\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 647,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 646,\n                columnNumber: 19\n              }, this)]\n            }, project.projectId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectLevel, \"L31KGOkBlQELiDvyNK43tljyBlo=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = ProjectLevel;\nexport default ProjectLevel;\nvar _c;\n$RefreshReg$(_c, \"ProjectLevel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","useParams","useLocation","$","Breadcrumbs","commonData","jsxDEV","_jsxDEV","BACKEND_URL","ProjectLevel","_s","navigate","accountId","urlAccountId","location","tableRef","projects","setProjects","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","activeSbu","setActiveSbu","activeProjectType","setActiveProjectType","columnFilters","setColumnFilters","formatCurrency","value","toLocaleString","currencySettings","locale","style","currency","minimumFractionDigits","maximumFractionDigits","getMonthName","monthNumber","date","Date","setMonth","month","handleDownloadData","length","console","log","headers","csvRows","applyFilters","map","project","projectId","projectName","totalAssociatesCount","totalCompanyHours","totalClientHours","varianceHours","revenue","join","csvContent","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","monthName","fileName","setAttribute","visibility","body","appendChild","click","removeChild","revokeObjectURL","getUniqueOptions","columnKey","Array","isArray","options","String","uniqueOptions","Set","sort","a","b","isNumericColumn","Number","localeCompare","handleFilterChange","prevFilters","projectsArray","filters","filter","Object","keys","every","filterValue","undefined","projectValue","isNaN","toLowerCase","href","rel","head","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","fetchProjectData","year","accId","projectType","payload","resp","fetch","method","JSON","stringify","ok","errText","text","Error","status","statusText","data","json","list","Boolean","accountName","storedName","sessionStorage","getItem","e","message","monthToUse","state","yearToUse","accountIdToUse","accountNameToUse","sbuToUse","sbu","projectTypeToUse","parseInt","setItem","toString","current","$tbl","fn","DataTable","isDataTable","destroy","tableInstance","paging","searching","ordering","info","autoWidth","dataTableInstance","columns","search","columnMapping","forEach","columnIndex","escapedValue","replace","column","draw","breadcrumbPath","name","page","className","children","role","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","title","ref","width","onChange","target","option","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/Frontend/Revenue-forecast/src/components/Details/ProjectLevel.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams, useLocation } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport \"datatables.net\";\r\nimport \"datatables.net-dt/css/dataTables.dataTables.min.css\";\r\nimport Breadcrumbs from \"../Breadcrumbs\";\r\nimport commonData from \"../../data/commonData.json\";\r\n\r\n// Declare the BACKEND_URL constant at the top level\r\nconst BACKEND_URL = \"http://localhost:8081\";\r\n\r\nconst ProjectLevel = () => {\r\n  const navigate = useNavigate();\r\n  const { accountId: urlAccountId } = useParams();\r\n  const location = useLocation();\r\n  const tableRef = useRef(null);\r\n\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n  const [activeAccountId, setActiveAccountId] = useState(null);\r\n  const [activeAccountName, setActiveAccountName] = useState(\"Loading...\");\r\n  const [activeSbu, setActiveSbu] = useState(null);\r\n  const [activeProjectType, setActiveProjectType] = useState(null);\r\n\r\n  // State to manage column filters\r\n  const [columnFilters, setColumnFilters] = useState({});\r\n\r\n  // Currency formatting function\r\n  const formatCurrency = (value = 0) =>\r\n    value.toLocaleString(commonData.currencySettings.locale, {\r\n      style: \"currency\",\r\n      currency: commonData.currencySettings.currency,\r\n      minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\r\n      maximumFractionDigits: commonData.currencySettings.maximumFractionDigits,\r\n    });\r\n\r\n  // Utility to get month name (for file naming)\r\n  const getMonthName = (monthNumber) => {\r\n    if (!monthNumber) return \"\";\r\n    const date = new Date();\r\n    date.setMonth(monthNumber - 1);\r\n    return date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  };\r\n\r\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data and triggers a download.\r\n   */\r\n  const handleDownloadData = () => {\r\n    if (projects.length === 0) {\r\n      console.log(\"No data to download.\");\r\n      return;\r\n    }\r\n\r\n    // Define CSV headers matching the table columns\r\n    const headers = [\r\n      \"Project ID\",\r\n      \"Project Name\",\r\n      \"Total Associates\",\r\n      \"Company Hours\",\r\n      \"Client Hours\",\r\n      \"Variance Hours\",\r\n      \"Revenue\",\r\n    ];\r\n\r\n    // Map projects data to CSV rows, using the currently filtered projects\r\n    const csvRows = applyFilters(projects, columnFilters).map((project) => {\r\n      return [\r\n        `\"${project.projectId}\"`,\r\n        `\"${project.projectName}\"`,\r\n        project.totalAssociatesCount,\r\n        project.totalCompanyHours,\r\n        project.totalClientHours,\r\n        project.varianceHours,\r\n        `\"${formatCurrency(project.revenue)}\"`,\r\n      ].join(\",\");\r\n    });\r\n\r\n    const csvContent = [headers.join(\",\"), ...csvRows].join(\"\\n\");\r\n\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    const link = document.createElement(\"a\");\r\n    const url = URL.createObjectURL(blob);\r\n    const monthName = getMonthName(activeMonth);\r\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`;\r\n    link.setAttribute(\"href\", url);\r\n    link.setAttribute(\"download\", fileName);\r\n    link.style.visibility = \"hidden\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  /**\r\n   * Generates a unique list of options for a given column key.\r\n   * @param {string} columnKey The key of the column to get unique values for.\r\n   * @returns {string[]} An array of unique values, including an 'All' option.\r\n   */\r\n  const getUniqueOptions = (columnKey) => {\r\n    // Return default options if projects is not available\r\n    if (!projects || !Array.isArray(projects) || projects.length === 0) {\r\n      return [\"All\"];\r\n    }\r\n\r\n    // Build option values consistently with what is rendered in the table\r\n    const options = projects.map((project) => {\r\n      const value = project[columnKey];\r\n      if (columnKey === \"revenue\") {\r\n        // Table shows formatted currency, so dropdown must match that exactly\r\n        return formatCurrency(value);\r\n      }\r\n      return String(value);\r\n    });\r\n\r\n    // Ensure stable sorting: numeric columns sorted numerically, others lexicographically\r\n    const uniqueOptions = [...new Set(options)].sort((a, b) => {\r\n      const isNumericColumn =\r\n        columnKey === \"totalAssociatesCount\" ||\r\n        columnKey === \"totalCompanyHours\" ||\r\n        columnKey === \"totalClientHours\" ||\r\n        columnKey === \"varianceHours\";\r\n      if (isNumericColumn) {\r\n        return Number(a) - Number(b);\r\n      }\r\n      return a.localeCompare(b);\r\n    });\r\n\r\n    return [\"All\", ...uniqueOptions];\r\n  };\r\n\r\n  /**\r\n   * Handles changes to a column's filter dropdown.\r\n   * Updates the `columnFilters` state with the new value.\r\n   * @param {string} columnKey The key of the column being filtered.\r\n   * @param {string} value The selected filter value.\r\n   */\r\n  const handleFilterChange = (columnKey, value) => {\r\n    setColumnFilters((prevFilters) => ({\r\n      ...prevFilters,\r\n      [columnKey]: value === \"All\" ? null : value,\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * Filters the projects array based on the current columnFilters state.\r\n   * This is used for the download functionality to get the currently filtered data.\r\n   * DataTables handles the actual table filtering.\r\n   * @param {Array} projectsArray The array of projects to filter.\r\n   * @param {Object} filters The object containing column filters.\r\n   * @returns {Array} The filtered array of projects.\r\n   */\r\n  const applyFilters = (projectsArray, filters) => {\r\n    return projectsArray.filter((project) => {\r\n      return Object.keys(filters).every((columnKey) => {\r\n        const filterValue = filters[columnKey];\r\n        if (filterValue === null || filterValue === undefined) {\r\n          return true; // No filter applied for this column\r\n        }\r\n\r\n        const projectValue = project[columnKey];\r\n        if (projectValue === null || projectValue === undefined) {\r\n          return false; // Cannot match if project value is null/undefined\r\n        }\r\n\r\n        // Special handling for revenue since the dropdown and table use formatted currency\r\n        if (columnKey === \"revenue\") {\r\n          return formatCurrency(project.revenue) === String(filterValue);\r\n        }\r\n\r\n        // Handle numeric and string comparisons\r\n        if (\r\n          typeof projectValue === \"number\" &&\r\n          !Number.isNaN(Number(filterValue))\r\n        ) {\r\n          // Strict equality for numbers\r\n          return projectValue === Number(filterValue);\r\n        }\r\n\r\n        // Case-insensitive string comparison for others\r\n        return (\r\n          String(projectValue).toLowerCase() ===\r\n          String(filterValue).toLowerCase()\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  // Load Poppins font from Google Fonts\r\n  useEffect(() => {\r\n    const link = document.createElement(\"link\");\r\n    link.href =\r\n      \"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap\";\r\n    link.rel = \"stylesheet\";\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Fetch project data when context (month, year, accountId, projectType) changes\r\n  useEffect(() => {\r\n    const fetchProjectData = async (month, year, accId, projectType) => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const payload = { month, year, accId, projectType };\r\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(payload),\r\n        });\r\n\r\n        if (!resp.ok) {\r\n          const errText = await resp.text();\r\n          throw new Error(\r\n            `status: ${resp.status}, message: ${errText || resp.statusText}`\r\n          );\r\n        }\r\n\r\n        const data = await resp.json();\r\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\r\n        setProjects(list);\r\n        setColumnFilters({}); // Reset filters when new data is fetched\r\n\r\n        if (list.length > 0 && list[0].accountName) {\r\n          setActiveAccountName(list[0].accountName);\r\n        } else {\r\n          const storedName = sessionStorage.getItem(\r\n            \"lastFetchedProjectAccountName\"\r\n          );\r\n          setActiveAccountName(storedName || accId);\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error fetching project data:\", e);\r\n        setError(`Failed to load project data: ${e.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    let monthToUse = location.state?.month;\r\n    let yearToUse = location.state?.year;\r\n    let accountIdToUse = urlAccountId;\r\n    let accountNameToUse = location.state?.accountName;\r\n    let sbuToUse = location.state?.sbu;\r\n    let projectTypeToUse = location.state?.projectType;\r\n\r\n    if (!monthToUse)\r\n      monthToUse = sessionStorage.getItem(\"lastFetchedProjectMonth\");\r\n    if (!yearToUse)\r\n      yearToUse = sessionStorage.getItem(\"lastFetchedProjectYear\");\r\n    if (!accountNameToUse)\r\n      accountNameToUse = sessionStorage.getItem(\r\n        \"lastFetchedProjectAccountName\"\r\n      );\r\n    if (!sbuToUse) sbuToUse = sessionStorage.getItem(\"lastFetchedProjectSbu\");\r\n    if (!projectTypeToUse)\r\n      projectTypeToUse = sessionStorage.getItem(\"lastFetchedProjectType\");\r\n\r\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\r\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\r\n\r\n    if (monthToUse && yearToUse && accountIdToUse) {\r\n      if (\r\n        monthToUse !== activeMonth ||\r\n        yearToUse !== activeYear ||\r\n        accountIdToUse !== activeAccountId ||\r\n        sbuToUse !== activeSbu ||\r\n        projectTypeToUse !== activeProjectType\r\n      ) {\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        setActiveAccountId(accountIdToUse);\r\n        if (accountNameToUse) {\r\n          setActiveAccountName(accountNameToUse);\r\n        }\r\n        setActiveSbu(sbuToUse);\r\n        setActiveProjectType(projectTypeToUse);\r\n\r\n        sessionStorage.setItem(\r\n          \"lastFetchedProjectMonth\",\r\n          monthToUse.toString()\r\n        );\r\n        sessionStorage.setItem(\"lastFetchedProjectYear\", yearToUse.toString());\r\n        sessionStorage.setItem(\"lastFetchedProjectAccountId\", accountIdToUse);\r\n        if (accountNameToUse) {\r\n          sessionStorage.setItem(\r\n            \"lastFetchedProjectAccountName\",\r\n            accountNameToUse\r\n          );\r\n        }\r\n        if (sbuToUse) {\r\n          sessionStorage.setItem(\"lastFetchedProjectSbu\", sbuToUse);\r\n        }\r\n        if (projectTypeToUse) {\r\n          sessionStorage.setItem(\"lastFetchedProjectType\", projectTypeToUse);\r\n        }\r\n\r\n        fetchProjectData(\r\n          monthToUse,\r\n          yearToUse,\r\n          accountIdToUse,\r\n          projectTypeToUse\r\n        );\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setError(\r\n        \"Missing month, year, or Account ID. Please navigate here with all parameters.\"\r\n      );\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    location.state,\r\n    urlAccountId,\r\n    activeMonth,\r\n    activeYear,\r\n    activeAccountId,\r\n    activeSbu,\r\n    activeProjectType,\r\n  ]);\r\n\r\n  // useEffect to handle DataTables initialization and destruction\r\n  useEffect(() => {\r\n    if (!loading && projects.length > 0 && tableRef.current) {\r\n      const $tbl = $(tableRef.current);\r\n      if ($.fn.DataTable.isDataTable($tbl)) {\r\n        $tbl.DataTable().destroy();\r\n      }\r\n\r\n      // Initialize DataTable\r\n      const tableInstance = $tbl.DataTable({\r\n        paging: true,\r\n        searching: true, // Keep this for the global search bar\r\n        ordering: false, // Disabling default ordering as per original code\r\n        info: true,\r\n        autoWidth: false,\r\n      });\r\n\r\n      // Store the DataTables instance on the ref for later access\r\n      tableRef.current.dataTableInstance = tableInstance;\r\n    }\r\n\r\n    // Cleanup function: destroy DataTable when component unmounts or data changes\r\n    return () => {\r\n      if (tableRef.current && tableRef.current.dataTableInstance) {\r\n        tableRef.current.dataTableInstance.destroy();\r\n        tableRef.current.dataTableInstance = null;\r\n      }\r\n    };\r\n  }, [loading, projects]); // Re-run when loading state or projects data changes\r\n\r\n  // New useEffect to apply filters using DataTables API\r\n  useEffect(() => {\r\n    if (tableRef.current && tableRef.current.dataTableInstance) {\r\n      const tableInstance = tableRef.current.dataTableInstance;\r\n\r\n      // Clear all column-specific searches first to prevent cumulative filtering\r\n      tableInstance.columns().search(\"\");\r\n\r\n      // Define a mapping from column keys (used in state) to DataTables column indices\r\n      const columnMapping = {\r\n        projectId: 0,\r\n        projectName: 1,\r\n        totalAssociatesCount: 2,\r\n        totalCompanyHours: 3,\r\n        totalClientHours: 4,\r\n        varianceHours: 5,\r\n        revenue: 6,\r\n      };\r\n\r\n      // Apply filters for each column based on the columnFilters state\r\n      Object.keys(columnFilters).forEach((columnKey) => {\r\n        const filterValue = columnFilters[columnKey];\r\n        if (filterValue !== null) {\r\n          const columnIndex = columnMapping[columnKey];\r\n          if (columnIndex !== undefined) {\r\n            // Escape regex special characters for exact matching\r\n            const escapedValue = String(filterValue).replace(\r\n              /[.*+?^${}()|[\\\\]\\\\]/g,\r\n              \"\\\\$&\"\r\n            );\r\n            // DataTables search method requires a regex-like string for exact match\r\n            // Using \"^\" and \"$\" ensures an exact match for the cell content\r\n            tableInstance\r\n              .column(columnIndex)\r\n              .search(`^${escapedValue}$`, true, false);\r\n          }\r\n        }\r\n      });\r\n\r\n      // Redraw the table to apply all set filters\r\n      tableInstance.draw();\r\n    }\r\n  }, [columnFilters]); // Re-run this effect whenever columnFilters state changes\r\n\r\n  // Define breadcrumb path for navigation\r\n  const breadcrumbPath = [\r\n    { name: \"PMO Dashboard\", page: \"\" },\r\n    { name: \"Revenue Forecast - Early View\", page: \"upload\" },\r\n    ...(activeSbu\r\n      ? [\r\n          {\r\n            name: `${activeSbu} SBU Level`,\r\n            page: \"sbu\",\r\n            state: { month: activeMonth, year: activeYear, sbu: activeSbu },\r\n          },\r\n        ]\r\n      : []),\r\n    {\r\n      name: \"Account Level\",\r\n      page: `accounts`,\r\n      state: { month: activeMonth, year: activeYear, sbu: activeSbu },\r\n    },\r\n    ...(activeProjectType\r\n      ? [\r\n          {\r\n            name: `${activeProjectType} Project Type`,\r\n            page: `accounts/${activeAccountId}/project-types`,\r\n            state: {\r\n              month: activeMonth,\r\n              year: activeYear,\r\n              sbu: activeSbu,\r\n              accId: activeAccountId,\r\n            },\r\n          },\r\n        ]\r\n      : []),\r\n    {\r\n      name: `Projects (${activeAccountName})`,\r\n      page: `accounts/${activeAccountId}/projects`,\r\n    },\r\n  ].filter(Boolean);\r\n\r\n  // Render loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\" />\r\n        <p className=\"ms-3 text-primary\">Loading Project Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        <button\r\n          className=\"btn btn-primary mt-3\"\r\n          onClick={() =>\r\n            navigate(\"/accounts\", {\r\n              state: { month: activeMonth, year: activeYear, sbu: activeSbu },\r\n            })\r\n          }\r\n        >\r\n          Go to Account Level\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main component render\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: \"linear-gradient(to bottom right, #f5f7fa, #e9ecef)\",\r\n        fontFamily: \"'Poppins', sans-serif\",\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{\r\n          maxWidth: \"1200px\",\r\n          backgroundColor: \"#ffffffdd\",\r\n          borderRadius: \"1rem\",\r\n        }}\r\n      >\r\n        {/* Breadcrumbs component */}\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n          <h2 className=\"mb-0 fw-semibold text-dark\">\r\n            📁 Project Level Overview{\" \"}\r\n            {activeAccountId ? `for ${activeAccountName}` : \"\"}\r\n          </h2>\r\n          {/* Download button, visible only if projects are loaded */}\r\n          {projects.length > 0 && (\r\n            <button\r\n              className=\"btn btn-outline-success rounded-pill px-3\"\r\n              onClick={handleDownloadData}\r\n              title=\"Download Project Data\"\r\n            >\r\n              <i className=\"bi bi-download me-2\"></i> Download Data\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Responsive table container */}\r\n        <div className=\"table-responsive rounded\">\r\n          <table\r\n            ref={tableRef}\r\n            className=\"display table table-hover align-middle table-borderless mb-0\"\r\n            style={{ width: \"100%\" }}\r\n          >\r\n            <thead\r\n              className=\"text-white\"\r\n              style={{\r\n                background: \"linear-gradient(to right, #3b82f6, #2563eb)\",\r\n              }}\r\n            >\r\n              <tr>\r\n                {/* Each header now includes a filter dropdown */}\r\n                <th>\r\n                  Project ID\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"projectId\", e.target.value)\r\n                    }\r\n                    value={columnFilters.projectId || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"projectId\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Project Name\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"projectName\", e.target.value)\r\n                    }\r\n                    value={columnFilters.projectName || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"projectName\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Total Associates\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"totalAssociatesCount\", e.target.value)\r\n                    }\r\n                    value={columnFilters.totalAssociatesCount || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"totalAssociatesCount\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Company Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"totalCompanyHours\", e.target.value)\r\n                    }\r\n                    value={columnFilters.totalCompanyHours || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"totalCompanyHours\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Client Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"totalClientHours\", e.target.value)\r\n                    }\r\n                    value={columnFilters.totalClientHours || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"totalClientHours\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Variance Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"varianceHours\", e.target.value)\r\n                    }\r\n                    value={columnFilters.varianceHours || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"varianceHours\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Revenue\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"revenue\", e.target.value)\r\n                    }\r\n                    value={columnFilters.revenue || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"revenue\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th className=\"text-center\">View</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {/* Map through the projects data directly, as DataTables will handle the filtering and rendering */}\r\n              {projects.map((project) => (\r\n                <tr key={project.projectId}>\r\n                  <td>{project.projectId}</td>\r\n                  <td>{project.projectName}</td>\r\n                  <td>{project.totalAssociatesCount}</td>\r\n                  <td>{project.totalCompanyHours}</td>\r\n                  <td>{project.totalClientHours}</td>\r\n                  <td>{project.varianceHours}</td>\r\n                  <td>{formatCurrency(project.revenue)}</td>\r\n                  <td className=\"text-center\">\r\n                    <button\r\n                      className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n                      onClick={() =>\r\n                        navigate(`/projects/${project.projectId}/associates`, {\r\n                          state: {\r\n                            projectId: project.projectId,\r\n                            projectName: project.projectName,\r\n                            accountId: project.accountId,\r\n                            accountName: project.accountName,\r\n                            month: activeMonth,\r\n                            year: activeYear,\r\n                            sbu: activeSbu,\r\n                            projectType: activeProjectType,\r\n                          },\r\n                        })\r\n                      }\r\n                      title=\"View Associates\"\r\n                    >\r\n                      🔍\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectLevel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}