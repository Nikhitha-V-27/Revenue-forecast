{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Dashboard\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import DashboardCard from './DashboardCard';\n// import DashboardMetric from './DashboardMetric';\n// import dashboardData from '../../data/dashboard.json';\n\n// const Dashboard = () => {\n//   const navigate = useNavigate();\n//   const [message, setMessage] = useState('');\n//   const [showMessageBox, setShowMessageBox] = useState(false);\n//   const [showRevenueOptions, setShowRevenueOptions] = useState(false);\n//   const [showViewDataPopup, setShowViewDataPopup] = useState(false);\n//   const [selectedAccount, setSelectedAccount] = useState('');\n//   const [selectedProject, setSelectedProject] = useState('');\n//   const [projects, setProjects] = useState([]);\n\n//   const { header, metrics, cards, accountOptions, revenuePopup } = dashboardData;\n\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   const showMessage = (msg) => {\n//     setMessage(msg);\n//     setShowMessageBox(true);\n//   };\n\n//   const hideMessage = () => setShowMessageBox(false);\n//   const toggleRevenueOptions = () => setShowRevenueOptions(prev => !prev);\n\n//   const openViewDataPopup = () => {\n//     setSelectedAccount('');\n//     setSelectedProject('');\n//     setProjects([]);\n//     setShowRevenueOptions(false);\n//     setShowViewDataPopup(true);\n//   };\n\n//   const handleAccountChange = (e) => {\n//     const acc = e.target.value;\n//     setSelectedAccount(acc);\n//     setProjects(accountOptions[acc] || []);\n//     setSelectedProject('');\n//   };\n\n//   const handleProjectSelection = () => {\n//     if (!selectedAccount || !selectedProject) {\n//       showMessage('Please select both an Account and a Project.');\n//     } else {\n//       setShowViewDataPopup(false);\n//       navigate(`/projects/${selectedProject}`);\n//     }\n//   };\n\n//   const isPopupOpen = showMessageBox || showRevenueOptions || showViewDataPopup;\n\n//   return (\n//     <div\n//       className=\"position-relative min-vh-100 d-flex justify-content-center align-items-center px-3\"\n//       style={{\n//         background: 'radial-gradient(circle at center, #f8f9fa 60%, #e0e0e0 100%)',\n//         overflow: 'hidden'\n//       }}\n//     >\n//       {isPopupOpen && (\n//         <div\n//           className=\"position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-25\"\n//           style={{ backdropFilter: 'blur(3px)', zIndex: 1 }}\n//         />\n//       )}\n\n//       <div\n//         className=\"card rounded-4 shadow-lg w-100\"\n//         style={{ maxWidth: '1100px', zIndex: 2, backgroundColor: 'rgba(255,255,255,0.95)' }}\n//       >\n//         <div className=\"card-body\">\n//           <h2 className=\"text-center fw-bold text-dark mb-2\">{header.title}</h2>\n//           <p className=\"text-center text-muted mb-4\">{header.subtitle}</p>\n\n//           <div className=\"card bg-light border-0 shadow-sm p-4 mb-4 rounded-3\">\n//             <div className=\"row g-4\">\n//               {cards.map((card, index) => (\n//                 <DashboardCard\n//                   key={index}\n//                   title={card.title}\n//                   description={card.description}\n//                   icon={card.icon}\n//                   onClick={\n//                     card.title === 'Revenue Forecast'\n//                       ? toggleRevenueOptions\n//                       : () => showMessage(`Navigating to ${card.title}`)\n//                   }\n//                 />\n//               ))}\n//             </div>\n//           </div>\n\n//           <div className=\"card bg-light border-0 shadow-sm p-4 rounded-3\">\n//             <div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-4 g-4\">\n//               {metrics.map((metric, index) => (\n//                 <DashboardMetric key={index} value={metric.value} label={metric.label} />\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n\n//       {showMessageBox && (\n//         <div\n//           className=\"position-fixed top-50 start-50 translate-middle bg-dark text-white p-4 rounded shadow text-center\"\n//           style={{ zIndex: 999 }}\n//         >\n//           <p className=\"mb-3\">{message}</p>\n//           <button className=\"btn btn-light btn-sm\" onClick={hideMessage}>Close</button>\n//         </div>\n//       )}\n\n//       {showRevenueOptions && (\n//         <div\n//           className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow text-center\"\n//           style={{ zIndex: 999 }}\n//         >\n//           <h5 className=\"fw-bold mb-3 text-dark\">{revenuePopup.title}</h5>\n//           {revenuePopup.buttons.map((btn, i) => (\n//             <button\n//               key={i}\n//               className={`btn btn-outline-${btn.variant} w-100 mb-2`}\n//               onClick={() => {\n//                 if (btn.action === 'upload') {\n//                   toggleRevenueOptions();\n//                   navigate('/upload');\n//                 } else if (btn.action === 'view') {\n//                   openViewDataPopup();\n//                 } else {\n//                   toggleRevenueOptions();\n//                 }\n//               }}\n//             >\n//               {btn.text}\n//             </button>\n//           ))}\n//         </div>\n//       )}\n\n//       {showViewDataPopup && (\n//         <div\n//           className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\"\n//           style={{ zIndex: 999 }}\n//         >\n//           <h5 className=\"fw-bold mb-3 text-center\">View Project Revenue</h5>\n//           <div className=\"mb-3\">\n//             <label className=\"form-label\">Account</label>\n//             <select className=\"form-select\" value={selectedAccount} onChange={handleAccountChange}>\n//               <option value=\"\">-- Select --</option>\n//               {Object.keys(accountOptions).map((acc) => (\n//                 <option key={acc} value={acc}>{acc}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <div className=\"mb-3\">\n//             <label className=\"form-label\">Project</label>\n//             <select\n//               className=\"form-select\"\n//               value={selectedProject}\n//               onChange={(e) => setSelectedProject(e.target.value)}\n//               disabled={!projects.length}\n//             >\n//               <option value=\"\">-- Select --</option>\n//               {projects.map((proj) => (\n//                 <option key={proj} value={proj}>{proj}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <button className=\"btn btn-primary w-100 mb-2\" onClick={handleProjectSelection}>View Details</button>\n//           <button className=\"btn btn-outline-secondary w-100\" onClick={() => setShowViewDataPopup(false)}>Cancel</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n// good non integrated\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import DashboardCard from './DashboardCard';\n// import DashboardMetric from './DashboardMetric';\n// import dashboardData from '../../data/dashboard.json';\n// import DatePicker from 'react-datepicker'; // Import DatePicker\n// // REMEMBER: The CSS import for react-datepicker should be in App.js or index.js\n// // import 'react-datepicker/dist/react-datepicker.css'; \n\n// const Dashboard = () => {\n//   const navigate = useNavigate();\n//   const [message, setMessage] = useState('');\n//   const [showMessageBox, setShowMessageBox] = useState(false);\n//   const [showRevenueOptions, setShowRevenueOptions] = useState(false);\n//   // Removed showGetDataMonthYearPopup and selectedDateGetData states\n//   const [showViewPastDataPopup, setShowViewPastDataPopup] = useState(false); // State for View Past Data popup\n\n//   const [selectedDateViewPast, setSelectedDateViewPast] = useState(null); // Date for View Past Data popup\n\n//   const { header, metrics, cards, revenuePopup } = dashboardData;\n\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   const showMessage = (msg) => {\n//     setMessage(msg);\n//     setShowMessageBox(true);\n//   };\n\n//   const hideMessage = () => setShowMessageBox(false);\n//   const toggleRevenueOptions = () => setShowRevenueOptions(prev => !prev);\n\n//   // Corrected navigation for View Past Data to go to Account Level\n//   const handleViewPastData = () => {\n//     if (!selectedDateViewPast) {\n//       alert('Please select both a month and a year to View Past Data.');\n//       return;\n//     }\n//     setShowViewPastDataPopup(false);\n//     // CORRECTED: Navigate to the Account Level\n//     navigate('/accounts'); \n//   };\n\n//   // Determine if any popup is open to show the backdrop\n//   const isPopupOpen = showMessageBox || showRevenueOptions || showViewPastDataPopup;\n\n//   return (\n//     <div\n//       className=\"position-relative min-vh-100 d-flex justify-content-center align-items-center px-3\"\n//       style={{\n//         background: 'radial-gradient(circle at center, #f8f9fa 60%, #e0e0e0 100%)',\n//         overflow: 'hidden'\n//       }}\n//     >\n//       {isPopupOpen && (\n//         <div\n//           className=\"position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-25\"\n//           style={{ backdropFilter: 'blur(3px)', zIndex: 1 }}\n//         />\n//       )}\n\n//       <div\n//         className=\"card rounded-4 shadow-lg w-100\"\n//         style={{ maxWidth: '1100px', zIndex: 2, backgroundColor: 'rgba(255,255,255,0.95)' }}\n//       >\n//         <div className=\"card-body\">\n//           <h2 className=\"text-center fw-bold text-dark mb-2\">{header.title}</h2>\n//           <p className=\"text-center text-muted mb-4\">{header.subtitle}</p>\n\n//           <div className=\"card bg-light border-0 shadow-sm p-4 mb-4 rounded-3\">\n//             <div className=\"row g-4\">\n//               {cards.map((card, index) => (\n//                 <DashboardCard\n//                   key={index}\n//                   title={card.title}\n//                   description={card.description}\n//                   icon={card.icon}\n//                   onClick={\n//                     card.title === 'Revenue Forecast'\n//                       ? toggleRevenueOptions // This opens the first popup\n//                       : () => showMessage(`Navigating to ${card.title}`)\n//                   }\n//                 />\n//               ))}\n//             </div>\n//           </div>\n\n//           <div className=\"card bg-light border-0 shadow-sm p-4 rounded-3\">\n//             <div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-4 g-4\">\n//               {metrics.map((metric, index) => (\n//                 <DashboardMetric key={index} value={metric.value} label={metric.label} />\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n\n//       {showMessageBox && (\n//         <div\n//           className=\"position-fixed top-50 start-50 translate-middle bg-dark text-white p-4 rounded shadow text-center\"\n//           style={{ zIndex: 999 }}\n//         >\n//           <p className=\"mb-3\">{message}</p>\n//           <button className=\"btn btn-light btn-sm\" onClick={hideMessage}>Close</button>\n//         </div>\n//       )}\n\n//       {/* First popup: Revenue Forecast Options */}\n//       {showRevenueOptions && (\n//         <div\n//           className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow text-center\"\n//           style={{ zIndex: 999 }}\n//         >\n//           <h5 className=\"fw-bold mb-3 text-dark\">{revenuePopup.title}</h5>\n//           {revenuePopup.buttons.map((btn, i) => (\n//             <button\n//               key={i}\n//               className={`btn btn-outline-${btn.variant} w-100 mb-2`}\n//               onClick={() => {\n//                 if (btn.action === 'upload') {\n//                   toggleRevenueOptions(); // Close this popup\n//                   navigate('/upload'); // Navigate to upload page\n//                 } else if (btn.action === 'viewPastData') { // Action for View Past Data\n//                   toggleRevenueOptions(); // Close this popup\n//                   setSelectedDateViewPast(null); // Reset selected date for this popup\n//                   setShowViewPastDataPopup(true); // Open the \"View Past Data\" Month/Year selection popup\n//                 } else { // cancel\n//                   toggleRevenueOptions(); // Close this popup\n//                 }\n//               }}\n//             >\n//               {btn.text}\n//             </button>\n//           ))}\n//         </div>\n//       )}\n\n//       {/* New popup: Month/Year Selection for \"View Past Data\" */}\n//       {showViewPastDataPopup && (\n//         <div\n//           className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\"\n//           style={{ zIndex: 999, minWidth: '360px' }}\n//         >\n//           <h5 className=\"fw-bold mb-3 text-center\">Select Month and Year to View Past Data</h5>\n//           <div className=\"mb-3 text-center\">\n//             <DatePicker\n//               selected={selectedDateViewPast}\n//               onChange={(date) => setSelectedDateViewPast(date)}\n//               dateFormat=\"MM/yyyy\"\n//               showMonthYearPicker\n//               className=\"form-control text-center\" // Apply Bootstrap styling\n//               placeholderText=\"Select Month & Year\"\n//             />\n//           </div>\n//           <button className=\"btn btn-primary w-100 mb-2\" onClick={handleViewPastData}>\n//             Go\n//           </button>\n//           <button className=\"btn btn-outline-secondary w-100\" onClick={() => setShowViewPastDataPopup(false)}>\n//             Cancel\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport DashboardCard from './DashboardCard';\nimport DashboardMetric from './DashboardMetric';\nimport dashboardData from '../../data/dashboard.json';\nimport DatePicker from 'react-datepicker';\n\n// REMEMBER: The CSS import for react-datepicker should be in App.js or index.js\n\n// import 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const navigate = useNavigate();\n  const [message, setMessage] = useState('');\n  const [showMessageBox, setShowMessageBox] = useState(false);\n  const [showRevenueOptions, setShowRevenueOptions] = useState(false);\n  const [showViewPastDataPopup, setShowViewPastDataPopup] = useState(false);\n\n  // Initialize selectedDateViewPast to null so DatePicker starts empty\n\n  const [selectedDateViewPast, setSelectedDateViewPast] = useState(null);\n  const {\n    header,\n    metrics,\n    cards,\n    revenuePopup\n  } = dashboardData;\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n  const showMessage = msg => {\n    setMessage(msg);\n    setShowMessageBox(true);\n  };\n  const hideMessage = () => setShowMessageBox(false);\n  const toggleRevenueOptions = () => setShowRevenueOptions(prev => !prev);\n\n  // Corrected navigation for View Past Data to go to Account Level\n\n  const handleViewPastData = () => {\n    if (!selectedDateViewPast) {\n      // The button is now disabled if no date is selected, so this alert might not be strictly necessary\n\n      // but kept for robustness.\n\n      alert('Please select both a month and a year to View Past Data.');\n      return;\n    }\n\n    // Extract month (1-indexed) and year from the selected Date object\n\n    const month = selectedDateViewPast.getMonth() + 1; // getMonth() is 0-indexed, so add 1\n\n    const year = selectedDateViewPast.getFullYear();\n    setShowViewPastDataPopup(false); // Close the popup\n\n    // CORRECTED: Navigate to the Account Level, passing month and year as state\n\n    navigate('/accounts', {\n      state: {\n        month: month,\n        year: year\n      }\n    });\n  };\n\n  // Determine if any popup is open to show the backdrop\n\n  const isPopupOpen = showMessageBox || showRevenueOptions || showViewPastDataPopup;\n\n  // Calculate maxDate for the DatePicker\n\n  // This will be the last day of the previous month\n\n  const today = new Date();\n  const lastDayOfPreviousMonth = new Date(today.getFullYear(), today.getMonth(), 0); // Day 0 of current month is last day of previous month\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"position-relative min-vh-100 d-flex justify-content-center align-items-center px-3\",\n    style: {\n      background: 'radial-gradient(circle at center, #f8f9fa 60%, #e0e0e0 100%)',\n      overflow: 'hidden'\n    },\n    children: [isPopupOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-25\",\n      style: {\n        backdropFilter: 'blur(3px)',\n        zIndex: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card rounded-4 shadow-lg w-100\",\n      style: {\n        maxWidth: '1100px',\n        zIndex: 2,\n        backgroundColor: 'rgba(255,255,255,0.95)'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-center fw-bold text-dark mb-2\",\n          children: header.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-muted mb-4\",\n          children: header.subtitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card bg-light border-0 shadow-sm p-4 mb-4 rounded-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row g-4\",\n            children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(DashboardCard, {\n              title: card.title,\n              description: card.description,\n              icon: card.icon,\n              onClick: card.title === 'Revenue Forecast' ? toggleRevenueOptions // This opens the first popup\n              : () => showMessage(`Navigating to ${card.title}`)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card bg-light border-0 shadow-sm p-4 rounded-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row row-cols-1 row-cols-sm-2 row-cols-md-4 g-4\",\n            children: metrics.map((metric, index) => /*#__PURE__*/_jsxDEV(DashboardMetric, {\n              value: metric.value,\n              label: metric.label\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 7\n    }, this), showMessageBox && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"position-fixed top-50 start-50 translate-middle bg-dark text-white p-4 rounded shadow text-center\",\n      style: {\n        zIndex: 999\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-3\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-light btn-sm\",\n        onClick: hideMessage,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 9\n    }, this), showRevenueOptions && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow text-center\",\n      style: {\n        zIndex: 999\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"fw-bold mb-3 text-dark\",\n        children: revenuePopup.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 11\n      }, this), revenuePopup.buttons.map((btn, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `btn btn-outline-${btn.variant} w-100 mb-2`,\n        onClick: () => {\n          if (btn.action === 'upload') {\n            toggleRevenueOptions(); // Close this popup\n\n            navigate('/upload'); // Navigate to upload page\n          } else if (btn.action === 'viewPastData') {\n            // Action for View Past Data\n\n            toggleRevenueOptions(); // Close this popup\n\n            setSelectedDateViewPast(null); // Reset selected date for this popup to ensure it starts empty\n\n            setShowViewPastDataPopup(true); // Open the \"View Past Data\" Month/Year selection popup\n          } else {\n            // cancel\n\n            toggleRevenueOptions(); // Close this popup\n          }\n        },\n        children: btn.text\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 9\n    }, this), showViewPastDataPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\",\n      style: {\n        zIndex: 999,\n        minWidth: '360px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"fw-bold mb-3 text-center\",\n        children: \"Select Month and Year to View Past Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3 text-center\",\n        children: /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: selectedDateViewPast,\n          onChange: date => setSelectedDateViewPast(date),\n          dateFormat: \"MM/yyyy\",\n          showMonthYearPicker: true,\n          showFullMonthYearPicker: true // Ensures only month/year are selectable\n          ,\n\n          maxDate: lastDayOfPreviousMonth // <--- THIS IS THE KEY CHANGE\n          ,\n\n          className: \"form-control text-center\" // Apply Bootstrap styling\n          ,\n\n          placeholderText: \"Select Month & Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary w-100 mb-2\",\n        onClick: handleViewPastData,\n        disabled: !selectedDateViewPast // Disable \"Go\" button if no date is selected\n        ,\n        children: \"Go\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-secondary w-100\",\n        onClick: () => setShowViewPastDataPopup(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 466,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"eQjgUM0713vp7mhncIxuwilPKzM=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","DashboardCard","DashboardMetric","dashboardData","DatePicker","jsxDEV","_jsxDEV","Dashboard","_s","navigate","message","setMessage","showMessageBox","setShowMessageBox","showRevenueOptions","setShowRevenueOptions","showViewPastDataPopup","setShowViewPastDataPopup","selectedDateViewPast","setSelectedDateViewPast","header","metrics","cards","revenuePopup","link","document","createElement","href","rel","head","appendChild","body","style","fontFamily","showMessage","msg","hideMessage","toggleRevenueOptions","prev","handleViewPastData","alert","month","getMonth","year","getFullYear","state","isPopupOpen","today","Date","lastDayOfPreviousMonth","className","background","overflow","children","backdropFilter","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","backgroundColor","title","subtitle","map","card","index","description","icon","onClick","metric","value","label","buttons","btn","i","variant","action","text","minWidth","selected","onChange","date","dateFormat","showMonthYearPicker","showFullMonthYearPicker","maxDate","placeholderText","disabled","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Dashboard/Dashboard.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import DashboardCard from './DashboardCard';\r\n// import DashboardMetric from './DashboardMetric';\r\n// import dashboardData from '../../data/dashboard.json';\r\n\r\n// const Dashboard = () => {\r\n//   const navigate = useNavigate();\r\n//   const [message, setMessage] = useState('');\r\n//   const [showMessageBox, setShowMessageBox] = useState(false);\r\n//   const [showRevenueOptions, setShowRevenueOptions] = useState(false);\r\n//   const [showViewDataPopup, setShowViewDataPopup] = useState(false);\r\n//   const [selectedAccount, setSelectedAccount] = useState('');\r\n//   const [selectedProject, setSelectedProject] = useState('');\r\n//   const [projects, setProjects] = useState([]);\r\n\r\n//   const { header, metrics, cards, accountOptions, revenuePopup } = dashboardData;\r\n\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   const showMessage = (msg) => {\r\n//     setMessage(msg);\r\n//     setShowMessageBox(true);\r\n//   };\r\n\r\n//   const hideMessage = () => setShowMessageBox(false);\r\n//   const toggleRevenueOptions = () => setShowRevenueOptions(prev => !prev);\r\n\r\n//   const openViewDataPopup = () => {\r\n//     setSelectedAccount('');\r\n//     setSelectedProject('');\r\n//     setProjects([]);\r\n//     setShowRevenueOptions(false);\r\n//     setShowViewDataPopup(true);\r\n//   };\r\n\r\n//   const handleAccountChange = (e) => {\r\n//     const acc = e.target.value;\r\n//     setSelectedAccount(acc);\r\n//     setProjects(accountOptions[acc] || []);\r\n//     setSelectedProject('');\r\n//   };\r\n\r\n//   const handleProjectSelection = () => {\r\n//     if (!selectedAccount || !selectedProject) {\r\n//       showMessage('Please select both an Account and a Project.');\r\n//     } else {\r\n//       setShowViewDataPopup(false);\r\n//       navigate(`/projects/${selectedProject}`);\r\n//     }\r\n//   };\r\n\r\n//   const isPopupOpen = showMessageBox || showRevenueOptions || showViewDataPopup;\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"position-relative min-vh-100 d-flex justify-content-center align-items-center px-3\"\r\n//       style={{\r\n//         background: 'radial-gradient(circle at center, #f8f9fa 60%, #e0e0e0 100%)',\r\n//         overflow: 'hidden'\r\n//       }}\r\n//     >\r\n//       {isPopupOpen && (\r\n//         <div\r\n//           className=\"position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-25\"\r\n//           style={{ backdropFilter: 'blur(3px)', zIndex: 1 }}\r\n//         />\r\n//       )}\r\n\r\n//       <div\r\n//         className=\"card rounded-4 shadow-lg w-100\"\r\n//         style={{ maxWidth: '1100px', zIndex: 2, backgroundColor: 'rgba(255,255,255,0.95)' }}\r\n//       >\r\n//         <div className=\"card-body\">\r\n//           <h2 className=\"text-center fw-bold text-dark mb-2\">{header.title}</h2>\r\n//           <p className=\"text-center text-muted mb-4\">{header.subtitle}</p>\r\n\r\n//           <div className=\"card bg-light border-0 shadow-sm p-4 mb-4 rounded-3\">\r\n//             <div className=\"row g-4\">\r\n//               {cards.map((card, index) => (\r\n//                 <DashboardCard\r\n//                   key={index}\r\n//                   title={card.title}\r\n//                   description={card.description}\r\n//                   icon={card.icon}\r\n//                   onClick={\r\n//                     card.title === 'Revenue Forecast'\r\n//                       ? toggleRevenueOptions\r\n//                       : () => showMessage(`Navigating to ${card.title}`)\r\n//                   }\r\n//                 />\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"card bg-light border-0 shadow-sm p-4 rounded-3\">\r\n//             <div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-4 g-4\">\r\n//               {metrics.map((metric, index) => (\r\n//                 <DashboardMetric key={index} value={metric.value} label={metric.label} />\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {showMessageBox && (\r\n//         <div\r\n//           className=\"position-fixed top-50 start-50 translate-middle bg-dark text-white p-4 rounded shadow text-center\"\r\n//           style={{ zIndex: 999 }}\r\n//         >\r\n//           <p className=\"mb-3\">{message}</p>\r\n//           <button className=\"btn btn-light btn-sm\" onClick={hideMessage}>Close</button>\r\n//         </div>\r\n//       )}\r\n\r\n//       {showRevenueOptions && (\r\n//         <div\r\n//           className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow text-center\"\r\n//           style={{ zIndex: 999 }}\r\n//         >\r\n//           <h5 className=\"fw-bold mb-3 text-dark\">{revenuePopup.title}</h5>\r\n//           {revenuePopup.buttons.map((btn, i) => (\r\n//             <button\r\n//               key={i}\r\n//               className={`btn btn-outline-${btn.variant} w-100 mb-2`}\r\n//               onClick={() => {\r\n//                 if (btn.action === 'upload') {\r\n//                   toggleRevenueOptions();\r\n//                   navigate('/upload');\r\n//                 } else if (btn.action === 'view') {\r\n//                   openViewDataPopup();\r\n//                 } else {\r\n//                   toggleRevenueOptions();\r\n//                 }\r\n//               }}\r\n//             >\r\n//               {btn.text}\r\n//             </button>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n\r\n//       {showViewDataPopup && (\r\n//         <div\r\n//           className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\"\r\n//           style={{ zIndex: 999 }}\r\n//         >\r\n//           <h5 className=\"fw-bold mb-3 text-center\">View Project Revenue</h5>\r\n//           <div className=\"mb-3\">\r\n//             <label className=\"form-label\">Account</label>\r\n//             <select className=\"form-select\" value={selectedAccount} onChange={handleAccountChange}>\r\n//               <option value=\"\">-- Select --</option>\r\n//               {Object.keys(accountOptions).map((acc) => (\r\n//                 <option key={acc} value={acc}>{acc}</option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n//           <div className=\"mb-3\">\r\n//             <label className=\"form-label\">Project</label>\r\n//             <select\r\n//               className=\"form-select\"\r\n//               value={selectedProject}\r\n//               onChange={(e) => setSelectedProject(e.target.value)}\r\n//               disabled={!projects.length}\r\n//             >\r\n//               <option value=\"\">-- Select --</option>\r\n//               {projects.map((proj) => (\r\n//                 <option key={proj} value={proj}>{proj}</option>\r\n//               ))}\r\n//             </select>\r\n//           </div>\r\n//           <button className=\"btn btn-primary w-100 mb-2\" onClick={handleProjectSelection}>View Details</button>\r\n//           <button className=\"btn btn-outline-secondary w-100\" onClick={() => setShowViewDataPopup(false)}>Cancel</button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\n// good non integrated\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import DashboardCard from './DashboardCard';\r\n// import DashboardMetric from './DashboardMetric';\r\n// import dashboardData from '../../data/dashboard.json';\r\n// import DatePicker from 'react-datepicker'; // Import DatePicker\r\n// // REMEMBER: The CSS import for react-datepicker should be in App.js or index.js\r\n// // import 'react-datepicker/dist/react-datepicker.css'; \r\n\r\n// const Dashboard = () => {\r\n//   const navigate = useNavigate();\r\n//   const [message, setMessage] = useState('');\r\n//   const [showMessageBox, setShowMessageBox] = useState(false);\r\n//   const [showRevenueOptions, setShowRevenueOptions] = useState(false);\r\n//   // Removed showGetDataMonthYearPopup and selectedDateGetData states\r\n//   const [showViewPastDataPopup, setShowViewPastDataPopup] = useState(false); // State for View Past Data popup\r\n\r\n//   const [selectedDateViewPast, setSelectedDateViewPast] = useState(null); // Date for View Past Data popup\r\n\r\n//   const { header, metrics, cards, revenuePopup } = dashboardData;\r\n\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   const showMessage = (msg) => {\r\n//     setMessage(msg);\r\n//     setShowMessageBox(true);\r\n//   };\r\n\r\n//   const hideMessage = () => setShowMessageBox(false);\r\n//   const toggleRevenueOptions = () => setShowRevenueOptions(prev => !prev);\r\n\r\n//   // Corrected navigation for View Past Data to go to Account Level\r\n//   const handleViewPastData = () => {\r\n//     if (!selectedDateViewPast) {\r\n//       alert('Please select both a month and a year to View Past Data.');\r\n//       return;\r\n//     }\r\n//     setShowViewPastDataPopup(false);\r\n//     // CORRECTED: Navigate to the Account Level\r\n//     navigate('/accounts'); \r\n//   };\r\n\r\n//   // Determine if any popup is open to show the backdrop\r\n//   const isPopupOpen = showMessageBox || showRevenueOptions || showViewPastDataPopup;\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"position-relative min-vh-100 d-flex justify-content-center align-items-center px-3\"\r\n//       style={{\r\n//         background: 'radial-gradient(circle at center, #f8f9fa 60%, #e0e0e0 100%)',\r\n//         overflow: 'hidden'\r\n//       }}\r\n//     >\r\n//       {isPopupOpen && (\r\n//         <div\r\n//           className=\"position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-25\"\r\n//           style={{ backdropFilter: 'blur(3px)', zIndex: 1 }}\r\n//         />\r\n//       )}\r\n\r\n//       <div\r\n//         className=\"card rounded-4 shadow-lg w-100\"\r\n//         style={{ maxWidth: '1100px', zIndex: 2, backgroundColor: 'rgba(255,255,255,0.95)' }}\r\n//       >\r\n//         <div className=\"card-body\">\r\n//           <h2 className=\"text-center fw-bold text-dark mb-2\">{header.title}</h2>\r\n//           <p className=\"text-center text-muted mb-4\">{header.subtitle}</p>\r\n\r\n//           <div className=\"card bg-light border-0 shadow-sm p-4 mb-4 rounded-3\">\r\n//             <div className=\"row g-4\">\r\n//               {cards.map((card, index) => (\r\n//                 <DashboardCard\r\n//                   key={index}\r\n//                   title={card.title}\r\n//                   description={card.description}\r\n//                   icon={card.icon}\r\n//                   onClick={\r\n//                     card.title === 'Revenue Forecast'\r\n//                       ? toggleRevenueOptions // This opens the first popup\r\n//                       : () => showMessage(`Navigating to ${card.title}`)\r\n//                   }\r\n//                 />\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"card bg-light border-0 shadow-sm p-4 rounded-3\">\r\n//             <div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-4 g-4\">\r\n//               {metrics.map((metric, index) => (\r\n//                 <DashboardMetric key={index} value={metric.value} label={metric.label} />\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {showMessageBox && (\r\n//         <div\r\n//           className=\"position-fixed top-50 start-50 translate-middle bg-dark text-white p-4 rounded shadow text-center\"\r\n//           style={{ zIndex: 999 }}\r\n//         >\r\n//           <p className=\"mb-3\">{message}</p>\r\n//           <button className=\"btn btn-light btn-sm\" onClick={hideMessage}>Close</button>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* First popup: Revenue Forecast Options */}\r\n//       {showRevenueOptions && (\r\n//         <div\r\n//           className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow text-center\"\r\n//           style={{ zIndex: 999 }}\r\n//         >\r\n//           <h5 className=\"fw-bold mb-3 text-dark\">{revenuePopup.title}</h5>\r\n//           {revenuePopup.buttons.map((btn, i) => (\r\n//             <button\r\n//               key={i}\r\n//               className={`btn btn-outline-${btn.variant} w-100 mb-2`}\r\n//               onClick={() => {\r\n//                 if (btn.action === 'upload') {\r\n//                   toggleRevenueOptions(); // Close this popup\r\n//                   navigate('/upload'); // Navigate to upload page\r\n//                 } else if (btn.action === 'viewPastData') { // Action for View Past Data\r\n//                   toggleRevenueOptions(); // Close this popup\r\n//                   setSelectedDateViewPast(null); // Reset selected date for this popup\r\n//                   setShowViewPastDataPopup(true); // Open the \"View Past Data\" Month/Year selection popup\r\n//                 } else { // cancel\r\n//                   toggleRevenueOptions(); // Close this popup\r\n//                 }\r\n//               }}\r\n//             >\r\n//               {btn.text}\r\n//             </button>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* New popup: Month/Year Selection for \"View Past Data\" */}\r\n//       {showViewPastDataPopup && (\r\n//         <div\r\n//           className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\"\r\n//           style={{ zIndex: 999, minWidth: '360px' }}\r\n//         >\r\n//           <h5 className=\"fw-bold mb-3 text-center\">Select Month and Year to View Past Data</h5>\r\n//           <div className=\"mb-3 text-center\">\r\n//             <DatePicker\r\n//               selected={selectedDateViewPast}\r\n//               onChange={(date) => setSelectedDateViewPast(date)}\r\n//               dateFormat=\"MM/yyyy\"\r\n//               showMonthYearPicker\r\n//               className=\"form-control text-center\" // Apply Bootstrap styling\r\n//               placeholderText=\"Select Month & Year\"\r\n//             />\r\n//           </div>\r\n//           <button className=\"btn btn-primary w-100 mb-2\" onClick={handleViewPastData}>\r\n//             Go\r\n//           </button>\r\n//           <button className=\"btn btn-outline-secondary w-100\" onClick={() => setShowViewPastDataPopup(false)}>\r\n//             Cancel\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport DashboardCard from './DashboardCard';\r\n\r\nimport DashboardMetric from './DashboardMetric';\r\n\r\nimport dashboardData from '../../data/dashboard.json';\r\n\r\nimport DatePicker from 'react-datepicker';\r\n\r\n// REMEMBER: The CSS import for react-datepicker should be in App.js or index.js\r\n\r\n// import 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst Dashboard = () => {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [message, setMessage] = useState('');\r\n\r\n  const [showMessageBox, setShowMessageBox] = useState(false);\r\n\r\n  const [showRevenueOptions, setShowRevenueOptions] = useState(false);\r\n\r\n  const [showViewPastDataPopup, setShowViewPastDataPopup] = useState(false);\r\n\r\n  // Initialize selectedDateViewPast to null so DatePicker starts empty\r\n\r\n  const [selectedDateViewPast, setSelectedDateViewPast] = useState(null);\r\n\r\n  const { header, metrics, cards, revenuePopup } = dashboardData;\r\n\r\n  useEffect(() => {\r\n\r\n    const link = document.createElement('link');\r\n\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n\r\n    link.rel = 'stylesheet';\r\n\r\n    document.head.appendChild(link);\r\n\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n  }, []);\r\n\r\n  const showMessage = (msg) => {\r\n\r\n    setMessage(msg);\r\n\r\n    setShowMessageBox(true);\r\n\r\n  };\r\n\r\n  const hideMessage = () => setShowMessageBox(false);\r\n\r\n  const toggleRevenueOptions = () => setShowRevenueOptions(prev => !prev);\r\n\r\n  // Corrected navigation for View Past Data to go to Account Level\r\n\r\n  const handleViewPastData = () => {\r\n\r\n    if (!selectedDateViewPast) {\r\n\r\n      // The button is now disabled if no date is selected, so this alert might not be strictly necessary\r\n\r\n      // but kept for robustness.\r\n\r\n      alert('Please select both a month and a year to View Past Data.');\r\n\r\n      return;\r\n\r\n    }\r\n\r\n    // Extract month (1-indexed) and year from the selected Date object\r\n\r\n    const month = selectedDateViewPast.getMonth() + 1; // getMonth() is 0-indexed, so add 1\r\n\r\n    const year = selectedDateViewPast.getFullYear();\r\n\r\n    setShowViewPastDataPopup(false); // Close the popup\r\n\r\n    // CORRECTED: Navigate to the Account Level, passing month and year as state\r\n\r\n    navigate('/accounts', { state: { month: month, year: year } });\r\n\r\n  };\r\n\r\n  // Determine if any popup is open to show the backdrop\r\n\r\n  const isPopupOpen = showMessageBox || showRevenueOptions || showViewPastDataPopup;\r\n\r\n  // Calculate maxDate for the DatePicker\r\n\r\n  // This will be the last day of the previous month\r\n\r\n  const today = new Date();\r\n\r\n  const lastDayOfPreviousMonth = new Date(today.getFullYear(), today.getMonth(), 0); // Day 0 of current month is last day of previous month\r\n\r\n  return (\r\n\r\n    <div\r\n\r\n      className=\"position-relative min-vh-100 d-flex justify-content-center align-items-center px-3\"\r\n\r\n      style={{\r\n\r\n        background: 'radial-gradient(circle at center, #f8f9fa 60%, #e0e0e0 100%)',\r\n\r\n        overflow: 'hidden'\r\n\r\n      }}\r\n\r\n    >\r\n\r\n      {isPopupOpen && (\r\n\r\n        <div\r\n\r\n          className=\"position-fixed top-0 start-0 w-100 h-100 bg-dark bg-opacity-25\"\r\n\r\n          style={{ backdropFilter: 'blur(3px)', zIndex: 1 }}\r\n\r\n        />\r\n\r\n      )}\r\n\r\n      <div\r\n\r\n        className=\"card rounded-4 shadow-lg w-100\"\r\n\r\n        style={{ maxWidth: '1100px', zIndex: 2, backgroundColor: 'rgba(255,255,255,0.95)' }}\r\n\r\n      >\r\n\r\n        <div className=\"card-body\">\r\n\r\n          <h2 className=\"text-center fw-bold text-dark mb-2\">{header.title}</h2>\r\n\r\n          <p className=\"text-center text-muted mb-4\">{header.subtitle}</p>\r\n\r\n          <div className=\"card bg-light border-0 shadow-sm p-4 mb-4 rounded-3\">\r\n\r\n            <div className=\"row g-4\">\r\n\r\n              {cards.map((card, index) => (\r\n\r\n                <DashboardCard\r\n\r\n                  key={index}\r\n\r\n                  title={card.title}\r\n\r\n                  description={card.description}\r\n\r\n                  icon={card.icon}\r\n\r\n                  onClick={\r\n\r\n                    card.title === 'Revenue Forecast'\r\n\r\n                      ? toggleRevenueOptions // This opens the first popup\r\n\r\n                      : () => showMessage(`Navigating to ${card.title}`)\r\n\r\n                  }\r\n\r\n                />\r\n\r\n              ))}\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"card bg-light border-0 shadow-sm p-4 rounded-3\">\r\n\r\n            <div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-4 g-4\">\r\n\r\n              {metrics.map((metric, index) => (\r\n\r\n                <DashboardMetric key={index} value={metric.value} label={metric.label} />\r\n\r\n              ))}\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n      {showMessageBox && (\r\n\r\n        <div\r\n\r\n          className=\"position-fixed top-50 start-50 translate-middle bg-dark text-white p-4 rounded shadow text-center\"\r\n\r\n          style={{ zIndex: 999 }}\r\n\r\n        >\r\n\r\n          <p className=\"mb-3\">{message}</p>\r\n\r\n          <button className=\"btn btn-light btn-sm\" onClick={hideMessage}>Close</button>\r\n\r\n        </div>\r\n\r\n      )}\r\n\r\n      {/* First popup: Revenue Forecast Options */}\r\n\r\n      {showRevenueOptions && (\r\n\r\n        <div\r\n\r\n          className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow text-center\"\r\n\r\n          style={{ zIndex: 999 }}\r\n\r\n        >\r\n\r\n          <h5 className=\"fw-bold mb-3 text-dark\">{revenuePopup.title}</h5>\r\n\r\n          {revenuePopup.buttons.map((btn, i) => (\r\n\r\n            <button\r\n\r\n              key={i}\r\n\r\n              className={`btn btn-outline-${btn.variant} w-100 mb-2`}\r\n\r\n              onClick={() => {\r\n\r\n                if (btn.action === 'upload') {\r\n\r\n                  toggleRevenueOptions(); // Close this popup\r\n\r\n                  navigate('/upload'); // Navigate to upload page\r\n\r\n                } else if (btn.action === 'viewPastData') { // Action for View Past Data\r\n\r\n                  toggleRevenueOptions(); // Close this popup\r\n\r\n                  setSelectedDateViewPast(null); // Reset selected date for this popup to ensure it starts empty\r\n\r\n                  setShowViewPastDataPopup(true); // Open the \"View Past Data\" Month/Year selection popup\r\n\r\n                } else { // cancel\r\n\r\n                  toggleRevenueOptions(); // Close this popup\r\n\r\n                }\r\n\r\n              }}\r\n\r\n            >\r\n\r\n              {btn.text}\r\n\r\n            </button>\r\n\r\n          ))}\r\n\r\n        </div>\r\n\r\n      )}\r\n\r\n      {/* New popup: Month/Year Selection for \"View Past Data\" */}\r\n\r\n      {showViewPastDataPopup && (\r\n\r\n        <div\r\n\r\n          className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\"\r\n\r\n          style={{ zIndex: 999, minWidth: '360px' }}\r\n\r\n        >\r\n\r\n          <h5 className=\"fw-bold mb-3 text-center\">Select Month and Year to View Past Data</h5>\r\n\r\n          <div className=\"mb-3 text-center\">\r\n\r\n            <DatePicker\r\n\r\n              selected={selectedDateViewPast}\r\n\r\n              onChange={(date) => setSelectedDateViewPast(date)}\r\n\r\n              dateFormat=\"MM/yyyy\"\r\n\r\n              showMonthYearPicker\r\n\r\n              showFullMonthYearPicker // Ensures only month/year are selectable\r\n\r\n              maxDate={lastDayOfPreviousMonth} // <--- THIS IS THE KEY CHANGE\r\n\r\n              className=\"form-control text-center\" // Apply Bootstrap styling\r\n\r\n              placeholderText=\"Select Month & Year\"\r\n\r\n            />\r\n\r\n          </div>\r\n\r\n          <button\r\n\r\n            className=\"btn btn-primary w-100 mb-2\"\r\n\r\n            onClick={handleViewPastData}\r\n\r\n            disabled={!selectedDateViewPast} // Disable \"Go\" button if no date is selected\r\n\r\n          >\r\n\r\n            Go\r\n\r\n          </button>\r\n\r\n          <button className=\"btn btn-outline-secondary w-100\" onClick={() => setShowViewPastDataPopup(false)}>\r\n\r\n            Cancel\r\n\r\n          </button>\r\n\r\n        </div>\r\n\r\n      )}\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n};\r\n\r\nexport default Dashboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}