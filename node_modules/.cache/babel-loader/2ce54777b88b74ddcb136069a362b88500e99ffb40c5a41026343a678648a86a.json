{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\ProjectTypeLevel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Container, Table, Alert, Spinner, Button } from 'react-bootstrap';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Breadcrumbs from '../Breadcrumbs'; // Assuming this path is correct\nimport commonData from '../../data/commonData.json'; // Assuming this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectTypeLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  // Destructure initial state from location.state\n  const {\n    accId,\n    month,\n    year,\n    sbu\n  } = location.state || {};\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // Currency settings from commonData\n  const {\n    locale,\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  } = commonData.currencySettings;\n\n  // Initialize Intl.NumberFormat for currency formatting\n  const formatter = new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  });\n\n  // Helper to format values, handling exponent strings and currency\n  const formatValue = (val, columnName) => {\n    if (typeof val === 'string') {\n      const m = val.match(/^e(\\d+)$/i); // Check for \"eX\" format\n      if (m) {\n        val = Math.pow(10, Number(m[1])); // Convert \"eX\" to 10^X\n      } else if (!isNaN(val)) {\n        val = Number(val); // Convert string numbers to actual numbers\n      }\n    }\n\n    // Format as currency if it's a finite number and the specific column\n    if (typeof val === 'number' && isFinite(val) && columnName === 'totalRevenueByType') {\n      return formatter.format(val);\n    }\n    return val; // Return original value if not a number or not meant for currency formatting\n  };\n\n  // Helper to get month name from month number\n  const getMonthName = m => new Date(year, m - 1).toLocaleString('en-US', {\n    month: 'long'\n  });\n\n  // Load Poppins font from Google Fonts (good practice for consistent styling)\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Fetch Project Type data on component mount or when accId, month, year change\n  useEffect(() => {\n    // Check if essential parameters are available\n    if (!accId || !month || !year) {\n      setError('Missing Account ID, month, or year. Please navigate here with those parameters.');\n      setLoading(false);\n      return;\n    }\n    const fetchProjectTypeData = async () => {\n      setLoading(true);\n      setError(''); // Clear any previous errors\n      try {\n        const payload = {\n          accId: accId,\n          month: Number(month),\n          year: Number(year)\n        };\n        const resp = await axios.post(`${BACKEND_URL}/api/project-type-level`,\n        // API endpoint for Project Type data\n        payload);\n        setData(resp.data); // Set fetched data to state\n      } catch (err) {\n        var _err$response;\n        // Handle API errors\n        console.error(\"Error fetching Project Type data:\", err);\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message || 'Failed to fetch project type data.');\n      } finally {\n        setLoading(false); // Deactivate loading spinner\n      }\n    };\n    fetchProjectTypeData(); // Call the fetch function\n  }, [accId, month, year, BACKEND_URL]); // Dependencies for useEffect\n\n  // Dynamically determine table columns based on the first data item\n  // Filters out specific fields if they are not meant for direct display\n  const columns = data.length ? Object.keys(data[0]).filter(col => col.toLowerCase() !== 'id' && col.toLowerCase() !== 'accountid' && col.toLowerCase() !== 'month' && col.toLowerCase() !== 'year') : [];\n\n  // Append a 'View' column to the headers for navigation\n  const headerCols = [...columns, 'View Projects']; // Changed to 'View Projects' for clarity\n\n  // Define breadcrumb path\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  },\n  // Navigates to root (e.g., your main dashboard)\n  {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  },\n  // Navigates to the upload page\n  // Conditionally add SBU Level if 'sbu' parameter exists\n  ...(sbu ? [{\n    name: `${sbu} SBU Level`,\n    page: 'sbu',\n    state: {\n      month,\n      year,\n      sbu\n    }\n  }] : []),\n  // Account Level breadcrumb, passing necessary state back to AccountLevel\n  {\n    name: 'Account Level',\n    page: `accounts`,\n    state: {\n      month,\n      year,\n      sbu\n    }\n  }, {\n    name: 'Project Type Level',\n    page: `accounts/${accId}/project-types`\n  }].filter(Boolean); // Filter out any null/undefined entries if 'sbu' is not set\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '1100px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"link\",\n        className: \"ps-0 mb-4\",\n        onClick: () => navigate(-1),\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          width: \"24\",\n          height: \"24\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          className: \"feather feather-chevron-left me-2\",\n          children: /*#__PURE__*/_jsxDEV(\"polyline\", {\n            points: \"15 18 9 12 15 6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), \"Back\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4 fw-semibold text-dark\",\n        children: [\"\\uD83D\\uDCCA Project Type Overview for Account \", accId, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-primary\",\n          children: [\"(\", getMonthName(month), \" \", year, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center align-items-center my-5\",\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\",\n          role: \"status\",\n          className: \"me-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ms-3 text-primary\",\n          children: \"Loading Project Type Data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column justify-content-center align-items-center text-danger\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-4\",\n          children: [\"Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mt-3\",\n          onClick: () => navigate('/accounts', {\n            state: {\n              month,\n              year,\n              sbu\n            }\n          }) // Navigate back to Account Level with state\n          ,\n          children: \"Go to Account Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this) : data.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-muted py-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"fs-5\",\n          children: [\"No Project Type data available for Account \", accId, \" in \", getMonthName(month), \" \", year, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please ensure data has been uploaded for this period.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          hover: true,\n          bordered: true,\n          className: \"align-middle mb-0\",\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #1d4ed8, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: headerCols.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: col\n              }, col, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: data.map((row, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [columns.map(col => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatValue(row[col], col)\n              }, col, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 25\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"sm\",\n                  variant: \"outline-primary\" // Changed to outline for consistency\n                  ,\n                  className: \"rounded-circle\" // Added rounded-circle for consistency\n                  ,\n                  onClick: () => navigate(`/accounts/${accId}/projects`, {\n                    state: {\n                      accId,\n                      month,\n                      year,\n                      sbu,\n                      projectType: row.projectType // Pass the project type for filtering at the Project Level\n                    }\n                  }),\n                  title: `View Projects for ${row.projectType || 'this type'}`,\n                  children: \"\\uD83D\\uDD0D \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 23\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectTypeLevel, \"tpt2JgiIb5Ij3iFGrk8NuFCV+r8=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = ProjectTypeLevel;\nexport default ProjectTypeLevel;\nvar _c;\n$RefreshReg$(_c, \"ProjectTypeLevel\");","map":{"version":3,"names":["React","useState","useEffect","axios","Container","Table","Alert","Spinner","Button","useLocation","useNavigate","Breadcrumbs","commonData","jsxDEV","_jsxDEV","ProjectTypeLevel","_s","navigate","location","accId","month","year","sbu","state","data","setData","loading","setLoading","error","setError","locale","currency","minimumFractionDigits","maximumFractionDigits","currencySettings","formatter","Intl","NumberFormat","style","formatValue","val","columnName","m","match","Math","pow","Number","isNaN","isFinite","format","getMonthName","Date","toLocaleString","link","document","createElement","href","rel","head","appendChild","body","fontFamily","fetchProjectTypeData","payload","resp","post","BACKEND_URL","err","_err$response","console","response","message","columns","length","Object","keys","filter","col","toLowerCase","headerCols","breadcrumbPath","name","page","Boolean","className","background","children","maxWidth","backgroundColor","borderRadius","path","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","animation","role","hover","bordered","map","row","idx","size","projectType","title","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/ProjectTypeLevel.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Container,\r\n  Table,\r\n  Alert,\r\n  Spinner,\r\n  Button\r\n} from 'react-bootstrap';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport Breadcrumbs from '../Breadcrumbs'; // Assuming this path is correct\r\nimport commonData from '../../data/commonData.json'; // Assuming this path is correct\r\n\r\nconst ProjectTypeLevel = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  // Destructure initial state from location.state\r\n  const { accId, month, year, sbu } = location.state || {};\r\n\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  // Currency settings from commonData\r\n  const {\r\n    locale,\r\n    currency,\r\n    minimumFractionDigits,\r\n    maximumFractionDigits\r\n  } = commonData.currencySettings;\r\n\r\n  // Initialize Intl.NumberFormat for currency formatting\r\n  const formatter = new Intl.NumberFormat(locale, {\r\n    style: 'currency',\r\n    currency,\r\n    minimumFractionDigits,\r\n    maximumFractionDigits\r\n  });\r\n\r\n  // Helper to format values, handling exponent strings and currency\r\n  const formatValue = (val, columnName) => {\r\n    if (typeof val === 'string') {\r\n      const m = val.match(/^e(\\d+)$/i); // Check for \"eX\" format\r\n      if (m) {\r\n        val = Math.pow(10, Number(m[1])); // Convert \"eX\" to 10^X\r\n      } else if (!isNaN(val)) {\r\n        val = Number(val); // Convert string numbers to actual numbers\r\n      }\r\n    }\r\n\r\n    // Format as currency if it's a finite number and the specific column\r\n    if (typeof val === 'number' && isFinite(val) && columnName === 'totalRevenueByType') {\r\n      return formatter.format(val);\r\n    }\r\n    return val; // Return original value if not a number or not meant for currency formatting\r\n  };\r\n\r\n  // Helper to get month name from month number\r\n  const getMonthName = (m) =>\r\n    new Date(year, m - 1).toLocaleString('en-US', { month: 'long' });\r\n\r\n  // Load Poppins font from Google Fonts (good practice for consistent styling)\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Fetch Project Type data on component mount or when accId, month, year change\r\n  useEffect(() => {\r\n    // Check if essential parameters are available\r\n    if (!accId || !month || !year) {\r\n      setError('Missing Account ID, month, or year. Please navigate here with those parameters.');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const fetchProjectTypeData = async () => {\r\n      setLoading(true);\r\n      setError(''); // Clear any previous errors\r\n      try {\r\n        const payload = {\r\n          accId: accId,\r\n          month: Number(month),\r\n          year: Number(year)\r\n        };\r\n        const resp = await axios.post(\r\n          `${BACKEND_URL}/api/project-type-level`, // API endpoint for Project Type data\r\n          payload\r\n        );\r\n        setData(resp.data); // Set fetched data to state\r\n      } catch (err) {\r\n        // Handle API errors\r\n        console.error(\"Error fetching Project Type data:\", err);\r\n        setError(err.response?.data || err.message || 'Failed to fetch project type data.');\r\n      } finally {\r\n        setLoading(false); // Deactivate loading spinner\r\n      }\r\n    };\r\n\r\n    fetchProjectTypeData(); // Call the fetch function\r\n  }, [accId, month, year, BACKEND_URL]); // Dependencies for useEffect\r\n\r\n  // Dynamically determine table columns based on the first data item\r\n  // Filters out specific fields if they are not meant for direct display\r\n  const columns = data.length\r\n    ? Object.keys(data[0]).filter((col) => col.toLowerCase() !== 'id' && col.toLowerCase() !== 'accountid' && col.toLowerCase() !== 'month' && col.toLowerCase() !== 'year')\r\n    : [];\r\n\r\n  // Append a 'View' column to the headers for navigation\r\n  const headerCols = [...columns, 'View Projects']; // Changed to 'View Projects' for clarity\r\n\r\n  // Define breadcrumb path\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' }, // Navigates to root (e.g., your main dashboard)\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' }, // Navigates to the upload page\r\n    // Conditionally add SBU Level if 'sbu' parameter exists\r\n    ...(sbu ? [{ name: `${sbu} SBU Level`, page: 'sbu', state: { month, year, sbu } }] : []),\r\n    // Account Level breadcrumb, passing necessary state back to AccountLevel\r\n    { name: 'Account Level', page: `accounts`, state: { month, year, sbu } },\r\n    { name: 'Project Type Level', page: `accounts/${accId}/project-types` }\r\n  ].filter(Boolean); // Filter out any null/undefined entries if 'sbu' is not set\r\n\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif\",\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{\r\n          maxWidth: '1100px',\r\n          backgroundColor: '#ffffffdd',\r\n          borderRadius: '1rem',\r\n        }}\r\n      >\r\n        {/* Breadcrumbs component */}\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        {/* Back button */}\r\n        <Button variant=\"link\" className=\"ps-0 mb-4\" onClick={() => navigate(-1)}>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-chevron-left me-2\">\r\n            <polyline points=\"15 18 9 12 15 6\"></polyline>\r\n          </svg>\r\n          Back\r\n        </Button>\r\n\r\n        {/* Page title */}\r\n        <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n          📊 Project Type Overview for Account {accId}{' '}\r\n          <span className=\"text-primary\">\r\n            ({getMonthName(month)} {year})\r\n          </span>\r\n        </h2>\r\n\r\n        {/* Conditional rendering for loading, error, or data display */}\r\n        {loading ? (\r\n          <div className=\"d-flex justify-content-center align-items-center my-5\">\r\n            <Spinner animation=\"border\" role=\"status\" className=\"me-2\" />\r\n            <p className=\"ms-3 text-primary\">Loading Project Type Data...</p>\r\n          </div>\r\n        ) : error ? (\r\n          <div className=\"d-flex flex-column justify-content-center align-items-center text-danger\">\r\n            <p className=\"fs-4\">Error: {error}</p>\r\n            <button\r\n              className=\"btn btn-primary mt-3\"\r\n              onClick={() => navigate('/accounts', { state: { month, year, sbu } })} // Navigate back to Account Level with state\r\n            >\r\n              Go to Account Level\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          data.length === 0 ? (\r\n            <div className=\"text-center text-muted py-5\">\r\n              <p className=\"fs-5\">No Project Type data available for Account {accId} in {getMonthName(month)} {year}.</p>\r\n              <p>Please ensure data has been uploaded for this period.</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"table-responsive rounded\">\r\n              <Table\r\n                hover\r\n                bordered\r\n                className=\"align-middle mb-0\"\r\n                style={{ width: '100%' }}\r\n              >\r\n                <thead\r\n                  className=\"text-white\"\r\n                  style={{\r\n                    background: 'linear-gradient(to right, #1d4ed8, #2563eb)',\r\n                  }}\r\n                >\r\n                  <tr>\r\n                    {headerCols.map((col) => (\r\n                      <th key={col}>{col}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {data.map((row, idx) => (\r\n                    <tr key={idx}>\r\n                      {columns.map((col) => (\r\n                        <td key={col}>{formatValue(row[col], col)}</td>\r\n                      ))}\r\n                      <td className=\"text-center\">\r\n                        {/* Button to navigate to Project Level for the specific Project Type */}\r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"outline-primary\" // Changed to outline for consistency\r\n                          className=\"rounded-circle\" // Added rounded-circle for consistency\r\n                          onClick={() =>\r\n                            navigate(`/accounts/${accId}/projects`, {\r\n                              state: {\r\n                                accId,\r\n                                month,\r\n                                year,\r\n                                sbu,\r\n                                projectType: row.projectType // Pass the project type for filtering at the Project Level\r\n                              }\r\n                            })\r\n                          }\r\n                          title={`View Projects for ${row.projectType || 'this type'}`}\r\n                        >\r\n                          🔍 {/* Using emoji for consistency */}\r\n                        </Button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectTypeLevel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}