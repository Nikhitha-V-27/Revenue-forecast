{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\Frontend\\\\Revenue-forecast\\\\src\\\\components\\\\Details\\\\ProjectLevel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport $ from 'jquery';\nimport 'datatables.net';\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\nimport Breadcrumbs from '../Breadcrumbs'; // Assuming this path is correct\nimport commonData from '../../data/commonData.json'; // Assuming this path is correct\n\n// Utility to convert month number to month name\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getMonthName = monthNumber => {\n  const date = new Date();\n  date.setMonth(monthNumber - 1);\n  return date.toLocaleString('en-US', {\n    month: 'long'\n  });\n};\n\n// Filterable columns for Project Level (indices: Project ID, Project Name)\nconst FILTERABLE_COL_INDICES = [0, 1]; // Project ID (0), Project Name (1)\n\nconst ProjectLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    accountId: urlAccountId\n  } = useParams(); // accountId from URL path\n  const location = useLocation();\n  const tableRef = useRef(null);\n  const tableInstanceRef = useRef(null); // Ref to hold the DataTable instance\n  const dropdownRef = useRef(null); // Ref for the filter dropdown\n\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\n  const [activeSbu, setActiveSbu] = useState(null);\n  const [activeProjectType, setActiveProjectType] = useState(null);\n\n  // Dropdown filter state\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [dropdownColIdx, setDropdownColIdx] = useState(null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const [dropdownValues, setDropdownValues] = useState([]); // Unique values for the current dropdown\n  const [tempSelections, setTempSelections] = useState(new Set()); // Selections in the open dropdown\n  const [listQuery, setListQuery] = useState(''); // Search query for values within the dropdown\n  const [columnSelections, setColumnSelections] = useState({}); // { [colIdx]: Set<string> } - Applied filters\n\n  // Backend URL for API calls\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Currency formatting function\n  const formatCurrency = (value = 0) => value.toLocaleString(commonData.currencySettings.locale, {\n    style: 'currency',\n    currency: commonData.currencySettings.currency,\n    minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\n    maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\n  });\n\n  // Utility to get month name (for file naming)\n  const getMonthName = monthNumber => {\n    if (!monthNumber) return '';\n    const date = new Date();\n    date.setMonth(monthNumber - 1);\n    return date.toLocaleString('en-US', {\n      month: 'long'\n    });\n  };\n\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data and triggers a download.\r\n   */\n  const handleDownloadData = () => {\n    if (projects.length === 0) {\n      console.log('No data to download.');\n      return;\n    }\n\n    // Define CSV headers matching the table columns\n    const headers = [\"Project ID\", \"Project Name\", \"Total Associates\", \"Company Hours\", \"Client Hours\", \"Variance Hours\", \"Revenue\"];\n\n    // Map project data to CSV rows\n    const csvRows = projects.map(project => {\n      return [`\"${project.projectId}\"`,\n      // Enclose in quotes to handle commas if any\n      `\"${project.projectName}\"`, project.totalAssociatesCount, project.totalCompanyHours, project.totalClientHours, project.varianceHours, `\"${formatCurrency(project.revenue)}\"` // Format currency and enclose in quotes\n      ].join(','); // Join values with a comma\n    });\n\n    // Combine headers and rows\n    const csvContent = [headers.join(','),\n    // Join headers with a comma\n    ...csvRows].join('\\n'); // Join rows with a newline character\n\n    // Create a Blob from the CSV content\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n\n    // Create a download link and trigger the download\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n\n    // Generate a dynamic filename\n    const monthName = getMonthName(activeMonth);\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`;\n    link.setAttribute('href', url);\n    link.setAttribute('download', fileName);\n    link.style.visibility = 'hidden'; // Hide the link\n    document.body.appendChild(link); // Append to body\n    link.click(); // Programmatically click the link to trigger download\n    document.body.removeChild(link); // Clean up\n    URL.revokeObjectURL(url); // Release the object URL\n  };\n\n  // Load Poppins font from Google Fonts + inject custom CSS for filters\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n\n    // Inject CSS to hide DataTables sorting arrows and style custom filters\n    const style = document.createElement('style');\n    style.innerHTML = `\n      table.dataTable thead .sorting,\n      table.dataTable thead .sorting_asc,\n      table.dataTable thead .sorting_desc,\n      table.dataTable thead .sorting_asc_disabled,\n      table.dataTable thead .sorting_desc_disabled {\n        background-image: none !important;\n        cursor: default !important;\n      }\n      .filter-icon-btn {\n        border: none;\n        background: transparent;\n        padding: 2px;\n        margin-left: 8px;\n        cursor: pointer;\n        display: inline-flex;\n        align-items: center;\n        vertical-align: middle; /* Align icon vertically with text */\n      }\n      .filter-icon-btn svg { fill: #6b7280; } /* Default icon color */\n      .filter-icon-btn.active svg { fill: #1d4ed8; } /* Active filter icon color */\n      .excel-filter-dropdown {\n        position: absolute;\n        z-index: 2000;\n        width: 260px;\n        background: #fff;\n        border: 1px solid #e5e7eb;\n        border-radius: 8px;\n        box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n        font-family: 'Poppins', sans-serif; /* Ensure dropdown uses Poppins */\n      }\n      .excel-filter-header {\n        padding: 10px 12px;\n        border-bottom: 1px solid #f1f5f9;\n        background: #f8fafc;\n        border-top-left-radius: 8px;\n        border-top-right-radius: 8px;\n      }\n      .excel-filter-body {\n        max-height: 240px;\n        overflow-y: auto; /* Enable vertical scrolling */\n        padding: 8px 12px;\n      }\n      .excel-filter-footer {\n        display: flex;\n        justify-content: flex-end;\n        gap: 8px;\n        padding: 10px 12px;\n        border-top: 1px solid #f1f5f9;\n      }\n      .form-check-label {\n        margin-bottom: 0; /* Remove default margin for checkboxes */\n        cursor: pointer;\n      }\n    `;\n    document.head.appendChild(style);\n  }, []);\n\n  // Fetch project data when context (month, year, accountId, projectType) changes\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5;\n    const fetchProjectData = async (month, year, accId, projectType) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const payload = {\n          month,\n          year,\n          accId,\n          projectType\n        };\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(payload)\n        });\n        if (!resp.ok) {\n          const errText = await resp.text();\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\n        }\n        const data = await resp.json();\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\n        setProjects(list);\n\n        // Derive accountName from response or sessionStorage\n        if (list.length > 0 && list[0].accountName) {\n          setActiveAccountName(list[0].accountName);\n        } else {\n          const storedName = sessionStorage.getItem('lastFetchedProjectAccountName');\n          setActiveAccountName(storedName || accId); // Fallback to accountId if name not found\n        }\n      } catch (e) {\n        console.error('Error fetching project data:', e);\n        setError(`Failed to load project data: ${e.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Determine context from location.state, URL params, or sessionStorage\n    let monthToUse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let yearToUse = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    let accountIdToUse = urlAccountId; // Always from URL params for this component\n    let accountNameToUse = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.accountName;\n    let sbuToUse = (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.sbu;\n    let projectTypeToUse = (_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.projectType;\n\n    // Prioritize sessionStorage for all parameters if not in location.state\n    // This makes the context retrieval more robust\n    if (!monthToUse) monthToUse = sessionStorage.getItem('lastFetchedProjectMonth');\n    if (!yearToUse) yearToUse = sessionStorage.getItem('lastFetchedProjectYear');\n    // accountIdToUse is primarily from useParams (urlAccountId)\n    if (!accountNameToUse) accountNameToUse = sessionStorage.getItem('lastFetchedProjectAccountName');\n    if (!sbuToUse) sbuToUse = sessionStorage.getItem('lastFetchedProjectSbu');\n    if (!projectTypeToUse) projectTypeToUse = sessionStorage.getItem('lastFetchedProjectType');\n\n    // Convert to number\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\n\n    // Only fetch data if all necessary context is available and it's a new context\n    if (monthToUse && yearToUse && accountIdToUse) {\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accountIdToUse !== activeAccountId || sbuToUse !== activeSbu || projectTypeToUse !== activeProjectType || projects.length === 0 // Re-fetch if projects array is empty (e.g., first load)\n      ) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        setActiveAccountId(accountIdToUse);\n        if (accountNameToUse) {\n          setActiveAccountName(accountNameToUse);\n        }\n        setActiveSbu(sbuToUse);\n        setActiveProjectType(projectTypeToUse);\n\n        // Persist context to sessionStorage for future loads\n        sessionStorage.setItem('lastFetchedProjectMonth', monthToUse.toString());\n        sessionStorage.setItem('lastFetchedProjectYear', yearToUse.toString());\n        sessionStorage.setItem('lastFetchedProjectAccountId', accountIdToUse);\n        if (accountNameToUse) {\n          sessionStorage.setItem('lastFetchedProjectAccountName', accountNameToUse);\n        }\n        if (sbuToUse) {\n          sessionStorage.setItem('lastFetchedProjectSbu', sbuToUse);\n        }\n        if (projectTypeToUse) {\n          sessionStorage.setItem('lastFetchedProjectType', projectTypeToUse);\n        }\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse);\n      } else {\n        setLoading(false);\n      }\n    } else {\n      setError('Missing month, year, or Account ID. Please navigate here with all parameters.');\n      setLoading(false);\n    }\n  }, [location.state, urlAccountId, activeMonth, activeYear, activeAccountId, activeSbu, activeProjectType, projects.length]);\n\n  // Initialize and destroy DataTable when projects data changes or component unmounts\n  useEffect(() => {\n    if (!loading && projects.length > 0 && tableRef.current) {\n      const $tbl = $(tableRef.current);\n      if ($.fn.DataTable.isDataTable($tbl)) {\n        tableInstanceRef.current.destroy();\n      }\n      const instance = $tbl.DataTable({\n        paging: true,\n        searching: true,\n        ordering: false,\n        // Disable all default sorting arrows\n        info: true,\n        autoWidth: false,\n        data: projects,\n        // Pass the projects data to DataTable\n        columns: [{\n          data: 'projectId',\n          orderable: false\n        },\n        // Disable sorting for Project ID\n        {\n          data: 'projectName',\n          orderable: false\n        },\n        // Disable sorting for Project Name\n        {\n          data: 'totalAssociatesCount',\n          orderable: false\n        }, {\n          data: 'totalCompanyHours',\n          orderable: false\n        }, {\n          data: 'totalClientHours',\n          orderable: false\n        }, {\n          data: 'varianceHours',\n          orderable: false\n        }, {\n          data: 'revenue',\n          orderable: false,\n          render: data => formatCurrency(data)\n        }, {\n          data: null,\n          orderable: false,\n          className: 'text-center',\n          render: function (data, type, row) {\n            return `\n                <button\n                  class=\"btn btn-sm btn-outline-primary rounded-circle view-associates-btn\"\n                  data-project-id=\"${row.projectId}\"\n                  data-project-name=\"${row.projectName}\"\n                  data-account-id=\"${row.accountId}\"\n                  data-account-name=\"${row.accountName}\"\n                >\n                  🔍\n                </button>\n              `;\n          }\n        }],\n        order: [] // Ensure no default ordering is set\n      });\n      tableInstanceRef.current = instance;\n      // Apply any previously selected filters after DataTables is initialized\n      applyDataTablesFilters(instance);\n\n      // Re-attach event listeners for dynamically rendered buttons\n      $tbl.off('click', '.view-associates-btn').on('click', '.view-associates-btn', function () {\n        const projectId = $(this).data('project-id');\n        const projectName = $(this).data('project-name');\n        const accountId = $(this).data('account-id');\n        const accountName = $(this).data('account-name');\n        navigate(`/projects/${projectId}/associates`, {\n          state: {\n            projectId: projectId,\n            projectName: projectName,\n            accountId: accountId,\n            accountName: accountName,\n            month: activeMonth,\n            year: activeYear,\n            sbu: activeSbu,\n            projectType: activeProjectType\n          }\n        });\n      });\n    }\n    return () => {\n      if (tableInstanceRef.current) {\n        tableInstanceRef.current.destroy();\n        tableInstanceRef.current = null;\n      }\n      $(tableRef.current).off('click', '.view-associates-btn');\n    };\n  }, [loading, projects, activeMonth, activeYear, activeAccountId, activeSbu, activeProjectType, navigate]);\n\n  // Helper: Get cell's displayed value based on column index for filtering\n  const getCellDisplayValue = (project, colIdx) => {\n    var _project$projectId, _project$projectName, _project$totalAssocia, _project$totalCompany, _project$totalClientH, _project$varianceHour, _project$revenue;\n    switch (colIdx) {\n      case 0:\n        return String((_project$projectId = project.projectId) !== null && _project$projectId !== void 0 ? _project$projectId : '');\n      case 1:\n        return String((_project$projectName = project.projectName) !== null && _project$projectName !== void 0 ? _project$projectName : '');\n      case 2:\n        return String((_project$totalAssocia = project.totalAssociatesCount) !== null && _project$totalAssocia !== void 0 ? _project$totalAssocia : '');\n      case 3:\n        return String((_project$totalCompany = project.totalCompanyHours) !== null && _project$totalCompany !== void 0 ? _project$totalCompany : '');\n      case 4:\n        return String((_project$totalClientH = project.totalClientHours) !== null && _project$totalClientH !== void 0 ? _project$totalClientH : '');\n      case 5:\n        return String((_project$varianceHour = project.varianceHours) !== null && _project$varianceHour !== void 0 ? _project$varianceHour : '');\n      case 6:\n        return formatCurrency((_project$revenue = project.revenue) !== null && _project$revenue !== void 0 ? _project$revenue : 0);\n      default:\n        return '';\n    }\n  };\n\n  // Get unique values for a specific column for the dropdown filter\n  const getUniqueValuesForColumn = colIdx => {\n    const set = new Set();\n    projects.forEach(project => {\n      const displayValue = getCellDisplayValue(project, colIdx);\n      set.add(displayValue);\n      // console.log(`[DEBUG] getUniqueValuesForColumn: Project ID: ${project.projectId}, ColIdx: ${colIdx}, DisplayValue: ${displayValue}`);\n    });\n    const uniqueVals = Array.from(set).sort((a, b) => String(a).localeCompare(String(b), undefined, {\n      numeric: true\n    }));\n    // console.log(`[DEBUG] Unique values for column ${colIdx}:`, uniqueVals);\n    return uniqueVals;\n  };\n\n  // Check if a column has an active filter applied (some but not all values selected)\n  const isColumnFiltered = colIdx => {\n    if (!FILTERABLE_COL_INDICES.includes(colIdx)) return false;\n    const appliedSet = columnSelections[colIdx];\n    if (!appliedSet) return false; // No filter applied\n    const uniqueVals = getUniqueValuesForColumn(colIdx);\n    // Filter is active if some values are selected but not all\n    return appliedSet.size > 0 && appliedSet.size < uniqueVals.length;\n  };\n\n  // Open dropdown for a column\n  const openFilterDropdown = (event, colIdx) => {\n    if (!FILTERABLE_COL_INDICES.includes(colIdx)) return;\n    const rect = event.currentTarget.getBoundingClientRect(); // Get position of the clicked header button\n    const uniqueValues = getUniqueValuesForColumn(colIdx);\n    // console.log(`[DEBUG] openFilterDropdown: Unique values for col ${colIdx} (pre-filter):`, uniqueValues);\n\n    // Initialize tempSelections based on current applied filter or all unique values\n    const appliedSet = columnSelections[colIdx];\n    const initialSet = appliedSet && appliedSet.size > 0 ? new Set(appliedSet) : new Set(uniqueValues);\n    setDropdownValues(uniqueValues);\n    setTempSelections(initialSet);\n    setListQuery(''); // Clear dropdown search query\n    setDropdownColIdx(colIdx);\n    setDropdownPosition({\n      top: rect.bottom + window.scrollY + 4,\n      // Position below the clicked header\n      left: rect.left + window.scrollX\n    });\n    setDropdownOpen(true);\n  };\n\n  // Dropdown interactions\n  const toggleTempSelection = value => {\n    const next = new Set(tempSelections);\n    if (next.has(value)) next.delete(value);else next.add(value);\n    setTempSelections(next);\n  };\n  const selectAllTemp = () => setTempSelections(new Set(dropdownValues));\n  const clearAllTemp = () => setTempSelections(new Set());\n\n  // Apply filter to DataTable\n  const applyFilter = () => {\n    if (dropdownColIdx == null || !tableInstanceRef.current) return;\n\n    // Update the columnSelections state with the new temp selections\n    setColumnSelections(prev => ({\n      ...prev,\n      [dropdownColIdx]: new Set(tempSelections)\n    }));\n\n    // Re-apply all filters via DataTables\n    applyDataTablesFilters(tableInstanceRef.current, {\n      overrideColIdx: dropdownColIdx,\n      overrideSet: new Set(tempSelections)\n    });\n    setDropdownOpen(false); // Close dropdown\n  };\n\n  // Reset filter for the current column\n  const resetFilter = () => {\n    if (dropdownColIdx == null || !tableInstanceRef.current) return;\n\n    // Remove the filter for this column from state\n    setColumnSelections(prev => {\n      const next = {\n        ...prev\n      };\n      delete next[dropdownColIdx];\n      return next;\n    });\n\n    // Clear the filter for this column in DataTables and redraw\n    tableInstanceRef.current.column(dropdownColIdx).search('').draw();\n    setDropdownOpen(false); // Close dropdown\n  };\n\n  // Apply all active column filters to DataTables instance\n  const applyDataTablesFilters = (instance, options = {}) => {\n    FILTERABLE_COL_INDICES.forEach(colIdx => {\n      const uniqueValues = getUniqueValuesForColumn(colIdx);\n      const appliedSet = options.overrideColIdx === colIdx ? options.overrideSet // Use override for the currently changed column\n      : columnSelections[colIdx]; // Otherwise, use the stored selection\n\n      // If no selections, all selected, or the column is not filterable by this mechanism, clear its filter\n      if (!appliedSet || appliedSet.size === 0 || appliedSet.size === uniqueValues.length) {\n        instance.column(colIdx).search('', false, false, true); // Clear filter\n      } else {\n        // Build a regex to match any of the selected values\n        const escaped = Array.from(appliedSet).map(v => $.fn.dataTable.util.escapeRegex(String(v)));\n        const regex = `^(${escaped.join('|')})$`; // Match exactly one of the selected values\n        instance.column(colIdx).search(regex, true, false, true); // Apply regex filter\n      }\n    });\n    instance.draw(); // Redraw the table to apply filters\n  };\n\n  // Close dropdown on outside click or Esc key press\n  useEffect(() => {\n    if (!dropdownOpen) return;\n    const onDocClick = e => {\n      // Check if click is inside the dropdown or the filter icon button\n      if (dropdownRef.current && dropdownRef.current.contains(e.target)) return;\n      if ($(e.target).closest('.filter-icon-btn').length) return;\n      setDropdownOpen(false);\n    };\n    const onKeyDown = e => {\n      if (e.key === 'Escape') setDropdownOpen(false);\n    };\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('keydown', onKeyDown);\n    return () => {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  }, [dropdownOpen]);\n\n  // Define breadcrumb path for navigation\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  },\n  // Conditionally add SBU Level\n  ...(activeSbu ? [{\n    name: `${activeSbu} SBU Level`,\n    page: 'sbu',\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }] : []),\n  // Account Level breadcrumb\n  {\n    name: 'Account Level',\n    page: `accounts`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  },\n  // Conditionally add Project Type breadcrumb (name changed to \"Project Type\")\n  ...(activeProjectType ? [{\n    name: `${activeProjectType} Project Type`,\n    page: `accounts/${activeAccountId}/project-types`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu,\n      accId: activeAccountId\n    }\n  }] : []), {\n    name: `Projects (${activeAccountName})`,\n    page: `accounts/${activeAccountId}/projects`\n  }].filter(Boolean);\n\n  // Hamburger icon component\n  const HamburgerIcon = ({\n    active\n  }) => /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"14\",\n    height: \"14\",\n    viewBox: \"0 0 24 24\",\n    \"aria-hidden\": \"true\",\n    style: {\n      verticalAlign: 'middle',\n      fill: active ? '#1d4ed8' : '#6b7280'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"M3 6h18v2H3zM3 11h18v2H3zM3 16h18v2H3z\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 556,\n    columnNumber: 5\n  }, this);\n\n  // Filter dropdown filtered list (based on internal search query)\n  const filteredDropdownValues = dropdownValues.filter(v => String(v).toLowerCase().includes(listQuery.toLowerCase()));\n\n  // Render loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Project Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate('/accounts', {\n          state: {\n            month: activeMonth,\n            year: activeYear,\n            sbu: activeSbu\n          }\n        }),\n        children: \"Go to Account Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Main component render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '1200px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-0 fw-semibold text-dark\",\n          children: [\"\\uD83D\\uDCC1 Project Level Overview\", ' ', activeAccountId ? `for ${activeAccountName}` : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 11\n        }, this), projects.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-success rounded-pill px-3\",\n          onClick: handleDownloadData,\n          title: \"Download Project Data\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-download me-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 15\n          }, this), \" Download Data\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          ref: tableRef,\n          className: \"display table table-hover align-middle table-borderless mb-0\",\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #3b82f6, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: ['Project ID', 'Project Name', 'Total Associates', 'Company Hours', 'Client Hours', 'Variance Hours', 'Revenue', 'View'].map((title, idx) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"d-flex justify-content-between align-items-center\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 652,\n                    columnNumber: 23\n                  }, this), FILTERABLE_COL_INDICES.includes(idx) && /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: 'filter-icon-btn ' + (isColumnFiltered(idx) ? 'active' : ''),\n                    onClick: e => openFilterDropdown(e, idx),\n                    title: \"Filter\",\n                    children: /*#__PURE__*/_jsxDEV(HamburgerIcon, {\n                      active: isColumnFiltered(idx)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 663,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 654,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 651,\n                  columnNumber: 21\n                }, this)\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 650,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this), dropdownOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: dropdownRef,\n      className: \"excel-filter-dropdown\",\n      style: {\n        top: dropdownPosition.top,\n        left: dropdownPosition.left\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"excel-filter-header\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control form-control-sm\",\n          placeholder: \"Search values...\",\n          value: listQuery,\n          onChange: e => setListQuery(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"excel-filter-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-between mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-sm btn-outline-secondary\",\n            onClick: selectAllTemp,\n            children: \"Select All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-sm btn-outline-secondary\",\n            onClick: clearAllTemp,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 13\n        }, this), filteredDropdownValues.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-muted small px-3 py-1\",\n          children: \"No values\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 15\n        }, this) : filteredDropdownValues.map(val => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"checkbox\",\n            id: `chk-${dropdownColIdx}-${val}`,\n            checked: tempSelections.has(val),\n            onChange: () => toggleTempSelection(val)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-check-label\",\n            htmlFor: `chk-${dropdownColIdx}-${val}`,\n            style: {\n              userSelect: 'none'\n            },\n            children: val\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 19\n          }, this)]\n        }, val, true, {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"excel-filter-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm btn-light\",\n          onClick: resetFilter,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm btn-primary\",\n          onClick: applyFilter,\n          children: \"Apply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 593,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectLevel, \"BybAmZjJBLvhjxF+Jtx4jk7UBao=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = ProjectLevel;\nexport default ProjectLevel;\nvar _c;\n$RefreshReg$(_c, \"ProjectLevel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","useParams","useLocation","$","Breadcrumbs","commonData","jsxDEV","_jsxDEV","getMonthName","monthNumber","date","Date","setMonth","toLocaleString","month","FILTERABLE_COL_INDICES","ProjectLevel","_s","navigate","accountId","urlAccountId","location","tableRef","tableInstanceRef","dropdownRef","projects","setProjects","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","activeSbu","setActiveSbu","activeProjectType","setActiveProjectType","dropdownOpen","setDropdownOpen","dropdownColIdx","setDropdownColIdx","dropdownPosition","setDropdownPosition","top","left","dropdownValues","setDropdownValues","tempSelections","setTempSelections","Set","listQuery","setListQuery","columnSelections","setColumnSelections","BACKEND_URL","formatCurrency","value","currencySettings","locale","style","currency","minimumFractionDigits","maximumFractionDigits","handleDownloadData","length","console","log","headers","csvRows","map","project","projectId","projectName","totalAssociatesCount","totalCompanyHours","totalClientHours","varianceHours","revenue","join","csvContent","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","monthName","fileName","setAttribute","visibility","body","appendChild","click","removeChild","revokeObjectURL","href","rel","head","fontFamily","innerHTML","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","fetchProjectData","year","accId","projectType","payload","resp","fetch","method","JSON","stringify","ok","errText","text","Error","status","statusText","data","json","list","Array","isArray","filter","Boolean","accountName","storedName","sessionStorage","getItem","e","message","monthToUse","state","yearToUse","accountIdToUse","accountNameToUse","sbuToUse","sbu","projectTypeToUse","parseInt","setItem","toString","current","$tbl","fn","DataTable","isDataTable","destroy","instance","paging","searching","ordering","info","autoWidth","columns","orderable","render","className","row","order","applyDataTablesFilters","off","on","getCellDisplayValue","colIdx","_project$projectId","_project$projectName","_project$totalAssocia","_project$totalCompany","_project$totalClientH","_project$varianceHour","_project$revenue","String","getUniqueValuesForColumn","set","forEach","displayValue","add","uniqueVals","from","sort","a","b","localeCompare","undefined","numeric","isColumnFiltered","includes","appliedSet","size","openFilterDropdown","event","rect","currentTarget","getBoundingClientRect","uniqueValues","initialSet","bottom","window","scrollY","scrollX","toggleTempSelection","next","has","delete","selectAllTemp","clearAllTemp","applyFilter","prev","overrideColIdx","overrideSet","resetFilter","column","search","draw","options","escaped","v","dataTable","util","escapeRegex","regex","onDocClick","contains","target","closest","onKeyDown","key","addEventListener","removeEventListener","breadcrumbPath","name","page","HamburgerIcon","active","width","height","viewBox","verticalAlign","fill","children","d","_jsxFileName","lineNumber","columnNumber","filteredDropdownValues","toLowerCase","role","onClick","background","maxWidth","backgroundColor","borderRadius","path","title","ref","idx","placeholder","onChange","val","id","checked","htmlFor","userSelect","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/Frontend/Revenue-forecast/src/components/Details/ProjectLevel.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport $ from 'jquery';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\nimport Breadcrumbs from '../Breadcrumbs'; // Assuming this path is correct\r\nimport commonData from '../../data/commonData.json'; // Assuming this path is correct\r\n\r\n// Utility to convert month number to month name\r\nconst getMonthName = (monthNumber) => {\r\n  const date = new Date();\r\n  date.setMonth(monthNumber - 1);\r\n  return date.toLocaleString('en-US', { month: 'long' });\r\n};\r\n\r\n// Filterable columns for Project Level (indices: Project ID, Project Name)\r\nconst FILTERABLE_COL_INDICES = [0, 1]; // Project ID (0), Project Name (1)\r\n\r\nconst ProjectLevel = () => {\r\n  const navigate = useNavigate();\r\n  const { accountId: urlAccountId } = useParams(); // accountId from URL path\r\n  const location = useLocation();\r\n  const tableRef = useRef(null);\r\n  const tableInstanceRef = useRef(null); // Ref to hold the DataTable instance\r\n  const dropdownRef = useRef(null); // Ref for the filter dropdown\r\n\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n  const [activeAccountId, setActiveAccountId] = useState(null);\r\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n  const [activeSbu, setActiveSbu] = useState(null);\r\n  const [activeProjectType, setActiveProjectType] = useState(null);\r\n\r\n  // Dropdown filter state\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const [dropdownColIdx, setDropdownColIdx] = useState(null);\r\n  const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0 });\r\n  const [dropdownValues, setDropdownValues] = useState([]); // Unique values for the current dropdown\r\n  const [tempSelections, setTempSelections] = useState(new Set()); // Selections in the open dropdown\r\n  const [listQuery, setListQuery] = useState(''); // Search query for values within the dropdown\r\n  const [columnSelections, setColumnSelections] = useState({}); // { [colIdx]: Set<string> } - Applied filters\r\n\r\n  // Backend URL for API calls\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Currency formatting function\r\n  const formatCurrency = (value = 0) =>\r\n    value.toLocaleString(commonData.currencySettings.locale, {\r\n      style: 'currency',\r\n      currency: commonData.currencySettings.currency,\r\n      minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\r\n      maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\r\n    });\r\n\r\n  // Utility to get month name (for file naming)\r\n  const getMonthName = (monthNumber) => {\r\n    if (!monthNumber) return '';\r\n    const date = new Date();\r\n    date.setMonth(monthNumber - 1);\r\n    return date.toLocaleString('en-US', { month: 'long' });\r\n  };\r\n\r\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data and triggers a download.\r\n   */\r\n  const handleDownloadData = () => {\r\n    if (projects.length === 0) {\r\n      console.log('No data to download.');\r\n      return;\r\n    }\r\n\r\n    // Define CSV headers matching the table columns\r\n    const headers = [\r\n      \"Project ID\", \"Project Name\", \"Total Associates\", \"Company Hours\",\r\n      \"Client Hours\", \"Variance Hours\", \"Revenue\"\r\n    ];\r\n\r\n    // Map project data to CSV rows\r\n    const csvRows = projects.map(project => {\r\n      return [\r\n        `\"${project.projectId}\"`, // Enclose in quotes to handle commas if any\r\n        `\"${project.projectName}\"`,\r\n        project.totalAssociatesCount,\r\n        project.totalCompanyHours,\r\n        project.totalClientHours,\r\n        project.varianceHours,\r\n        `\"${formatCurrency(project.revenue)}\"` // Format currency and enclose in quotes\r\n      ].join(','); // Join values with a comma\r\n    });\r\n\r\n    // Combine headers and rows\r\n    const csvContent = [\r\n      headers.join(','), // Join headers with a comma\r\n      ...csvRows\r\n    ].join('\\n'); // Join rows with a newline character\r\n\r\n    // Create a Blob from the CSV content\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n\r\n    // Create a download link and trigger the download\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    // Generate a dynamic filename\r\n    const monthName = getMonthName(activeMonth);\r\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`;\r\n\r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', fileName);\r\n    link.style.visibility = 'hidden'; // Hide the link\r\n    document.body.appendChild(link); // Append to body\r\n    link.click(); // Programmatically click the link to trigger download\r\n    document.body.removeChild(link); // Clean up\r\n    URL.revokeObjectURL(url); // Release the object URL\r\n  };\r\n\r\n  // Load Poppins font from Google Fonts + inject custom CSS for filters\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n    // Inject CSS to hide DataTables sorting arrows and style custom filters\r\n    const style = document.createElement('style');\r\n    style.innerHTML = `\r\n      table.dataTable thead .sorting,\r\n      table.dataTable thead .sorting_asc,\r\n      table.dataTable thead .sorting_desc,\r\n      table.dataTable thead .sorting_asc_disabled,\r\n      table.dataTable thead .sorting_desc_disabled {\r\n        background-image: none !important;\r\n        cursor: default !important;\r\n      }\r\n      .filter-icon-btn {\r\n        border: none;\r\n        background: transparent;\r\n        padding: 2px;\r\n        margin-left: 8px;\r\n        cursor: pointer;\r\n        display: inline-flex;\r\n        align-items: center;\r\n        vertical-align: middle; /* Align icon vertically with text */\r\n      }\r\n      .filter-icon-btn svg { fill: #6b7280; } /* Default icon color */\r\n      .filter-icon-btn.active svg { fill: #1d4ed8; } /* Active filter icon color */\r\n      .excel-filter-dropdown {\r\n        position: absolute;\r\n        z-index: 2000;\r\n        width: 260px;\r\n        background: #fff;\r\n        border: 1px solid #e5e7eb;\r\n        border-radius: 8px;\r\n        box-shadow: 0 10px 25px rgba(0,0,0,0.1);\r\n        font-family: 'Poppins', sans-serif; /* Ensure dropdown uses Poppins */\r\n      }\r\n      .excel-filter-header {\r\n        padding: 10px 12px;\r\n        border-bottom: 1px solid #f1f5f9;\r\n        background: #f8fafc;\r\n        border-top-left-radius: 8px;\r\n        border-top-right-radius: 8px;\r\n      }\r\n      .excel-filter-body {\r\n        max-height: 240px;\r\n        overflow-y: auto; /* Enable vertical scrolling */\r\n        padding: 8px 12px;\r\n      }\r\n      .excel-filter-footer {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        gap: 8px;\r\n        padding: 10px 12px;\r\n        border-top: 1px solid #f1f5f9;\r\n      }\r\n      .form-check-label {\r\n        margin-bottom: 0; /* Remove default margin for checkboxes */\r\n        cursor: pointer;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n  }, []);\r\n\r\n  // Fetch project data when context (month, year, accountId, projectType) changes\r\n  useEffect(() => {\r\n    const fetchProjectData = async (month, year, accId, projectType) => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const payload = { month, year, accId, projectType };\r\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(payload)\r\n        });\r\n\r\n        if (!resp.ok) {\r\n          const errText = await resp.text();\r\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\r\n        }\r\n\r\n        const data = await resp.json();\r\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\r\n        setProjects(list);\r\n\r\n        // Derive accountName from response or sessionStorage\r\n        if (list.length > 0 && list[0].accountName) {\r\n          setActiveAccountName(list[0].accountName);\r\n        } else {\r\n          const storedName = sessionStorage.getItem('lastFetchedProjectAccountName');\r\n          setActiveAccountName(storedName || accId); // Fallback to accountId if name not found\r\n        }\r\n      } catch (e) {\r\n        console.error('Error fetching project data:', e);\r\n        setError(`Failed to load project data: ${e.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Determine context from location.state, URL params, or sessionStorage\r\n    let monthToUse = location.state?.month;\r\n    let yearToUse = location.state?.year;\r\n    let accountIdToUse = urlAccountId; // Always from URL params for this component\r\n    let accountNameToUse = location.state?.accountName;\r\n    let sbuToUse = location.state?.sbu;\r\n    let projectTypeToUse = location.state?.projectType;\r\n\r\n    // Prioritize sessionStorage for all parameters if not in location.state\r\n    // This makes the context retrieval more robust\r\n    if (!monthToUse) monthToUse = sessionStorage.getItem('lastFetchedProjectMonth');\r\n    if (!yearToUse) yearToUse = sessionStorage.getItem('lastFetchedProjectYear');\r\n    // accountIdToUse is primarily from useParams (urlAccountId)\r\n    if (!accountNameToUse) accountNameToUse = sessionStorage.getItem('lastFetchedProjectAccountName');\r\n    if (!sbuToUse) sbuToUse = sessionStorage.getItem('lastFetchedProjectSbu');\r\n    if (!projectTypeToUse) projectTypeToUse = sessionStorage.getItem('lastFetchedProjectType');\r\n\r\n    // Convert to number\r\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\r\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\r\n\r\n    // Only fetch data if all necessary context is available and it's a new context\r\n    if (monthToUse && yearToUse && accountIdToUse) {\r\n      if (\r\n        monthToUse !== activeMonth ||\r\n        yearToUse !== activeYear ||\r\n        accountIdToUse !== activeAccountId ||\r\n        sbuToUse !== activeSbu ||\r\n        projectTypeToUse !== activeProjectType ||\r\n        projects.length === 0 // Re-fetch if projects array is empty (e.g., first load)\r\n      ) {\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        setActiveAccountId(accountIdToUse);\r\n        if (accountNameToUse) {\r\n          setActiveAccountName(accountNameToUse);\r\n        }\r\n        setActiveSbu(sbuToUse);\r\n        setActiveProjectType(projectTypeToUse);\r\n\r\n        // Persist context to sessionStorage for future loads\r\n        sessionStorage.setItem('lastFetchedProjectMonth', monthToUse.toString());\r\n        sessionStorage.setItem('lastFetchedProjectYear', yearToUse.toString());\r\n        sessionStorage.setItem('lastFetchedProjectAccountId', accountIdToUse);\r\n        if (accountNameToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectAccountName', accountNameToUse);\r\n        }\r\n        if (sbuToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectSbu', sbuToUse);\r\n        }\r\n        if (projectTypeToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectType', projectTypeToUse);\r\n        }\r\n\r\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setError('Missing month, year, or Account ID. Please navigate here with all parameters.');\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    location.state,\r\n    urlAccountId,\r\n    activeMonth,\r\n    activeYear,\r\n    activeAccountId,\r\n    activeSbu,\r\n    activeProjectType,\r\n    projects.length\r\n  ]);\r\n\r\n  // Initialize and destroy DataTable when projects data changes or component unmounts\r\n  useEffect(() => {\r\n    if (!loading && projects.length > 0 && tableRef.current) {\r\n      const $tbl = $(tableRef.current);\r\n      if ($.fn.DataTable.isDataTable($tbl)) {\r\n        tableInstanceRef.current.destroy();\r\n      }\r\n\r\n      const instance = $tbl.DataTable({\r\n        paging: true,\r\n        searching: true,\r\n        ordering: false, // Disable all default sorting arrows\r\n        info: true,\r\n        autoWidth: false,\r\n        data: projects, // Pass the projects data to DataTable\r\n        columns: [\r\n          { data: 'projectId', orderable: false }, // Disable sorting for Project ID\r\n          { data: 'projectName', orderable: false }, // Disable sorting for Project Name\r\n          { data: 'totalAssociatesCount', orderable: false },\r\n          { data: 'totalCompanyHours', orderable: false },\r\n          { data: 'totalClientHours', orderable: false },\r\n          { data: 'varianceHours', orderable: false },\r\n          { data: 'revenue', orderable: false, render: (data) => formatCurrency(data) },\r\n          {\r\n            data: null,\r\n            orderable: false,\r\n            className: 'text-center',\r\n            render: function (data, type, row) {\r\n              return `\r\n                <button\r\n                  class=\"btn btn-sm btn-outline-primary rounded-circle view-associates-btn\"\r\n                  data-project-id=\"${row.projectId}\"\r\n                  data-project-name=\"${row.projectName}\"\r\n                  data-account-id=\"${row.accountId}\"\r\n                  data-account-name=\"${row.accountName}\"\r\n                >\r\n                  🔍\r\n                </button>\r\n              `;\r\n            }\r\n          }\r\n        ],\r\n        order: [], // Ensure no default ordering is set\r\n      });\r\n\r\n      tableInstanceRef.current = instance;\r\n      // Apply any previously selected filters after DataTables is initialized\r\n      applyDataTablesFilters(instance);\r\n\r\n      // Re-attach event listeners for dynamically rendered buttons\r\n      $tbl.off('click', '.view-associates-btn').on('click', '.view-associates-btn', function() {\r\n        const projectId = $(this).data('project-id');\r\n        const projectName = $(this).data('project-name');\r\n        const accountId = $(this).data('account-id');\r\n        const accountName = $(this).data('account-name');\r\n\r\n        navigate(\r\n          `/projects/${projectId}/associates`,\r\n          {\r\n            state: {\r\n              projectId: projectId,\r\n              projectName: projectName,\r\n              accountId: accountId,\r\n              accountName: accountName,\r\n              month: activeMonth,\r\n              year: activeYear,\r\n              sbu: activeSbu,\r\n              projectType: activeProjectType\r\n            }\r\n          }\r\n        );\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (tableInstanceRef.current) {\r\n        tableInstanceRef.current.destroy();\r\n        tableInstanceRef.current = null;\r\n      }\r\n      $(tableRef.current).off('click', '.view-associates-btn');\r\n    };\r\n  }, [loading, projects, activeMonth, activeYear, activeAccountId, activeSbu, activeProjectType, navigate]);\r\n\r\n\r\n  // Helper: Get cell's displayed value based on column index for filtering\r\n  const getCellDisplayValue = (project, colIdx) => {\r\n    switch (colIdx) {\r\n      case 0: return String(project.projectId ?? '');\r\n      case 1: return String(project.projectName ?? '');\r\n      case 2: return String(project.totalAssociatesCount ?? '');\r\n      case 3: return String(project.totalCompanyHours ?? '');\r\n      case 4: return String(project.totalClientHours ?? '');\r\n      case 5: return String(project.varianceHours ?? '');\r\n      case 6: return formatCurrency(project.revenue ?? 0);\r\n      default: return '';\r\n    }\r\n  };\r\n\r\n  // Get unique values for a specific column for the dropdown filter\r\n  const getUniqueValuesForColumn = (colIdx) => {\r\n    const set = new Set();\r\n    projects.forEach((project) => {\r\n      const displayValue = getCellDisplayValue(project, colIdx);\r\n      set.add(displayValue);\r\n      // console.log(`[DEBUG] getUniqueValuesForColumn: Project ID: ${project.projectId}, ColIdx: ${colIdx}, DisplayValue: ${displayValue}`);\r\n    });\r\n    const uniqueVals = Array.from(set).sort((a, b) =>\r\n      String(a).localeCompare(String(b), undefined, { numeric: true })\r\n    );\r\n    // console.log(`[DEBUG] Unique values for column ${colIdx}:`, uniqueVals);\r\n    return uniqueVals;\r\n  };\r\n\r\n  // Check if a column has an active filter applied (some but not all values selected)\r\n  const isColumnFiltered = (colIdx) => {\r\n    if (!FILTERABLE_COL_INDICES.includes(colIdx)) return false;\r\n    const appliedSet = columnSelections[colIdx];\r\n    if (!appliedSet) return false; // No filter applied\r\n    const uniqueVals = getUniqueValuesForColumn(colIdx);\r\n    // Filter is active if some values are selected but not all\r\n    return appliedSet.size > 0 && appliedSet.size < uniqueVals.length;\r\n  };\r\n\r\n  // Open dropdown for a column\r\n  const openFilterDropdown = (event, colIdx) => {\r\n    if (!FILTERABLE_COL_INDICES.includes(colIdx)) return;\r\n\r\n    const rect = event.currentTarget.getBoundingClientRect(); // Get position of the clicked header button\r\n    const uniqueValues = getUniqueValuesForColumn(colIdx);\r\n    // console.log(`[DEBUG] openFilterDropdown: Unique values for col ${colIdx} (pre-filter):`, uniqueValues);\r\n\r\n    // Initialize tempSelections based on current applied filter or all unique values\r\n    const appliedSet = columnSelections[colIdx];\r\n    const initialSet =\r\n      appliedSet && appliedSet.size > 0 ? new Set(appliedSet) : new Set(uniqueValues);\r\n\r\n    setDropdownValues(uniqueValues);\r\n    setTempSelections(initialSet);\r\n    setListQuery(''); // Clear dropdown search query\r\n    setDropdownColIdx(colIdx);\r\n    setDropdownPosition({\r\n      top: rect.bottom + window.scrollY + 4, // Position below the clicked header\r\n      left: rect.left + window.scrollX,\r\n    });\r\n    setDropdownOpen(true);\r\n  };\r\n\r\n  // Dropdown interactions\r\n  const toggleTempSelection = (value) => {\r\n    const next = new Set(tempSelections);\r\n    if (next.has(value)) next.delete(value);\r\n    else next.add(value);\r\n    setTempSelections(next);\r\n  };\r\n  const selectAllTemp = () => setTempSelections(new Set(dropdownValues));\r\n  const clearAllTemp = () => setTempSelections(new Set());\r\n\r\n  // Apply filter to DataTable\r\n  const applyFilter = () => {\r\n    if (dropdownColIdx == null || !tableInstanceRef.current) return;\r\n\r\n    // Update the columnSelections state with the new temp selections\r\n    setColumnSelections((prev) => ({\r\n      ...prev,\r\n      [dropdownColIdx]: new Set(tempSelections),\r\n    }));\r\n\r\n    // Re-apply all filters via DataTables\r\n    applyDataTablesFilters(tableInstanceRef.current, {\r\n      overrideColIdx: dropdownColIdx,\r\n      overrideSet: new Set(tempSelections),\r\n    });\r\n\r\n    setDropdownOpen(false); // Close dropdown\r\n  };\r\n\r\n  // Reset filter for the current column\r\n  const resetFilter = () => {\r\n    if (dropdownColIdx == null || !tableInstanceRef.current) return;\r\n\r\n    // Remove the filter for this column from state\r\n    setColumnSelections((prev) => {\r\n      const next = { ...prev };\r\n      delete next[dropdownColIdx];\r\n      return next;\r\n    });\r\n\r\n    // Clear the filter for this column in DataTables and redraw\r\n    tableInstanceRef.current.column(dropdownColIdx).search('').draw();\r\n\r\n    setDropdownOpen(false); // Close dropdown\r\n  };\r\n\r\n  // Apply all active column filters to DataTables instance\r\n  const applyDataTablesFilters = (instance, options = {}) => {\r\n    FILTERABLE_COL_INDICES.forEach((colIdx) => {\r\n      const uniqueValues = getUniqueValuesForColumn(colIdx);\r\n      const appliedSet =\r\n        options.overrideColIdx === colIdx\r\n          ? options.overrideSet // Use override for the currently changed column\r\n          : columnSelections[colIdx]; // Otherwise, use the stored selection\r\n\r\n      // If no selections, all selected, or the column is not filterable by this mechanism, clear its filter\r\n      if (!appliedSet || appliedSet.size === 0 || appliedSet.size === uniqueValues.length) {\r\n        instance.column(colIdx).search('', false, false, true); // Clear filter\r\n      } else {\r\n        // Build a regex to match any of the selected values\r\n        const escaped = Array.from(appliedSet).map((v) =>\r\n          $.fn.dataTable.util.escapeRegex(String(v))\r\n        );\r\n        const regex = `^(${escaped.join('|')})$`; // Match exactly one of the selected values\r\n        instance.column(colIdx).search(regex, true, false, true); // Apply regex filter\r\n      }\r\n    });\r\n\r\n    instance.draw(); // Redraw the table to apply filters\r\n  };\r\n\r\n  // Close dropdown on outside click or Esc key press\r\n  useEffect(() => {\r\n    if (!dropdownOpen) return;\r\n    const onDocClick = (e) => {\r\n      // Check if click is inside the dropdown or the filter icon button\r\n      if (dropdownRef.current && dropdownRef.current.contains(e.target)) return;\r\n      if ($(e.target).closest('.filter-icon-btn').length) return;\r\n      setDropdownOpen(false);\r\n    };\r\n    const onKeyDown = (e) => {\r\n      if (e.key === 'Escape') setDropdownOpen(false);\r\n    };\r\n    document.addEventListener('mousedown', onDocClick);\r\n    document.addEventListener('keydown', onKeyDown);\r\n    return () => {\r\n      document.removeEventListener('mousedown', onDocClick);\r\n      document.removeEventListener('keydown', onKeyDown);\r\n    };\r\n  }, [dropdownOpen]);\r\n\r\n  // Define breadcrumb path for navigation\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' },\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n    // Conditionally add SBU Level\r\n    ...(activeSbu ? [{ name: `${activeSbu} SBU Level`, page: 'sbu', state: { month: activeMonth, year: activeYear, sbu: activeSbu } }] : []),\r\n    // Account Level breadcrumb\r\n    { name: 'Account Level', page: `accounts`, state: { month: activeMonth, year: activeYear, sbu: activeSbu } },\r\n    // Conditionally add Project Type breadcrumb (name changed to \"Project Type\")\r\n    ...(activeProjectType ? [{ name: `${activeProjectType} Project Type`, page: `accounts/${activeAccountId}/project-types`, state: { month: activeMonth, year: activeYear, sbu: activeSbu, accId: activeAccountId } }] : []),\r\n    {\r\n      name: `Projects (${activeAccountName})`,\r\n      page: `accounts/${activeAccountId}/projects`\r\n    }\r\n  ].filter(Boolean);\r\n\r\n  // Hamburger icon component\r\n  const HamburgerIcon = ({ active }) => (\r\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" style={{ verticalAlign: 'middle', fill: active ? '#1d4ed8' : '#6b7280' }}>\r\n      <path d=\"M3 6h18v2H3zM3 11h18v2H3zM3 16h18v2H3z\" />\r\n    </svg>\r\n  );\r\n\r\n  // Filter dropdown filtered list (based on internal search query)\r\n  const filteredDropdownValues = dropdownValues.filter((v) =>\r\n    String(v).toLowerCase().includes(listQuery.toLowerCase())\r\n  );\r\n\r\n  // Render loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\" />\r\n        <p className=\"ms-3 text-primary\">Loading Project Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        <button\r\n          className=\"btn btn-primary mt-3\"\r\n          onClick={() => navigate('/accounts', { state: { month: activeMonth, year: activeYear, sbu: activeSbu } })}\r\n        >\r\n          Go to Account Level\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main component render\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{\r\n          maxWidth: '1200px',\r\n          backgroundColor: '#ffffffdd',\r\n          borderRadius: '1rem'\r\n        }}\r\n      >\r\n        {/* Breadcrumbs component */}\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n          <h2 className=\"mb-0 fw-semibold text-dark\">\r\n            📁 Project Level Overview{' '}\r\n            {activeAccountId ? `for ${activeAccountName}` : ''}\r\n          </h2>\r\n          {/* Download button, visible only if projects are loaded */}\r\n          {projects.length > 0 && (\r\n            <button\r\n              className=\"btn btn-outline-success rounded-pill px-3\"\r\n              onClick={handleDownloadData}\r\n              title=\"Download Project Data\"\r\n            >\r\n              <i className=\"bi bi-download me-2\"></i> Download Data\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Responsive table container */}\r\n        <div className=\"table-responsive rounded\">\r\n          <table\r\n            ref={tableRef}\r\n            className=\"display table table-hover align-middle table-borderless mb-0\"\r\n            style={{ width: '100%' }}\r\n          >\r\n            <thead\r\n              className=\"text-white\"\r\n              style={{ background: 'linear-gradient(to right, #3b82f6, #2563eb)' }}\r\n            >\r\n              <tr>\r\n                {[\r\n                  'Project ID',\r\n                  'Project Name',\r\n                  'Total Associates',\r\n                  'Company Hours',\r\n                  'Client Hours',\r\n                  'Variance Hours',\r\n                  'Revenue',\r\n                  'View'\r\n                ].map((title, idx) => (\r\n                  <th key={idx}>\r\n                    <div className=\"d-flex justify-content-between align-items-center\">\r\n                      <span>{title}</span>\r\n                      {FILTERABLE_COL_INDICES.includes(idx) && (\r\n                        <button\r\n                          type=\"button\"\r\n                          className={\r\n                            'filter-icon-btn ' +\r\n                            (isColumnFiltered(idx) ? 'active' : '')\r\n                          }\r\n                          onClick={(e) => openFilterDropdown(e, idx)}\r\n                          title=\"Filter\"\r\n                        >\r\n                          <HamburgerIcon active={isColumnFiltered(idx)} />\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {/* DataTables will handle rendering tbody. No need for projects.map here. */}\r\n              {/* projects.map is removed here as DataTables directly uses the `data` prop for rendering. */}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Hamburger-style Filter Dropdown */}\r\n      {dropdownOpen && (\r\n        <div\r\n          ref={dropdownRef}\r\n          className=\"excel-filter-dropdown\"\r\n          style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\r\n        >\r\n          <div className=\"excel-filter-header\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control form-control-sm\"\r\n              placeholder=\"Search values...\"\r\n              value={listQuery}\r\n              onChange={(e) => setListQuery(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"excel-filter-body\">\r\n            <div className=\"d-flex justify-content-between mb-2\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-sm btn-outline-secondary\"\r\n                onClick={selectAllTemp}\r\n              >\r\n                Select All\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-sm btn-outline-secondary\"\r\n                onClick={clearAllTemp}\r\n              >\r\n                Clear\r\n              </button>\r\n            </div>\r\n\r\n            {filteredDropdownValues.length === 0 ? (\r\n              <div className=\"text-muted small px-3 py-1\">No values</div>\r\n            ) : (\r\n              filteredDropdownValues.map((val) => (\r\n                <div key={val} className=\"form-check\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id={`chk-${dropdownColIdx}-${val}`}\r\n                    checked={tempSelections.has(val)}\r\n                    onChange={() => toggleTempSelection(val)}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label\"\r\n                    htmlFor={`chk-${dropdownColIdx}-${val}`}\r\n                    style={{ userSelect: 'none' }}\r\n                  >\r\n                    {val}\r\n                  </label>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n          <div className=\"excel-filter-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-sm btn-light\"\r\n              onClick={resetFilter}\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-sm btn-primary\"\r\n              onClick={applyFilter}\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectLevel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}