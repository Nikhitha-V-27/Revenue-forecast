{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Upload\\\\UploadFiles.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import UploadCard from './UploadCard';\n// import Breadcrumbs from '../Breadcrumbs'; // Ensure this path is correct\n// import uploadData from '../../data/uploadPage.json';\n// import DatePicker from 'react-datepicker'; // Import DatePicker\n// // REMEMBER: The CSS import for react-datepicker should be in App.js or index.js\n\n// const UploadFiles = () => {\n//   // States to track if files are selected (chosen from dialog)\n//   const [teamSelected, setTeamSelected] = useState(false);\n//   const [customerSelected, setCustomerSelected] = useState(false);\n//   const [associateMappingSelected, setAssociateMappingSelected] = useState(false);\n\n//   // States to track if files are uploaded (processed)\n//   const [teamUploaded, setTeamUploaded] = useState(false);\n//   const [customerUploaded, setCustomerUploaded] = useState(false);\n//   const [associateMappingUploaded, setAssociateMappingUploaded] = useState(false);\n\n//   // States to store the names of the selected/uploaded files\n//   const [teamFileName, setTeamFileName] = useState('');\n//   const [customerFileName, setCustomerFileName] = useState('');\n//   const [associateMappingFileName, setAssociateMappingFileName] = useState('');\n\n//   // State to control the visibility of the \"Get Data\" (Month/Year) popup\n//   const [showGetDataPopup, setShowGetDataPopup] = useState(false);\n//   // State for selected date in the popup\n//   const [selectedDate, setSelectedDate] = useState(null); \n\n//   const navigate = useNavigate(); // Hook for navigation\n\n//   // Effect to load Poppins font on component mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Handler for when a file is chosen from the file dialog (sets 'selected' state)\n//   const handleFileSelect = (type, file) => {\n//     if (!file) return; // If no file was selected\n//     const name = file.name || 'Unnamed file';\n//     if (type === 'team') {\n//       setTeamSelected(true);\n//       setTeamFileName(name);\n//     } else if (type === 'customer') {\n//       setCustomerSelected(true);\n//       setCustomerFileName(name);\n//     } else if (type === 'associateMapping') {\n//       setAssociateMappingSelected(true);\n//       setAssociateMappingFileName(name);\n//     }\n//   };\n\n//   // Handler for when the \"Upload\" button is clicked (sets 'uploaded' state)\n//   const handleProcessUpload = (type) => {\n//     // In a real app, you'd send the file to a server here.\n//     // For this demo, we just set the 'uploaded' state.\n//     if (type === 'team') {\n//       setTeamUploaded(true);\n//     } else if (type === 'customer') {\n//       setCustomerUploaded(true);\n//     } else if (type === 'associateMapping') {\n//       setAssociateMappingUploaded(true);\n//     }\n//     // You might want to show a loading spinner or success message here.\n//   };\n\n//   // Handler to remove a file (resets both 'selected' and 'uploaded' states)\n//   const handleRemoveFile = (type) => {\n//     if (type === 'team') {\n//       setTeamSelected(false);\n//       setTeamUploaded(false);\n//       setTeamFileName('');\n//     } else if (type === 'customer') {\n//       setCustomerSelected(false);\n//       setCustomerUploaded(false);\n//       setCustomerFileName('');\n//     } else if (type === 'associateMapping') {\n//       setAssociateMappingSelected(false);\n//       setAssociateMappingUploaded(false);\n//       setAssociateMappingFileName('');\n//     }\n//   };\n\n//   // Handler for \"Start Reconciliation\" button in the Month/Year popup\n//   const handleStartReconciliation = () => {\n//     if (!selectedDate) {\n//       alert('Please select both a month and a year.');\n//       return;\n//     }\n//     setShowGetDataPopup(false); // Close the popup\n//     navigate('/accounts'); // Navigate to the account level\n//   };\n\n//   // Breadcrumb path for navigation\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' }\n//   ];\n\n//   // Determine if the \"Get Data\" button should be enabled (at least first two sheets uploaded)\n//   const isGetDataButtonEnabled = teamUploaded && customerUploaded;\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #e0f2fe, #f8fafc)'\n//       }}\n//     >\n//       <div className=\"card shadow p-4 p-md-5 w-100\" style={{ maxWidth: '960px', backgroundColor: '#ffffffee' }}>\n//         <Breadcrumbs path={breadcrumbPath} /> {/* Display breadcrumbs */}\n//         <h2 className=\"text-center fw-bold text-dark mb-3\">Revenue Forecast â€“ Early View</h2>\n\n//         {/* Tab Navigation */}\n//         <ul className=\"nav nav-pills nav-fill mb-5\" role=\"tablist\">\n//           {uploadData.tabs.map((tab, i) => (\n//             <li className=\"nav-item\" key={i}>\n//               <button\n//                 type=\"button\"\n//                 className={`nav-link rounded-pill px-4 py-2 ${tab === 'Early View' ? 'active' : 'text-muted'}`}\n//                 style={{ fontWeight: 500 }}\n//               >\n//                 {tab}\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n\n//         <h4 className=\"fw-semibold text-dark mb-4\">Upload Required Files</h4>\n\n//         {/* Upload Cards Section */}\n//         <div className=\"row g-4 mb-4\">\n//           {uploadData.cards.map((card) => {\n//             let currentSelected, currentUploaded, currentFileName;\n//             if (card.type === 'team') {\n//               currentSelected = teamSelected;\n//               currentUploaded = teamUploaded;\n//               currentFileName = teamFileName;\n//             } else if (card.type === 'customer') {\n//               currentSelected = customerSelected;\n//               currentUploaded = customerUploaded;\n//               currentFileName = customerFileName;\n//             } else if (card.type === 'associateMapping') {\n//               currentSelected = associateMappingSelected;\n//               currentUploaded = associateMappingUploaded;\n//               currentFileName = associateMappingFileName;\n//             }\n\n//             return (\n//               <UploadCard\n//                 key={card.type}\n//                 title={card.title}\n//                 description={card.description}\n//                 icon={card.icon}\n//                 onFileSelect={(e) => handleFileSelect(card.type, e.target.files[0])}\n//                 onProcessUpload={() => handleProcessUpload(card.type)}\n//                 onRemove={() => handleRemoveFile(card.type)}\n//                 isSelected={currentSelected}\n//                 uploaded={currentUploaded}\n//                 fileName={currentFileName}\n//                 // Removed the 'disabled' prop here. UploadCard now manages its internal button disabling.\n//               />\n//             );\n//           })}\n//         </div>\n\n//         {/* \"Get Data\" Button - Appears only after both Team and Customer files are uploaded */}\n//         {isGetDataButtonEnabled && (\n//           <div className=\"text-center mt-5\"> {/* Added margin-top for spacing */}\n//             <button\n//               className=\"btn btn-primary px-5 py-2\"\n//               onClick={() => {\n//                 setSelectedDate(null); // Reset date when opening\n//                 setShowGetDataPopup(true); // Opens Month/Year popup\n//               }}\n//             >\n//               Get Data\n//             </button>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Month/Year Selection Popup */}\n//       {showGetDataPopup && (\n//         <div\n//           className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\"\n//           style={{ zIndex: 999, minWidth: '360px' }}\n//         >\n//           <h5 className=\"fw-bold mb-3 text-center\">Select Month and Year</h5>\n//           <div className=\"mb-3 text-center\">\n//             <DatePicker\n//               selected={selectedDate}\n//               onChange={(date) => setSelectedDate(date)}\n//               dateFormat=\"MM/yyyy\"\n//               showMonthYearPicker\n//               className=\"form-control text-center\" // Apply Bootstrap styling\n//               placeholderText=\"Select Month & Year\"\n//             />\n//           </div>\n//           <button className=\"btn btn-primary w-100 mb-2\" onClick={handleStartReconciliation}>\n//             Start Reconciliation\n//           </button>\n//           <button className=\"btn btn-outline-secondary w-100\" onClick={() => setShowGetDataPopup(false)}>\n//             Cancel\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default UploadFiles;\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport UploadCard from './UploadCard';\nimport Breadcrumbs from '../Breadcrumbs';\nimport uploadData from '../../data/uploadPage.json';\nimport DatePicker from 'react-datepicker';\n\n// REMEMBER: The CSS import for react-datepicker should be in App.js or index.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingSpinner = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"d-flex justify-content-center align-items-center\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spinner-border text-primary\",\n    role: \"status\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"visually-hidden\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"ms-2 text-primary\",\n    children: \"Uploading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 235,\n  columnNumber: 3\n}, this);\n_c = LoadingSpinner;\nconst UploadFiles = () => {\n  _s();\n  const navigate = useNavigate();\n\n  // **IMPORTANT**: Replace with your actual Spring Boot backend URL\n\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // States to track the actual File objects selected by the user\n\n  const [teamFile, setTeamFile] = useState(null);\n  const [customerFile, setCustomerFile] = useState(null);\n  const [associateMappingFile, setAssociateMappingFile] = useState(null);\n\n  // States to store the names of the selected/uploaded files (for display)\n\n  const [teamFileName, setTeamFileName] = useState('');\n  const [customerFileName, setCustomerFileName] = useState('');\n  const [associateMappingFileName, setAssociateMappingFileName] = useState('');\n\n  // States to track if files have been successfully uploaded/processed by the backend\n\n  const [teamUploaded, setTeamUploaded] = useState(false);\n  const [customerUploaded, setCustomerUploaded] = useState(false);\n  const [associateMappingUploaded, setAssociateMappingUploaded] = useState(false);\n\n  // States to track loading status for each individual upload card\n\n  const [teamLoading, setTeamLoading] = useState(false);\n  const [customerLoading, setCustomerLoading] = useState(false);\n  const [associateMappingLoading, setAssociateMappingLoading] = useState(false);\n\n  // State for the \"Get Data\" popup visibility and selected date\n\n  const [showGetDataPopup, setShowGetDataPopup] = useState(false);\n\n  // Initialize selectedDate to null so DatePicker starts empty\n\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  // Effect to load Poppins font (runs once on component mount)\n\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  /**\r\n     * Handles file selection from the file input dialog.\r\n     * Stores the file object and its name in the component's state.\r\n     * @param {string} type - The type of file ('team', 'customer', 'associateMapping').\r\n     * @param {File} file - The File object selected by the user.\r\n     */\n\n  const handleFileSelect = (type, file) => {\n    if (!file) return;\n    const name = file.name || 'Unnamed file';\n    if (type === 'team') {\n      setTeamFile(file);\n      setTeamFileName(name);\n      setTeamUploaded(false); // Reset uploaded status if a new file is selected\n    } else if (type === 'customer') {\n      setCustomerFile(file);\n      setCustomerFileName(name);\n      setCustomerUploaded(false);\n    } else if (type === 'associateMapping') {\n      setAssociateMappingFile(file);\n      setAssociateMappingFileName(name);\n      setAssociateMappingUploaded(false);\n    }\n  };\n\n  /**\r\n     * Handles the \"Upload\" button click for each card.\r\n     * Sends the selected file to the backend via a POST request.\r\n     * @param {string} type - The type of file being uploaded ('team', 'customer', 'associateMapping').\r\n     */\n\n  const handleProcessUpload = async type => {\n    let fileToUpload = null;\n    let backendType = ''; // This will be 'company', 'client', or 'associate'\n\n    let setLoading = null;\n    let setUploaded = null;\n    let fileNameForAlert = ''; // Used for user feedback\n\n    let setFileState = null; // To clear the actual File object after successful upload\n\n    // Determine which file and state setters to use based on the 'type'\n\n    if (type === 'team') {\n      fileToUpload = teamFile;\n      backendType = 'company';\n      setLoading = setTeamLoading;\n      setUploaded = setTeamUploaded;\n      fileNameForAlert = teamFileName;\n      setFileState = setTeamFile;\n    } else if (type === 'customer') {\n      fileToUpload = customerFile;\n      backendType = 'client';\n      setLoading = setCustomerLoading;\n      setUploaded = setCustomerUploaded;\n      fileNameForAlert = customerFileName;\n      setFileState = setCustomerFile;\n    } else if (type === 'associateMapping') {\n      fileToUpload = associateMappingFile;\n      backendType = 'associate';\n      setLoading = setAssociateMappingLoading;\n      setUploaded = setAssociateMappingUploaded;\n      fileNameForAlert = associateMappingFileName;\n      setFileState = setAssociateMappingFile;\n    }\n\n    // Prevent upload if no file is selected for this card\n\n    if (!fileToUpload) {\n      alert(`Please select a file for ${type} before uploading.`);\n      return;\n    }\n    setLoading(true); // Activate loading spinner\n\n    const formData = new FormData();\n    formData.append('file', fileToUpload); // 'file' matches @RequestParam(\"file\")\n\n    try {\n      const response = await fetch(`${BACKEND_URL}/upload`, {\n        method: 'POST',\n        headers: {\n          // Custom header for the file type, as expected by your Spring Boot @RequestHeader\n\n          'type': backendType\n        },\n        body: formData // FormData automatically sets 'Content-Type': 'multipart/form-data'\n      });\n      if (response.ok) {\n        // Check for a successful HTTP status (200-299)\n\n        console.log(`${type} file uploaded successfully!`);\n        alert(`${type} file (${fileNameForAlert}) uploaded successfully!`); // Provide user feedback\n\n        setUploaded(true); // Mark as successfully uploaded\n\n        setFileState(null); // Clear the actual File object after successful upload\n      } else {\n        const errorText = await response.text(); // Get detailed error message from backend\n\n        console.error(`Failed to upload ${type} file: ${response.status} - ${errorText}`);\n        alert(`Failed to upload ${type} file (${fileNameForAlert}): ${errorText || response.statusText}`);\n        setUploaded(false); // Ensure it's not marked as uploaded on failure\n      }\n    } catch (error) {\n      // Catches network errors (e.g., server not running, no internet)\n\n      console.error('Network error during file upload:', error);\n      alert(`Network error during ${type} file upload. Please check your connection or server status.`);\n      setUploaded(false);\n    } finally {\n      setLoading(false); // Deactivate loading spinner, regardless of success or failure\n    }\n  };\n\n  /**\r\n     * Handles the \"Remove\" button click for each card.\r\n     * Resets the file, filename, uploaded status, and loading status for that card.\r\n     * @param {string} type - The type of file being removed.\r\n     */\n\n  const handleRemoveFile = type => {\n    if (type === 'team') {\n      setTeamFile(null);\n      setTeamFileName('');\n      setTeamUploaded(false);\n      setTeamLoading(false);\n    } else if (type === 'customer') {\n      setCustomerFile(null);\n      setCustomerFileName('');\n      setCustomerUploaded(false);\n      setCustomerLoading(false);\n    } else if (type === 'associateMapping') {\n      setAssociateMappingFile(null);\n      setAssociateMappingFileName('');\n      setAssociateMappingUploaded(false);\n      setAssociateMappingLoading(false);\n    }\n  };\n\n  /**\r\n     * Handles the \"Start Reconciliation\" button click in the Month/Year popup.\r\n     * Extracts month and year and navigates to the accounts page.\r\n     */\n\n  const handleStartReconciliation = () => {\n    if (!selectedDate) {\n      alert('Please select both a month and a year.');\n      return;\n    }\n\n    // Extract month (1-indexed) and year from the selected Date object\n\n    const month = selectedDate.getMonth() + 1; // getMonth() is 0-indexed, so add 1\n\n    const year = selectedDate.getFullYear();\n    setShowGetDataPopup(false); // Close the popup\n\n    // Navigate to the account level page, passing month and year as state\n\n    navigate('/accounts', {\n      state: {\n        month: month,\n        year: year\n      }\n    });\n  };\n\n  // Breadcrumb path configuration\n\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  }];\n\n  // Calculate maxDate for the DatePicker\n\n  // This will be the last day of the previous month\n\n  const today = new Date();\n  const lastDayOfPreviousMonth = new Date(today.getFullYear(), today.getMonth(), 0); // Day 0 of current month is last day of previous month\n\n  // Determine if the \"Get Data\" button should be enabled (requires Team and Customer files uploaded)\n\n  const isGetDataButtonEnabled = teamUploaded && customerUploaded;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #e0f2fe, #f8fafc)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '960px',\n        backgroundColor: '#ffffffee'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center fw-bold text-dark mb-3\",\n        children: \"Revenue Forecast \\u2013 Early View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"nav nav-pills nav-fill mb-5\",\n        role: \"tablist\",\n        children: uploadData.tabs.map((tab, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"nav-item\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `nav-link rounded-pill px-4 py-2 ${tab === 'Early View' ? 'active' : 'text-muted'}`,\n            style: {\n              fontWeight: 500\n            },\n            children: tab\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 15\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"fw-semibold text-dark mb-4\",\n        children: \"Upload Required Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row g-4 mb-4\",\n        children: uploadData.cards.map(card => {\n          let currentFileState, currentFileNameState, currentUploadedState, currentLoadingState;\n          let isDisabled = false; // Default to not disabled\n\n          // Dynamically assign correct state and handlers based on card type\n\n          if (card.type === 'team') {\n            currentFileState = teamFile;\n            currentFileNameState = teamFileName;\n            currentUploadedState = teamUploaded;\n            currentLoadingState = teamLoading;\n          } else if (card.type === 'customer') {\n            currentFileState = customerFile;\n            currentFileNameState = customerFileName;\n            currentUploadedState = customerUploaded;\n            currentLoadingState = customerLoading;\n          } else if (card.type === 'associateMapping') {\n            currentFileState = associateMappingFile;\n            currentFileNameState = associateMappingFileName;\n            currentUploadedState = associateMappingUploaded;\n            currentLoadingState = associateMappingLoading;\n\n            // Disable associate mapping until team and customer are uploaded\n\n            isDisabled = !teamUploaded || !customerUploaded; // <--- This line disables the card\n          }\n          return /*#__PURE__*/_jsxDEV(UploadCard, {\n            title: card.title,\n            description: card.description,\n            icon: card.icon,\n            onFileSelect: e => handleFileSelect(card.type, e.target.files[0]),\n            onProcessUpload: () => handleProcessUpload(card.type),\n            onRemove: () => handleRemoveFile(card.type),\n            isSelected: !!currentFileState // True if a file object exists\n            ,\n\n            uploaded: currentUploadedState // Reflects if upload was successful\n            ,\n\n            fileName: currentFileNameState,\n            disabled: isDisabled // Pass the calculated disabled state to UploadCard\n            ,\n            children: currentLoadingState && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 731,\n              columnNumber: 41\n            }, this)\n          }, card.type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 9\n      }, this), isGetDataButtonEnabled &&\n      /*#__PURE__*/\n      // <--- This condition ensures the button only appears when both are uploaded\n      _jsxDEV(\"div\", {\n        className: \"text-center mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary px-5 py-2\",\n          onClick: () => {\n            setSelectedDate(null); // Set to null to make DatePicker empty initially\n\n            setShowGetDataPopup(true); // Open Month/Year popup\n          },\n          children: \"Get Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 7\n    }, this), showGetDataPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\",\n      style: {\n        zIndex: 999,\n        minWidth: '360px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"fw-bold mb-3 text-center\",\n        children: \"Select Month and Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3 text-center\",\n        children: /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: selectedDate,\n          onChange: date => setSelectedDate(date),\n          dateFormat: \"MM/yyyy\",\n          showMonthYearPicker: true,\n          showFullMonthYearPicker: true // Ensures only month/year are selectable\n          ,\n\n          maxDate: lastDayOfPreviousMonth // <--- Restricts to past months\n          ,\n\n          className: \"form-control text-center\" // Apply Bootstrap styling\n          ,\n\n          placeholderText: \"Select Month & Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 787,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary w-100 mb-2\",\n        onClick: handleStartReconciliation,\n        disabled: !selectedDate // Disable button if no date is selected\n        ,\n        children: \"Start Reconciliation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 809,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-secondary w-100\",\n        onClick: () => setShowGetDataPopup(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 605,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadFiles, \"hLWo7ei407akKFuL9HOTuESNjpY=\", false, function () {\n  return [useNavigate];\n});\n_c2 = UploadFiles;\nexport default UploadFiles;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadingSpinner\");\n$RefreshReg$(_c2, \"UploadFiles\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","UploadCard","Breadcrumbs","uploadData","DatePicker","jsxDEV","_jsxDEV","LoadingSpinner","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","UploadFiles","_s","navigate","BACKEND_URL","teamFile","setTeamFile","customerFile","setCustomerFile","associateMappingFile","setAssociateMappingFile","teamFileName","setTeamFileName","customerFileName","setCustomerFileName","associateMappingFileName","setAssociateMappingFileName","teamUploaded","setTeamUploaded","customerUploaded","setCustomerUploaded","associateMappingUploaded","setAssociateMappingUploaded","teamLoading","setTeamLoading","customerLoading","setCustomerLoading","associateMappingLoading","setAssociateMappingLoading","showGetDataPopup","setShowGetDataPopup","selectedDate","setSelectedDate","link","document","createElement","href","rel","head","appendChild","body","style","fontFamily","handleFileSelect","type","file","name","handleProcessUpload","fileToUpload","backendType","setLoading","setUploaded","fileNameForAlert","setFileState","alert","formData","FormData","append","response","fetch","method","headers","ok","console","log","errorText","text","error","status","statusText","handleRemoveFile","handleStartReconciliation","month","getMonth","year","getFullYear","state","breadcrumbPath","page","today","Date","lastDayOfPreviousMonth","isGetDataButtonEnabled","background","maxWidth","backgroundColor","path","tabs","map","tab","i","fontWeight","cards","card","currentFileState","currentFileNameState","currentUploadedState","currentLoadingState","isDisabled","title","description","icon","onFileSelect","e","target","files","onProcessUpload","onRemove","isSelected","uploaded","disabled","onClick","zIndex","minWidth","selected","onChange","date","dateFormat","showMonthYearPicker","showFullMonthYearPicker","maxDate","placeholderText","_c2","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Upload/UploadFiles.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import UploadCard from './UploadCard';\r\n// import Breadcrumbs from '../Breadcrumbs'; // Ensure this path is correct\r\n// import uploadData from '../../data/uploadPage.json';\r\n// import DatePicker from 'react-datepicker'; // Import DatePicker\r\n// // REMEMBER: The CSS import for react-datepicker should be in App.js or index.js\r\n\r\n// const UploadFiles = () => {\r\n//   // States to track if files are selected (chosen from dialog)\r\n//   const [teamSelected, setTeamSelected] = useState(false);\r\n//   const [customerSelected, setCustomerSelected] = useState(false);\r\n//   const [associateMappingSelected, setAssociateMappingSelected] = useState(false);\r\n\r\n//   // States to track if files are uploaded (processed)\r\n//   const [teamUploaded, setTeamUploaded] = useState(false);\r\n//   const [customerUploaded, setCustomerUploaded] = useState(false);\r\n//   const [associateMappingUploaded, setAssociateMappingUploaded] = useState(false);\r\n\r\n//   // States to store the names of the selected/uploaded files\r\n//   const [teamFileName, setTeamFileName] = useState('');\r\n//   const [customerFileName, setCustomerFileName] = useState('');\r\n//   const [associateMappingFileName, setAssociateMappingFileName] = useState('');\r\n\r\n//   // State to control the visibility of the \"Get Data\" (Month/Year) popup\r\n//   const [showGetDataPopup, setShowGetDataPopup] = useState(false);\r\n//   // State for selected date in the popup\r\n//   const [selectedDate, setSelectedDate] = useState(null); \r\n\r\n//   const navigate = useNavigate(); // Hook for navigation\r\n\r\n//   // Effect to load Poppins font on component mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Handler for when a file is chosen from the file dialog (sets 'selected' state)\r\n//   const handleFileSelect = (type, file) => {\r\n//     if (!file) return; // If no file was selected\r\n//     const name = file.name || 'Unnamed file';\r\n//     if (type === 'team') {\r\n//       setTeamSelected(true);\r\n//       setTeamFileName(name);\r\n//     } else if (type === 'customer') {\r\n//       setCustomerSelected(true);\r\n//       setCustomerFileName(name);\r\n//     } else if (type === 'associateMapping') {\r\n//       setAssociateMappingSelected(true);\r\n//       setAssociateMappingFileName(name);\r\n//     }\r\n//   };\r\n\r\n//   // Handler for when the \"Upload\" button is clicked (sets 'uploaded' state)\r\n//   const handleProcessUpload = (type) => {\r\n//     // In a real app, you'd send the file to a server here.\r\n//     // For this demo, we just set the 'uploaded' state.\r\n//     if (type === 'team') {\r\n//       setTeamUploaded(true);\r\n//     } else if (type === 'customer') {\r\n//       setCustomerUploaded(true);\r\n//     } else if (type === 'associateMapping') {\r\n//       setAssociateMappingUploaded(true);\r\n//     }\r\n//     // You might want to show a loading spinner or success message here.\r\n//   };\r\n\r\n//   // Handler to remove a file (resets both 'selected' and 'uploaded' states)\r\n//   const handleRemoveFile = (type) => {\r\n//     if (type === 'team') {\r\n//       setTeamSelected(false);\r\n//       setTeamUploaded(false);\r\n//       setTeamFileName('');\r\n//     } else if (type === 'customer') {\r\n//       setCustomerSelected(false);\r\n//       setCustomerUploaded(false);\r\n//       setCustomerFileName('');\r\n//     } else if (type === 'associateMapping') {\r\n//       setAssociateMappingSelected(false);\r\n//       setAssociateMappingUploaded(false);\r\n//       setAssociateMappingFileName('');\r\n//     }\r\n//   };\r\n\r\n//   // Handler for \"Start Reconciliation\" button in the Month/Year popup\r\n//   const handleStartReconciliation = () => {\r\n//     if (!selectedDate) {\r\n//       alert('Please select both a month and a year.');\r\n//       return;\r\n//     }\r\n//     setShowGetDataPopup(false); // Close the popup\r\n//     navigate('/accounts'); // Navigate to the account level\r\n//   };\r\n\r\n//   // Breadcrumb path for navigation\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' }\r\n//   ];\r\n\r\n//   // Determine if the \"Get Data\" button should be enabled (at least first two sheets uploaded)\r\n//   const isGetDataButtonEnabled = teamUploaded && customerUploaded;\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #e0f2fe, #f8fafc)'\r\n//       }}\r\n//     >\r\n//       <div className=\"card shadow p-4 p-md-5 w-100\" style={{ maxWidth: '960px', backgroundColor: '#ffffffee' }}>\r\n//         <Breadcrumbs path={breadcrumbPath} /> {/* Display breadcrumbs */}\r\n//         <h2 className=\"text-center fw-bold text-dark mb-3\">Revenue Forecast â€“ Early View</h2>\r\n\r\n//         {/* Tab Navigation */}\r\n//         <ul className=\"nav nav-pills nav-fill mb-5\" role=\"tablist\">\r\n//           {uploadData.tabs.map((tab, i) => (\r\n//             <li className=\"nav-item\" key={i}>\r\n//               <button\r\n//                 type=\"button\"\r\n//                 className={`nav-link rounded-pill px-4 py-2 ${tab === 'Early View' ? 'active' : 'text-muted'}`}\r\n//                 style={{ fontWeight: 500 }}\r\n//               >\r\n//                 {tab}\r\n//               </button>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n\r\n//         <h4 className=\"fw-semibold text-dark mb-4\">Upload Required Files</h4>\r\n\r\n//         {/* Upload Cards Section */}\r\n//         <div className=\"row g-4 mb-4\">\r\n//           {uploadData.cards.map((card) => {\r\n//             let currentSelected, currentUploaded, currentFileName;\r\n//             if (card.type === 'team') {\r\n//               currentSelected = teamSelected;\r\n//               currentUploaded = teamUploaded;\r\n//               currentFileName = teamFileName;\r\n//             } else if (card.type === 'customer') {\r\n//               currentSelected = customerSelected;\r\n//               currentUploaded = customerUploaded;\r\n//               currentFileName = customerFileName;\r\n//             } else if (card.type === 'associateMapping') {\r\n//               currentSelected = associateMappingSelected;\r\n//               currentUploaded = associateMappingUploaded;\r\n//               currentFileName = associateMappingFileName;\r\n//             }\r\n\r\n//             return (\r\n//               <UploadCard\r\n//                 key={card.type}\r\n//                 title={card.title}\r\n//                 description={card.description}\r\n//                 icon={card.icon}\r\n//                 onFileSelect={(e) => handleFileSelect(card.type, e.target.files[0])}\r\n//                 onProcessUpload={() => handleProcessUpload(card.type)}\r\n//                 onRemove={() => handleRemoveFile(card.type)}\r\n//                 isSelected={currentSelected}\r\n//                 uploaded={currentUploaded}\r\n//                 fileName={currentFileName}\r\n//                 // Removed the 'disabled' prop here. UploadCard now manages its internal button disabling.\r\n//               />\r\n//             );\r\n//           })}\r\n//         </div>\r\n\r\n//         {/* \"Get Data\" Button - Appears only after both Team and Customer files are uploaded */}\r\n//         {isGetDataButtonEnabled && (\r\n//           <div className=\"text-center mt-5\"> {/* Added margin-top for spacing */}\r\n//             <button\r\n//               className=\"btn btn-primary px-5 py-2\"\r\n//               onClick={() => {\r\n//                 setSelectedDate(null); // Reset date when opening\r\n//                 setShowGetDataPopup(true); // Opens Month/Year popup\r\n//               }}\r\n//             >\r\n//               Get Data\r\n//             </button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Month/Year Selection Popup */}\r\n//       {showGetDataPopup && (\r\n//         <div\r\n//           className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\"\r\n//           style={{ zIndex: 999, minWidth: '360px' }}\r\n//         >\r\n//           <h5 className=\"fw-bold mb-3 text-center\">Select Month and Year</h5>\r\n//           <div className=\"mb-3 text-center\">\r\n//             <DatePicker\r\n//               selected={selectedDate}\r\n//               onChange={(date) => setSelectedDate(date)}\r\n//               dateFormat=\"MM/yyyy\"\r\n//               showMonthYearPicker\r\n//               className=\"form-control text-center\" // Apply Bootstrap styling\r\n//               placeholderText=\"Select Month & Year\"\r\n//             />\r\n//           </div>\r\n//           <button className=\"btn btn-primary w-100 mb-2\" onClick={handleStartReconciliation}>\r\n//             Start Reconciliation\r\n//           </button>\r\n//           <button className=\"btn btn-outline-secondary w-100\" onClick={() => setShowGetDataPopup(false)}>\r\n//             Cancel\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UploadFiles;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport UploadCard from './UploadCard';\r\n\r\nimport Breadcrumbs from '../Breadcrumbs'; \r\n\r\nimport uploadData from '../../data/uploadPage.json';\r\n\r\nimport DatePicker from 'react-datepicker';\r\n\r\n// REMEMBER: The CSS import for react-datepicker should be in App.js or index.js\r\n\r\n\r\nconst LoadingSpinner = () => (\r\n\r\n  <div className=\"d-flex justify-content-center align-items-center\">\r\n\r\n    <div className=\"spinner-border text-primary\" role=\"status\">\r\n\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n\r\n    </div>\r\n\r\n    <span className=\"ms-2 text-primary\">Uploading...</span>\r\n\r\n  </div>\r\n\r\n);\r\n\r\nconst UploadFiles = () => {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // **IMPORTANT**: Replace with your actual Spring Boot backend URL\r\n\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // States to track the actual File objects selected by the user\r\n\r\n  const [teamFile, setTeamFile] = useState(null);\r\n\r\n  const [customerFile, setCustomerFile] = useState(null);\r\n\r\n  const [associateMappingFile, setAssociateMappingFile] = useState(null);\r\n\r\n  // States to store the names of the selected/uploaded files (for display)\r\n\r\n  const [teamFileName, setTeamFileName] = useState('');\r\n\r\n  const [customerFileName, setCustomerFileName] = useState('');\r\n\r\n  const [associateMappingFileName, setAssociateMappingFileName] = useState('');\r\n\r\n  // States to track if files have been successfully uploaded/processed by the backend\r\n\r\n  const [teamUploaded, setTeamUploaded] = useState(false);\r\n\r\n  const [customerUploaded, setCustomerUploaded] = useState(false);\r\n\r\n  const [associateMappingUploaded, setAssociateMappingUploaded] = useState(false);\r\n\r\n  // States to track loading status for each individual upload card\r\n\r\n  const [teamLoading, setTeamLoading] = useState(false);\r\n\r\n  const [customerLoading, setCustomerLoading] = useState(false);\r\n\r\n  const [associateMappingLoading, setAssociateMappingLoading] = useState(false);\r\n\r\n  // State for the \"Get Data\" popup visibility and selected date\r\n\r\n  const [showGetDataPopup, setShowGetDataPopup] = useState(false);\r\n\r\n  // Initialize selectedDate to null so DatePicker starts empty\r\n\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n  // Effect to load Poppins font (runs once on component mount)\r\n\r\n  useEffect(() => {\r\n\r\n    const link = document.createElement('link');\r\n\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n\r\n    link.rel = 'stylesheet';\r\n\r\n    document.head.appendChild(link);\r\n\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n  }, []);\r\n\r\n  /**\r\n\r\n   * Handles file selection from the file input dialog.\r\n\r\n   * Stores the file object and its name in the component's state.\r\n\r\n   * @param {string} type - The type of file ('team', 'customer', 'associateMapping').\r\n\r\n   * @param {File} file - The File object selected by the user.\r\n\r\n   */\r\n\r\n  const handleFileSelect = (type, file) => {\r\n\r\n    if (!file) return;\r\n\r\n    const name = file.name || 'Unnamed file';\r\n\r\n    if (type === 'team') {\r\n\r\n      setTeamFile(file);\r\n\r\n      setTeamFileName(name);\r\n\r\n      setTeamUploaded(false); // Reset uploaded status if a new file is selected\r\n\r\n    } else if (type === 'customer') {\r\n\r\n      setCustomerFile(file);\r\n\r\n      setCustomerFileName(name);\r\n\r\n      setCustomerUploaded(false);\r\n\r\n    } else if (type === 'associateMapping') {\r\n\r\n      setAssociateMappingFile(file);\r\n\r\n      setAssociateMappingFileName(name);\r\n\r\n      setAssociateMappingUploaded(false);\r\n\r\n    }\r\n\r\n  };\r\n\r\n  /**\r\n\r\n   * Handles the \"Upload\" button click for each card.\r\n\r\n   * Sends the selected file to the backend via a POST request.\r\n\r\n   * @param {string} type - The type of file being uploaded ('team', 'customer', 'associateMapping').\r\n\r\n   */\r\n\r\n  const handleProcessUpload = async (type) => {\r\n\r\n    let fileToUpload = null;\r\n\r\n    let backendType = ''; // This will be 'company', 'client', or 'associate'\r\n\r\n    let setLoading = null;\r\n\r\n    let setUploaded = null;\r\n\r\n    let fileNameForAlert = ''; // Used for user feedback\r\n\r\n    let setFileState = null; // To clear the actual File object after successful upload\r\n\r\n    // Determine which file and state setters to use based on the 'type'\r\n\r\n    if (type === 'team') {\r\n\r\n      fileToUpload = teamFile;\r\n\r\n      backendType = 'company';\r\n\r\n      setLoading = setTeamLoading;\r\n\r\n      setUploaded = setTeamUploaded;\r\n\r\n      fileNameForAlert = teamFileName;\r\n\r\n      setFileState = setTeamFile;\r\n\r\n    } else if (type === 'customer') {\r\n\r\n      fileToUpload = customerFile;\r\n\r\n      backendType = 'client';\r\n\r\n      setLoading = setCustomerLoading;\r\n\r\n      setUploaded = setCustomerUploaded;\r\n\r\n      fileNameForAlert = customerFileName;\r\n\r\n      setFileState = setCustomerFile;\r\n\r\n    } else if (type === 'associateMapping') {\r\n\r\n      fileToUpload = associateMappingFile;\r\n\r\n      backendType = 'associate';\r\n\r\n      setLoading = setAssociateMappingLoading;\r\n\r\n      setUploaded = setAssociateMappingUploaded;\r\n\r\n      fileNameForAlert = associateMappingFileName;\r\n\r\n      setFileState = setAssociateMappingFile;\r\n\r\n    }\r\n\r\n    // Prevent upload if no file is selected for this card\r\n\r\n    if (!fileToUpload) {\r\n\r\n      alert(`Please select a file for ${type} before uploading.`);\r\n\r\n      return;\r\n\r\n    }\r\n\r\n    setLoading(true); // Activate loading spinner\r\n\r\n    const formData = new FormData();\r\n\r\n    formData.append('file', fileToUpload); // 'file' matches @RequestParam(\"file\")\r\n\r\n    try {\r\n\r\n      const response = await fetch(`${BACKEND_URL}/upload`, {\r\n\r\n        method: 'POST',\r\n\r\n        headers: {\r\n\r\n          // Custom header for the file type, as expected by your Spring Boot @RequestHeader\r\n\r\n          'type': backendType\r\n\r\n        },\r\n\r\n        body: formData, // FormData automatically sets 'Content-Type': 'multipart/form-data'\r\n\r\n      });\r\n\r\n      if (response.ok) { // Check for a successful HTTP status (200-299)\r\n\r\n        console.log(`${type} file uploaded successfully!`);\r\n\r\n        alert(`${type} file (${fileNameForAlert}) uploaded successfully!`); // Provide user feedback\r\n\r\n        setUploaded(true); // Mark as successfully uploaded\r\n\r\n        setFileState(null); // Clear the actual File object after successful upload\r\n\r\n      } else {\r\n\r\n        const errorText = await response.text(); // Get detailed error message from backend\r\n\r\n        console.error(`Failed to upload ${type} file: ${response.status} - ${errorText}`);\r\n\r\n        alert(`Failed to upload ${type} file (${fileNameForAlert}): ${errorText || response.statusText}`);\r\n\r\n        setUploaded(false); // Ensure it's not marked as uploaded on failure\r\n\r\n      }\r\n\r\n    } catch (error) {\r\n\r\n      // Catches network errors (e.g., server not running, no internet)\r\n\r\n      console.error('Network error during file upload:', error);\r\n\r\n      alert(`Network error during ${type} file upload. Please check your connection or server status.`);\r\n\r\n      setUploaded(false);\r\n\r\n    } finally {\r\n\r\n      setLoading(false); // Deactivate loading spinner, regardless of success or failure\r\n\r\n    }\r\n\r\n  };\r\n\r\n  /**\r\n\r\n   * Handles the \"Remove\" button click for each card.\r\n\r\n   * Resets the file, filename, uploaded status, and loading status for that card.\r\n\r\n   * @param {string} type - The type of file being removed.\r\n\r\n   */\r\n\r\n  const handleRemoveFile = (type) => {\r\n\r\n    if (type === 'team') {\r\n\r\n      setTeamFile(null);\r\n\r\n      setTeamFileName('');\r\n\r\n      setTeamUploaded(false);\r\n\r\n      setTeamLoading(false);\r\n\r\n    } else if (type === 'customer') {\r\n\r\n      setCustomerFile(null);\r\n\r\n      setCustomerFileName('');\r\n\r\n      setCustomerUploaded(false);\r\n\r\n      setCustomerLoading(false);\r\n\r\n    } else if (type === 'associateMapping') {\r\n\r\n      setAssociateMappingFile(null);\r\n\r\n      setAssociateMappingFileName('');\r\n\r\n      setAssociateMappingUploaded(false);\r\n\r\n      setAssociateMappingLoading(false);\r\n\r\n    }\r\n\r\n  };\r\n\r\n  /**\r\n\r\n   * Handles the \"Start Reconciliation\" button click in the Month/Year popup.\r\n\r\n   * Extracts month and year and navigates to the accounts page.\r\n\r\n   */\r\n\r\n  const handleStartReconciliation = () => {\r\n\r\n    if (!selectedDate) {\r\n\r\n      alert('Please select both a month and a year.');\r\n\r\n      return;\r\n\r\n    }\r\n\r\n    // Extract month (1-indexed) and year from the selected Date object\r\n\r\n    const month = selectedDate.getMonth() + 1; // getMonth() is 0-indexed, so add 1\r\n\r\n    const year = selectedDate.getFullYear();\r\n\r\n    setShowGetDataPopup(false); // Close the popup\r\n\r\n    // Navigate to the account level page, passing month and year as state\r\n\r\n    navigate('/accounts', { state: { month: month, year: year } });\r\n\r\n  };\r\n\r\n  // Breadcrumb path configuration\r\n\r\n  const breadcrumbPath = [\r\n\r\n    { name: 'PMO Dashboard', page: '' },\r\n\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' }\r\n\r\n  ];\r\n\r\n  // Calculate maxDate for the DatePicker\r\n\r\n  // This will be the last day of the previous month\r\n\r\n  const today = new Date();\r\n\r\n  const lastDayOfPreviousMonth = new Date(today.getFullYear(), today.getMonth(), 0); // Day 0 of current month is last day of previous month\r\n\r\n  // Determine if the \"Get Data\" button should be enabled (requires Team and Customer files uploaded)\r\n\r\n  const isGetDataButtonEnabled = teamUploaded && customerUploaded;\r\n\r\n  return (\r\n\r\n    <div\r\n\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n\r\n      style={{\r\n\r\n        background: 'linear-gradient(to bottom right, #e0f2fe, #f8fafc)'\r\n\r\n      }}\r\n\r\n    >\r\n\r\n      <div className=\"card shadow p-4 p-md-5 w-100\" style={{ maxWidth: '960px', backgroundColor: '#ffffffee' }}>\r\n\r\n        <Breadcrumbs path={breadcrumbPath} /> {/* Display breadcrumbs */}\r\n\r\n        <h2 className=\"text-center fw-bold text-dark mb-3\">Revenue Forecast â€“ Early View</h2>\r\n\r\n        {/* Tab Navigation */}\r\n\r\n        <ul className=\"nav nav-pills nav-fill mb-5\" role=\"tablist\">\r\n\r\n          {uploadData.tabs.map((tab, i) => (\r\n\r\n            <li className=\"nav-item\" key={i}>\r\n\r\n              <button\r\n\r\n                type=\"button\"\r\n\r\n                className={`nav-link rounded-pill px-4 py-2 ${tab === 'Early View' ? 'active' : 'text-muted'}`}\r\n\r\n                style={{ fontWeight: 500 }}\r\n\r\n              >\r\n\r\n                {tab}\r\n\r\n              </button>\r\n\r\n            </li>\r\n\r\n          ))}\r\n\r\n        </ul>\r\n\r\n        <h4 className=\"fw-semibold text-dark mb-4\">Upload Required Files</h4>\r\n\r\n        {/* Upload Cards Section */}\r\n\r\n        <div className=\"row g-4 mb-4\">\r\n\r\n          {uploadData.cards.map((card) => {\r\n\r\n            let currentFileState, currentFileNameState, currentUploadedState, currentLoadingState;\r\n\r\n            let isDisabled = false; // Default to not disabled\r\n\r\n            // Dynamically assign correct state and handlers based on card type\r\n\r\n            if (card.type === 'team') {\r\n\r\n              currentFileState = teamFile;\r\n\r\n              currentFileNameState = teamFileName;\r\n\r\n              currentUploadedState = teamUploaded;\r\n\r\n              currentLoadingState = teamLoading;\r\n\r\n            } else if (card.type === 'customer') {\r\n\r\n              currentFileState = customerFile;\r\n\r\n              currentFileNameState = customerFileName;\r\n\r\n              currentUploadedState = customerUploaded;\r\n\r\n              currentLoadingState = customerLoading;\r\n\r\n            } else if (card.type === 'associateMapping') {\r\n\r\n              currentFileState = associateMappingFile;\r\n\r\n              currentFileNameState = associateMappingFileName;\r\n\r\n              currentUploadedState = associateMappingUploaded;\r\n\r\n              currentLoadingState = associateMappingLoading;\r\n\r\n              // Disable associate mapping until team and customer are uploaded\r\n\r\n              isDisabled = !teamUploaded || !customerUploaded; // <--- This line disables the card\r\n\r\n            }\r\n\r\n            return (\r\n\r\n              <UploadCard\r\n\r\n                key={card.type}\r\n\r\n                title={card.title}\r\n\r\n                description={card.description}\r\n\r\n                icon={card.icon}\r\n\r\n                onFileSelect={(e) => handleFileSelect(card.type, e.target.files[0])}\r\n\r\n                onProcessUpload={() => handleProcessUpload(card.type)}\r\n\r\n                onRemove={() => handleRemoveFile(card.type)}\r\n\r\n                isSelected={!!currentFileState} // True if a file object exists\r\n\r\n                uploaded={currentUploadedState} // Reflects if upload was successful\r\n\r\n                fileName={currentFileNameState}\r\n\r\n                disabled={isDisabled} // Pass the calculated disabled state to UploadCard\r\n\r\n              >\r\n\r\n                {/* Render loading spinner as children when currentLoading is true */}\r\n\r\n                {currentLoadingState && <LoadingSpinner />}\r\n\r\n              </UploadCard>\r\n\r\n            );\r\n\r\n          })}\r\n\r\n        </div>\r\n\r\n        {/* \"Get Data\" Button - Appears only after both Team and Customer files are uploaded */}\r\n\r\n        {isGetDataButtonEnabled && ( // <--- This condition ensures the button only appears when both are uploaded\r\n\r\n          <div className=\"text-center mt-5\">\r\n\r\n            <button\r\n\r\n              className=\"btn btn-primary px-5 py-2\"\r\n\r\n              onClick={() => {\r\n\r\n                setSelectedDate(null); // Set to null to make DatePicker empty initially\r\n\r\n                setShowGetDataPopup(true); // Open Month/Year popup\r\n\r\n              }}\r\n\r\n            >\r\n\r\n              Get Data\r\n\r\n            </button>\r\n\r\n          </div>\r\n\r\n        )}\r\n\r\n      </div>\r\n\r\n      {/* Month/Year Selection Popup */}\r\n\r\n      {showGetDataPopup && (\r\n\r\n        <div\r\n\r\n          className=\"position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow\"\r\n\r\n          style={{ zIndex: 999, minWidth: '360px' }}\r\n\r\n        >\r\n\r\n          <h5 className=\"fw-bold mb-3 text-center\">Select Month and Year</h5>\r\n\r\n          <div className=\"mb-3 text-center\">\r\n\r\n            <DatePicker\r\n\r\n              selected={selectedDate}\r\n\r\n              onChange={(date) => setSelectedDate(date)}\r\n\r\n              dateFormat=\"MM/yyyy\"\r\n\r\n              showMonthYearPicker\r\n\r\n              showFullMonthYearPicker // Ensures only month/year are selectable\r\n\r\n              maxDate={lastDayOfPreviousMonth} // <--- Restricts to past months\r\n\r\n              className=\"form-control text-center\" // Apply Bootstrap styling\r\n\r\n              placeholderText=\"Select Month & Year\"\r\n\r\n            />\r\n\r\n          </div>\r\n\r\n          <button\r\n\r\n            className=\"btn btn-primary w-100 mb-2\"\r\n\r\n            onClick={handleStartReconciliation}\r\n\r\n            disabled={!selectedDate} // Disable button if no date is selected\r\n\r\n          >\r\n\r\n            Start Reconciliation\r\n\r\n          </button>\r\n\r\n          <button className=\"btn btn-outline-secondary w-100\" onClick={() => setShowGetDataPopup(false)}>\r\n\r\n            Cancel\r\n\r\n          </button>\r\n\r\n        </div>\r\n\r\n      )}\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n};\r\n\r\nexport default UploadFiles;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,OAAOC,UAAU,MAAM,cAAc;AAErC,OAAOC,WAAW,MAAM,gBAAgB;AAExC,OAAOC,UAAU,MAAM,4BAA4B;AAEnD,OAAOC,UAAU,MAAM,kBAAkB;;AAEzC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}