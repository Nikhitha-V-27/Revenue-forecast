{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\Frontend\\\\Revenue-forecast\\\\src\\\\components\\\\Details\\\\ProjectLevel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport $ from 'jquery';\nimport 'datatables.net';\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\nimport Breadcrumbs from '../Breadcrumbs';\nimport commonData from '../../data/commonData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    accountId: urlAccountId\n  } = useParams();\n  const location = useLocation();\n  const tableRef = useRef(null);\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\n  const [activeSbu, setActiveSbu] = useState(null);\n  const [activeProjectType, setActiveProjectType] = useState(null);\n\n  // New state to manage column filters\n  const [columnFilters, setColumnFilters] = useState({});\n\n  // State to hold the filtered projects that will be displayed in the table\n  const [filteredProjects, setFilteredProjects] = useState([]);\n\n  // Backend URL for API calls\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Currency formatting function\n  const formatCurrency = (value = 0) => value.toLocaleString(commonData.currencySettings.locale, {\n    style: 'currency',\n    currency: commonData.currencySettings.currency,\n    minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\n    maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\n  });\n\n  // Utility to get month name (for file naming)\n  const getMonthName = monthNumber => {\n    if (!monthNumber) return '';\n    const date = new Date();\n    date.setMonth(monthNumber - 1);\n    return date.toLocaleString('en-US', {\n      month: 'long'\n    });\n  };\n\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data and triggers a download.\r\n   */\n  const handleDownloadData = () => {\n    if (projects.length === 0) {\n      console.log('No data to download.');\n      return;\n    }\n\n    // Define CSV headers matching the table columns\n    const headers = [\"Project ID\", \"Project Name\", \"Total Associates\", \"Company Hours\", \"Client Hours\", \"Variance Hours\", \"Revenue\"];\n\n    // Map projects data to CSV rows, using the currently filtered projects\n    const csvRows = filteredProjects.map(project => {\n      return [`\"${project.projectId}\"`, `\"${project.projectName}\"`, project.totalAssociatesCount, project.totalCompanyHours, project.totalClientHours, project.varianceHours, `\"${formatCurrency(project.revenue)}\"`].join(',');\n    });\n    const csvContent = [headers.join(','), ...csvRows].join('\\n');\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    const monthName = getMonthName(activeMonth);\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`;\n    link.setAttribute('href', url);\n    link.setAttribute('download', fileName);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  /**\r\n   * Generates a unique list of options for a given column key.\r\n   * @param {string} columnKey The key of the column to get unique values for.\r\n   * @returns {string[]} An array of unique values, including an 'All' option.\r\n   */\n  const getUniqueOptions = columnKey => {\n    // Only use the raw projects data to get the full list of options\n    const options = projects.map(project => project[columnKey]);\n    const uniqueOptions = [...new Set(options)].sort();\n    return ['All', ...uniqueOptions];\n  };\n\n  /**\r\n   * Handles changes to a column's filter dropdown.\r\n   * Updates the `columnFilters` state with the new value.\r\n   * @param {string} columnKey The key of the column being filtered.\r\n   * @param {string} value The selected filter value.\r\n   */\n  const handleFilterChange = (columnKey, value) => {\n    setColumnFilters(prevFilters => ({\n      ...prevFilters,\n      [columnKey]: value === 'All' ? null : value\n    }));\n  };\n\n  /**\r\n   * Filters the projects array based on the current columnFilters state.\r\n   * @param {Array} projectsArray The array of projects to filter.\r\n   * @param {Object} filters The object containing column filters.\r\n   * @returns {Array} The filtered array of projects.\r\n   */\n  const applyFilters = (projectsArray, filters) => {\n    return projectsArray.filter(project => {\n      return Object.keys(filters).every(columnKey => {\n        const filterValue = filters[columnKey];\n        if (filterValue === null || filterValue === undefined) {\n          return true;\n        }\n        const projectValue = project[columnKey];\n        if (projectValue === null || projectValue === undefined) {\n          return false;\n        }\n        if (typeof projectValue === 'number') {\n          const numericFilterValue = Number(filterValue);\n          if (Number.isNaN(numericFilterValue)) return false;\n          return projectValue === numericFilterValue;\n        }\n        return String(projectValue).toLowerCase() === String(filterValue).toLowerCase();\n      });\n    });\n  };\n\n  // Load Poppins font from Google Fonts\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Fetch project data when context (month, year, accountId, projectType) changes\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5;\n    const fetchProjectData = async (month, year, accId, projectType) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const payload = {\n          month,\n          year,\n          accId,\n          projectType\n        };\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(payload)\n        });\n        if (!resp.ok) {\n          const errText = await resp.text();\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\n        }\n        const data = await resp.json();\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\n        setProjects(list);\n        if (list.length > 0 && list[0].accountName) {\n          setActiveAccountName(list[0].accountName);\n        } else {\n          const storedName = sessionStorage.getItem('lastFetchedProjectAccountName');\n          setActiveAccountName(storedName || accId);\n        }\n      } catch (e) {\n        console.error('Error fetching project data:', e);\n        setError(`Failed to load project data: ${e.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    let monthToUse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let yearToUse = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    let accountIdToUse = urlAccountId;\n    let accountNameToUse = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.accountName;\n    let sbuToUse = (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.sbu;\n    let projectTypeToUse = (_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.projectType;\n    if (!monthToUse) monthToUse = sessionStorage.getItem('lastFetchedProjectMonth');\n    if (!yearToUse) yearToUse = sessionStorage.getItem('lastFetchedProjectYear');\n    if (!accountNameToUse) accountNameToUse = sessionStorage.getItem('lastFetchedProjectAccountName');\n    if (!sbuToUse) sbuToUse = sessionStorage.getItem('lastFetchedProjectSbu');\n    if (!projectTypeToUse) projectTypeToUse = sessionStorage.getItem('lastFetchedProjectType');\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\n    if (monthToUse && yearToUse && accountIdToUse) {\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accountIdToUse !== activeAccountId || sbuToUse !== activeSbu || projectTypeToUse !== activeProjectType) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        setActiveAccountId(accountIdToUse);\n        if (accountNameToUse) {\n          setActiveAccountName(accountNameToUse);\n        }\n        setActiveSbu(sbuToUse);\n        setActiveProjectType(projectTypeToUse);\n        sessionStorage.setItem('lastFetchedProjectMonth', monthToUse.toString());\n        sessionStorage.setItem('lastFetchedProjectYear', yearToUse.toString());\n        sessionStorage.setItem('lastFetchedProjectAccountId', accountIdToUse);\n        if (accountNameToUse) {\n          sessionStorage.setItem('lastFetchedProjectAccountName', accountNameToUse);\n        }\n        if (sbuToUse) {\n          sessionStorage.setItem('lastFetchedProjectSbu', sbuToUse);\n        }\n        if (projectTypeToUse) {\n          sessionStorage.setItem('lastFetchedProjectType', projectTypeToUse);\n        }\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse);\n      } else {\n        setLoading(false);\n      }\n    } else {\n      setError('Missing month, year, or Account ID. Please navigate here with all parameters.');\n      setLoading(false);\n    }\n  }, [location.state, urlAccountId, activeMonth, activeYear, activeAccountId, activeSbu, activeProjectType]);\n\n  // Update filteredProjects whenever projects or columnFilters change\n  useEffect(() => {\n    setFilteredProjects(applyFilters(projects, columnFilters));\n  }, [projects, columnFilters]);\n\n  // Initialize and destroy DataTable when filteredProjects data changes\n  useEffect(() => {\n    if (!loading && filteredProjects.length > 0 && tableRef.current) {\n      const $tbl = $(tableRef.current);\n      if ($.fn.DataTable.isDataTable($tbl)) {\n        $tbl.DataTable().destroy();\n      }\n      $tbl.DataTable({\n        paging: true,\n        searching: true,\n        ordering: false,\n        info: true,\n        autoWidth: false\n      });\n    }\n    return () => {\n      if (tableRef.current) {\n        const $tbl = $(tableRef.current);\n        if ($.fn.DataTable.isDataTable($tbl)) {\n          $tbl.DataTable().destroy();\n        }\n      }\n    };\n  }, [loading, filteredProjects]);\n\n  // Define breadcrumb path for navigation\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  }, ...(activeSbu ? [{\n    name: `${activeSbu} SBU Level`,\n    page: 'sbu',\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }] : []), {\n    name: 'Account Level',\n    page: `accounts`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }, ...(activeProjectType ? [{\n    name: `${activeProjectType} Project Type`,\n    page: `accounts/${activeAccountId}/project-types`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu,\n      accId: activeAccountId\n    }\n  }] : []), {\n    name: `Projects (${activeAccountName})`,\n    page: `accounts/${activeAccountId}/projects`\n  }].filter(Boolean);\n\n  // Render loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Project Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate('/accounts', {\n          state: {\n            month: activeMonth,\n            year: activeYear,\n            sbu: activeSbu\n          }\n        }),\n        children: \"Go to Account Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Main component render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '1200px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-0 fw-semibold text-dark\",\n          children: [\"\\uD83D\\uDCC1 Project Level Overview\", ' ', activeAccountId ? `for ${activeAccountName}` : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), projects.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-success rounded-pill px-3\",\n          onClick: handleDownloadData,\n          title: \"Download Project Data\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-download me-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 15\n          }, this), \" Download Data\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          ref: tableRef,\n          className: \"display table table-hover align-middle table-borderless mb-0\",\n          style: {\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #3b82f6, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Project ID\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('projectId', e.target.value),\n                  value: columnFilters.projectId || 'All',\n                  children: getUniqueOptions('projectId').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 391,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Project Name\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('projectName', e.target.value),\n                  value: columnFilters.projectName || 'All',\n                  children: getUniqueOptions('projectName').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 403,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Total Associates\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('totalAssociatesCount', e.target.value),\n                  value: columnFilters.totalAssociatesCount || 'All',\n                  children: getUniqueOptions('totalAssociatesCount').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 415,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Company Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('totalCompanyHours', e.target.value),\n                  value: columnFilters.totalCompanyHours || 'All',\n                  children: getUniqueOptions('totalCompanyHours').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 426,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 420,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Client Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('totalClientHours', e.target.value),\n                  value: columnFilters.totalClientHours || 'All',\n                  children: getUniqueOptions('totalClientHours').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 437,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 430,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Variance Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('varianceHours', e.target.value),\n                  value: columnFilters.varianceHours || 'All',\n                  children: getUniqueOptions('varianceHours').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 448,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Revenue\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange('revenue', e.target.value),\n                  value: columnFilters.revenue || 'All',\n                  children: getUniqueOptions('revenue').map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 459,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 453,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-center\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: filteredProjects.map(project => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.projectId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.projectName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalAssociatesCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalCompanyHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalClientHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.varianceHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatCurrency(project.revenue)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-sm btn-outline-primary rounded-circle\",\n                  onClick: () => navigate(`/projects/${project.projectId}/associates`, {\n                    state: {\n                      projectId: project.projectId,\n                      projectName: project.projectName,\n                      accountId: project.accountId,\n                      accountName: project.accountName,\n                      month: activeMonth,\n                      year: activeYear,\n                      sbu: activeSbu,\n                      projectType: activeProjectType\n                    }\n                  }),\n                  title: \"View Associates\",\n                  children: \"\\uD83D\\uDD0D\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 478,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 19\n              }, this)]\n            }, project.projectId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectLevel, \"3QMC7T9bqZdI4jb89M3RrsI98aY=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = ProjectLevel;\nexport default ProjectLevel;\nvar _c;\n$RefreshReg$(_c, \"ProjectLevel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","useParams","useLocation","$","Breadcrumbs","commonData","jsxDEV","_jsxDEV","ProjectLevel","_s","navigate","accountId","urlAccountId","location","tableRef","projects","setProjects","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","activeSbu","setActiveSbu","activeProjectType","setActiveProjectType","columnFilters","setColumnFilters","filteredProjects","setFilteredProjects","BACKEND_URL","formatCurrency","value","toLocaleString","currencySettings","locale","style","currency","minimumFractionDigits","maximumFractionDigits","getMonthName","monthNumber","date","Date","setMonth","month","handleDownloadData","length","console","log","headers","csvRows","map","project","projectId","projectName","totalAssociatesCount","totalCompanyHours","totalClientHours","varianceHours","revenue","join","csvContent","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","monthName","fileName","setAttribute","visibility","body","appendChild","click","removeChild","revokeObjectURL","getUniqueOptions","columnKey","options","uniqueOptions","Set","sort","handleFilterChange","prevFilters","applyFilters","projectsArray","filters","filter","Object","keys","every","filterValue","undefined","projectValue","numericFilterValue","Number","isNaN","String","toLowerCase","href","rel","head","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","fetchProjectData","year","accId","projectType","payload","resp","fetch","method","JSON","stringify","ok","errText","text","Error","status","statusText","data","json","list","Array","isArray","Boolean","accountName","storedName","sessionStorage","getItem","e","message","monthToUse","state","yearToUse","accountIdToUse","accountNameToUse","sbuToUse","sbu","projectTypeToUse","parseInt","setItem","toString","current","$tbl","fn","DataTable","isDataTable","destroy","paging","searching","ordering","info","autoWidth","breadcrumbPath","name","page","className","children","role","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","title","ref","width","onChange","target","option","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/Frontend/Revenue-forecast/src/components/Details/ProjectLevel.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport $ from 'jquery';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\nimport Breadcrumbs from '../Breadcrumbs';\r\nimport commonData from '../../data/commonData.json';\r\n\r\nconst ProjectLevel = () => {\r\n  const navigate = useNavigate();\r\n  const { accountId: urlAccountId } = useParams();\r\n  const location = useLocation();\r\n  const tableRef = useRef(null);\r\n\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n  const [activeAccountId, setActiveAccountId] = useState(null);\r\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n  const [activeSbu, setActiveSbu] = useState(null);\r\n  const [activeProjectType, setActiveProjectType] = useState(null);\r\n\r\n  // New state to manage column filters\r\n  const [columnFilters, setColumnFilters] = useState({});\r\n\r\n  // State to hold the filtered projects that will be displayed in the table\r\n  const [filteredProjects, setFilteredProjects] = useState([]);\r\n\r\n  // Backend URL for API calls\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Currency formatting function\r\n  const formatCurrency = (value = 0) =>\r\n    value.toLocaleString(commonData.currencySettings.locale, {\r\n      style: 'currency',\r\n      currency: commonData.currencySettings.currency,\r\n      minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\r\n      maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\r\n    });\r\n\r\n  // Utility to get month name (for file naming)\r\n  const getMonthName = (monthNumber) => {\r\n    if (!monthNumber) return '';\r\n    const date = new Date();\r\n    date.setMonth(monthNumber - 1);\r\n    return date.toLocaleString('en-US', { month: 'long' });\r\n  };\r\n\r\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data and triggers a download.\r\n   */\r\n  const handleDownloadData = () => {\r\n    if (projects.length === 0) {\r\n      console.log('No data to download.');\r\n      return;\r\n    }\r\n\r\n    // Define CSV headers matching the table columns\r\n    const headers = [\r\n      \"Project ID\", \"Project Name\", \"Total Associates\", \"Company Hours\",\r\n      \"Client Hours\", \"Variance Hours\", \"Revenue\"\r\n    ];\r\n\r\n    // Map projects data to CSV rows, using the currently filtered projects\r\n    const csvRows = filteredProjects.map(project => {\r\n      return [\r\n        `\"${project.projectId}\"`,\r\n        `\"${project.projectName}\"`,\r\n        project.totalAssociatesCount,\r\n        project.totalCompanyHours,\r\n        project.totalClientHours,\r\n        project.varianceHours,\r\n        `\"${formatCurrency(project.revenue)}\"`\r\n      ].join(',');\r\n    });\r\n\r\n    const csvContent = [\r\n      headers.join(','),\r\n      ...csvRows\r\n    ].join('\\n');\r\n\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n    const monthName = getMonthName(activeMonth);\r\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`;\r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', fileName);\r\n    link.style.visibility = 'hidden';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n  \r\n  /**\r\n   * Generates a unique list of options for a given column key.\r\n   * @param {string} columnKey The key of the column to get unique values for.\r\n   * @returns {string[]} An array of unique values, including an 'All' option.\r\n   */\r\n  const getUniqueOptions = (columnKey) => {\r\n    // Only use the raw projects data to get the full list of options\r\n    const options = projects.map(project => project[columnKey]);\r\n    const uniqueOptions = [...new Set(options)].sort();\r\n    return ['All', ...uniqueOptions];\r\n  };\r\n\r\n  /**\r\n   * Handles changes to a column's filter dropdown.\r\n   * Updates the `columnFilters` state with the new value.\r\n   * @param {string} columnKey The key of the column being filtered.\r\n   * @param {string} value The selected filter value.\r\n   */\r\n  const handleFilterChange = (columnKey, value) => {\r\n    setColumnFilters(prevFilters => ({\r\n      ...prevFilters,\r\n      [columnKey]: value === 'All' ? null : value\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * Filters the projects array based on the current columnFilters state.\r\n   * @param {Array} projectsArray The array of projects to filter.\r\n   * @param {Object} filters The object containing column filters.\r\n   * @returns {Array} The filtered array of projects.\r\n   */\r\n  const applyFilters = (projectsArray, filters) => {\r\n    return projectsArray.filter(project => {\r\n      return Object.keys(filters).every(columnKey => {\r\n        const filterValue = filters[columnKey];\r\n        if (filterValue === null || filterValue === undefined) {\r\n          return true;\r\n        }\r\n\r\n        const projectValue = project[columnKey];\r\n        if (projectValue === null || projectValue === undefined) {\r\n          return false;\r\n        }\r\n\r\n        if (typeof projectValue === 'number') {\r\n          const numericFilterValue = Number(filterValue);\r\n          if (Number.isNaN(numericFilterValue)) return false;\r\n          return projectValue === numericFilterValue;\r\n        }\r\n\r\n        return String(projectValue).toLowerCase() === String(filterValue).toLowerCase();\r\n      });\r\n    });\r\n  };\r\n\r\n  // Load Poppins font from Google Fonts\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Fetch project data when context (month, year, accountId, projectType) changes\r\n  useEffect(() => {\r\n    const fetchProjectData = async (month, year, accId, projectType) => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const payload = { month, year, accId, projectType };\r\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(payload)\r\n        });\r\n\r\n        if (!resp.ok) {\r\n          const errText = await resp.text();\r\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\r\n        }\r\n\r\n        const data = await resp.json();\r\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\r\n        setProjects(list);\r\n\r\n        if (list.length > 0 && list[0].accountName) {\r\n          setActiveAccountName(list[0].accountName);\r\n        } else {\r\n          const storedName = sessionStorage.getItem('lastFetchedProjectAccountName');\r\n          setActiveAccountName(storedName || accId);\r\n        }\r\n      } catch (e) {\r\n        console.error('Error fetching project data:', e);\r\n        setError(`Failed to load project data: ${e.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    let monthToUse = location.state?.month;\r\n    let yearToUse = location.state?.year;\r\n    let accountIdToUse = urlAccountId;\r\n    let accountNameToUse = location.state?.accountName;\r\n    let sbuToUse = location.state?.sbu;\r\n    let projectTypeToUse = location.state?.projectType;\r\n\r\n    if (!monthToUse) monthToUse = sessionStorage.getItem('lastFetchedProjectMonth');\r\n    if (!yearToUse) yearToUse = sessionStorage.getItem('lastFetchedProjectYear');\r\n    if (!accountNameToUse) accountNameToUse = sessionStorage.getItem('lastFetchedProjectAccountName');\r\n    if (!sbuToUse) sbuToUse = sessionStorage.getItem('lastFetchedProjectSbu');\r\n    if (!projectTypeToUse) projectTypeToUse = sessionStorage.getItem('lastFetchedProjectType');\r\n\r\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\r\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\r\n\r\n    if (monthToUse && yearToUse && accountIdToUse) {\r\n      if (\r\n        monthToUse !== activeMonth ||\r\n        yearToUse !== activeYear ||\r\n        accountIdToUse !== activeAccountId ||\r\n        sbuToUse !== activeSbu ||\r\n        projectTypeToUse !== activeProjectType\r\n      ) {\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        setActiveAccountId(accountIdToUse);\r\n        if (accountNameToUse) {\r\n          setActiveAccountName(accountNameToUse);\r\n        }\r\n        setActiveSbu(sbuToUse);\r\n        setActiveProjectType(projectTypeToUse);\r\n\r\n        sessionStorage.setItem('lastFetchedProjectMonth', monthToUse.toString());\r\n        sessionStorage.setItem('lastFetchedProjectYear', yearToUse.toString());\r\n        sessionStorage.setItem('lastFetchedProjectAccountId', accountIdToUse);\r\n        if (accountNameToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectAccountName', accountNameToUse);\r\n        }\r\n        if (sbuToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectSbu', sbuToUse);\r\n        }\r\n        if (projectTypeToUse) {\r\n          sessionStorage.setItem('lastFetchedProjectType', projectTypeToUse);\r\n        }\r\n\r\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setError('Missing month, year, or Account ID. Please navigate here with all parameters.');\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    location.state,\r\n    urlAccountId,\r\n    activeMonth,\r\n    activeYear,\r\n    activeAccountId,\r\n    activeSbu,\r\n    activeProjectType\r\n  ]);\r\n\r\n  // Update filteredProjects whenever projects or columnFilters change\r\n  useEffect(() => {\r\n    setFilteredProjects(applyFilters(projects, columnFilters));\r\n  }, [projects, columnFilters]);\r\n\r\n  // Initialize and destroy DataTable when filteredProjects data changes\r\n  useEffect(() => {\r\n    if (!loading && filteredProjects.length > 0 && tableRef.current) {\r\n      const $tbl = $(tableRef.current);\r\n      if ($.fn.DataTable.isDataTable($tbl)) {\r\n        $tbl.DataTable().destroy();\r\n      }\r\n      $tbl.DataTable({\r\n        paging: true,\r\n        searching: true,\r\n        ordering: false,\r\n        info: true,\r\n        autoWidth: false\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (tableRef.current) {\r\n        const $tbl = $(tableRef.current);\r\n        if ($.fn.DataTable.isDataTable($tbl)) {\r\n          $tbl.DataTable().destroy();\r\n        }\r\n      }\r\n    };\r\n  }, [loading, filteredProjects]);\r\n\r\n  // Define breadcrumb path for navigation\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' },\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n    ...(activeSbu ? [{ name: `${activeSbu} SBU Level`, page: 'sbu', state: { month: activeMonth, year: activeYear, sbu: activeSbu } }] : []),\r\n    { name: 'Account Level', page: `accounts`, state: { month: activeMonth, year: activeYear, sbu: activeSbu } },\r\n    ...(activeProjectType ? [{ name: `${activeProjectType} Project Type`, page: `accounts/${activeAccountId}/project-types`, state: { month: activeMonth, year: activeYear, sbu: activeSbu, accId: activeAccountId } }] : []),\r\n    {\r\n      name: `Projects (${activeAccountName})`,\r\n      page: `accounts/${activeAccountId}/projects`\r\n    }\r\n  ].filter(Boolean);\r\n\r\n  // Render loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\" />\r\n        <p className=\"ms-3 text-primary\">Loading Project Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        <button\r\n          className=\"btn btn-primary mt-3\"\r\n          onClick={() => navigate('/accounts', { state: { month: activeMonth, year: activeYear, sbu: activeSbu } })}\r\n        >\r\n          Go to Account Level\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main component render\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{\r\n          maxWidth: '1200px',\r\n          backgroundColor: '#ffffffdd',\r\n          borderRadius: '1rem'\r\n        }}\r\n      >\r\n        {/* Breadcrumbs component */}\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n          <h2 className=\"mb-0 fw-semibold text-dark\">\r\n            📁 Project Level Overview{' '}\r\n            {activeAccountId ? `for ${activeAccountName}` : ''}\r\n          </h2>\r\n          {/* Download button, visible only if projects are loaded */}\r\n          {projects.length > 0 && (\r\n            <button\r\n              className=\"btn btn-outline-success rounded-pill px-3\"\r\n              onClick={handleDownloadData}\r\n              title=\"Download Project Data\"\r\n            >\r\n              <i className=\"bi bi-download me-2\"></i> Download Data\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Responsive table container */}\r\n        <div className=\"table-responsive rounded\">\r\n          <table\r\n            ref={tableRef}\r\n            className=\"display table table-hover align-middle table-borderless mb-0\"\r\n            style={{ width: '100%' }}\r\n          >\r\n            <thead\r\n              className=\"text-white\"\r\n              style={{ background: 'linear-gradient(to right, #3b82f6, #2563eb)' }}\r\n            >\r\n              <tr>\r\n                {/* Each header now includes a filter dropdown */}\r\n                <th>\r\n                  Project ID\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('projectId', e.target.value)}\r\n                    value={columnFilters.projectId || 'All'}\r\n                  >\r\n                    {getUniqueOptions('projectId').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Project Name\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('projectName', e.target.value)}\r\n                    value={columnFilters.projectName || 'All'}\r\n                  >\r\n                    {getUniqueOptions('projectName').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Total Associates\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('totalAssociatesCount', e.target.value)}\r\n                    value={columnFilters.totalAssociatesCount || 'All'}\r\n                  >\r\n                    {getUniqueOptions('totalAssociatesCount').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>Company Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('totalCompanyHours', e.target.value)}\r\n                    value={columnFilters.totalCompanyHours || 'All'}\r\n                  >\r\n                    {getUniqueOptions('totalCompanyHours').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>Client Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('totalClientHours', e.target.value)}\r\n                    value={columnFilters.totalClientHours || 'All'}\r\n                  >\r\n                    {getUniqueOptions('totalClientHours').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>Variance Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('varianceHours', e.target.value)}\r\n                    value={columnFilters.varianceHours || 'All'}\r\n                  >\r\n                    {getUniqueOptions('varianceHours').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>Revenue\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) => handleFilterChange('revenue', e.target.value)}\r\n                    value={columnFilters.revenue || 'All'}\r\n                  >\r\n                    {getUniqueOptions('revenue').map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th className=\"text-center\">View</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {/* Map through the filteredProjects data to render table rows */}\r\n              {filteredProjects.map(project => (\r\n                <tr key={project.projectId}>\r\n                  <td>{project.projectId}</td>\r\n                  <td>{project.projectName}</td>\r\n                  <td>{project.totalAssociatesCount}</td>\r\n                  <td>{project.totalCompanyHours}</td>\r\n                  <td>{project.totalClientHours}</td>\r\n                  <td>{project.varianceHours}</td>\r\n                  <td>{formatCurrency(project.revenue)}</td>\r\n                  <td className=\"text-center\">\r\n                    <button\r\n                      className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n                      onClick={() =>\r\n                        navigate(\r\n                          `/projects/${project.projectId}/associates`,\r\n                          {\r\n                            state: {\r\n                              projectId: project.projectId,\r\n                              projectName: project.projectName,\r\n                              accountId: project.accountId,\r\n                              accountName: project.accountName,\r\n                              month: activeMonth,\r\n                              year: activeYear,\r\n                              sbu: activeSbu,\r\n                              projectType: activeProjectType\r\n                            }\r\n                          }\r\n                        )\r\n                      }\r\n                      title=\"View Associates\"\r\n                    >\r\n                      🔍\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectLevel;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACtE,OAAOC,CAAC,MAAM,QAAQ;AACtB,OAAO,gBAAgB;AACvB,OAAO,qDAAqD;AAC5D,OAAOC,WAAW,MAAM,gBAAgB;AACxC,OAAOC,UAAU,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEW,SAAS,EAAEC;EAAa,CAAC,GAAGX,SAAS,CAAC,CAAC;EAC/C,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,QAAQ,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC0B,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAAC4B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG7B,QAAQ,CAAC,YAAY,CAAC;EACxE,MAAM,CAAC8B,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACgC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;;EAEhE;EACA,MAAM,CAACkC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAM,CAACoC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;;EAE5D;EACA,MAAMsC,WAAW,GAAG,uBAAuB;;EAE3C;EACA,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAG,CAAC,KAC/BA,KAAK,CAACC,cAAc,CAACnC,UAAU,CAACoC,gBAAgB,CAACC,MAAM,EAAE;IACvDC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAEvC,UAAU,CAACoC,gBAAgB,CAACG,QAAQ;IAC9CC,qBAAqB,EAAExC,UAAU,CAACoC,gBAAgB,CAACI,qBAAqB;IACxEC,qBAAqB,EAAEzC,UAAU,CAACoC,gBAAgB,CAACK;EACrD,CAAC,CAAC;;EAEJ;EACA,MAAMC,YAAY,GAAIC,WAAW,IAAK;IACpC,IAAI,CAACA,WAAW,EAAE,OAAO,EAAE;IAC3B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;IACvBD,IAAI,CAACE,QAAQ,CAACH,WAAW,GAAG,CAAC,CAAC;IAC9B,OAAOC,IAAI,CAACT,cAAc,CAAC,OAAO,EAAE;MAAEY,KAAK,EAAE;IAAO,CAAC,CAAC;EACxD,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAItC,QAAQ,CAACuC,MAAM,KAAK,CAAC,EAAE;MACzBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnC;IACF;;IAEA;IACA,MAAMC,OAAO,GAAG,CACd,YAAY,EAAE,cAAc,EAAE,kBAAkB,EAAE,eAAe,EACjE,cAAc,EAAE,gBAAgB,EAAE,SAAS,CAC5C;;IAED;IACA,MAAMC,OAAO,GAAGvB,gBAAgB,CAACwB,GAAG,CAACC,OAAO,IAAI;MAC9C,OAAO,CACL,IAAIA,OAAO,CAACC,SAAS,GAAG,EACxB,IAAID,OAAO,CAACE,WAAW,GAAG,EAC1BF,OAAO,CAACG,oBAAoB,EAC5BH,OAAO,CAACI,iBAAiB,EACzBJ,OAAO,CAACK,gBAAgB,EACxBL,OAAO,CAACM,aAAa,EACrB,IAAI5B,cAAc,CAACsB,OAAO,CAACO,OAAO,CAAC,GAAG,CACvC,CAACC,IAAI,CAAC,GAAG,CAAC;IACb,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAG,CACjBZ,OAAO,CAACW,IAAI,CAAC,GAAG,CAAC,EACjB,GAAGV,OAAO,CACX,CAACU,IAAI,CAAC,IAAI,CAAC;IAEZ,MAAME,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,UAAU,CAAC,EAAE;MAAEG,IAAI,EAAE;IAA0B,CAAC,CAAC;IACxE,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxC,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACR,IAAI,CAAC;IACrC,MAAMS,SAAS,GAAGhC,YAAY,CAAC1B,WAAW,CAAC;IAC3C,MAAM2D,QAAQ,GAAG,oBAAoBvD,eAAe,IAAIsD,SAAS,IAAIxD,UAAU,MAAM;IACrFkD,IAAI,CAACQ,YAAY,CAAC,MAAM,EAAEL,GAAG,CAAC;IAC9BH,IAAI,CAACQ,YAAY,CAAC,UAAU,EAAED,QAAQ,CAAC;IACvCP,IAAI,CAAC9B,KAAK,CAACuC,UAAU,GAAG,QAAQ;IAChCR,QAAQ,CAACS,IAAI,CAACC,WAAW,CAACX,IAAI,CAAC;IAC/BA,IAAI,CAACY,KAAK,CAAC,CAAC;IACZX,QAAQ,CAACS,IAAI,CAACG,WAAW,CAACb,IAAI,CAAC;IAC/BI,GAAG,CAACU,eAAe,CAACX,GAAG,CAAC;EAC1B,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAMY,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA,MAAMC,OAAO,GAAG3E,QAAQ,CAAC4C,GAAG,CAACC,OAAO,IAAIA,OAAO,CAAC6B,SAAS,CAAC,CAAC;IAC3D,MAAME,aAAa,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACF,OAAO,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC;IAClD,OAAO,CAAC,KAAK,EAAE,GAAGF,aAAa,CAAC;EAClC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,MAAMG,kBAAkB,GAAGA,CAACL,SAAS,EAAElD,KAAK,KAAK;IAC/CL,gBAAgB,CAAC6D,WAAW,KAAK;MAC/B,GAAGA,WAAW;MACd,CAACN,SAAS,GAAGlD,KAAK,KAAK,KAAK,GAAG,IAAI,GAAGA;IACxC,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,MAAMyD,YAAY,GAAGA,CAACC,aAAa,EAAEC,OAAO,KAAK;IAC/C,OAAOD,aAAa,CAACE,MAAM,CAACvC,OAAO,IAAI;MACrC,OAAOwC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,KAAK,CAACb,SAAS,IAAI;QAC7C,MAAMc,WAAW,GAAGL,OAAO,CAACT,SAAS,CAAC;QACtC,IAAIc,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAKC,SAAS,EAAE;UACrD,OAAO,IAAI;QACb;QAEA,MAAMC,YAAY,GAAG7C,OAAO,CAAC6B,SAAS,CAAC;QACvC,IAAIgB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAKD,SAAS,EAAE;UACvD,OAAO,KAAK;QACd;QAEA,IAAI,OAAOC,YAAY,KAAK,QAAQ,EAAE;UACpC,MAAMC,kBAAkB,GAAGC,MAAM,CAACJ,WAAW,CAAC;UAC9C,IAAII,MAAM,CAACC,KAAK,CAACF,kBAAkB,CAAC,EAAE,OAAO,KAAK;UAClD,OAAOD,YAAY,KAAKC,kBAAkB;QAC5C;QAEA,OAAOG,MAAM,CAACJ,YAAY,CAAC,CAACK,WAAW,CAAC,CAAC,KAAKD,MAAM,CAACN,WAAW,CAAC,CAACO,WAAW,CAAC,CAAC;MACjF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;;EAED;EACAhH,SAAS,CAAC,MAAM;IACd,MAAM2E,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IAC3CF,IAAI,CAACsC,IAAI,GAAG,gFAAgF;IAC5FtC,IAAI,CAACuC,GAAG,GAAG,YAAY;IACvBtC,QAAQ,CAACuC,IAAI,CAAC7B,WAAW,CAACX,IAAI,CAAC;IAC/BC,QAAQ,CAACS,IAAI,CAACxC,KAAK,CAACuE,UAAU,GAAG,uBAAuB;EAC1D,CAAC,EAAE,EAAE,CAAC;;EAEN;EACApH,SAAS,CAAC,MAAM;IAAA,IAAAqH,eAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,gBAAA;IACd,MAAMC,gBAAgB,GAAG,MAAAA,CAAOpE,KAAK,EAAEqE,IAAI,EAAEC,KAAK,EAAEC,WAAW,KAAK;MAClEzG,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,MAAMwG,OAAO,GAAG;UAAExE,KAAK;UAAEqE,IAAI;UAAEC,KAAK;UAAEC;QAAY,CAAC;QACnD,MAAME,IAAI,GAAG,MAAMC,KAAK,CAAC,GAAGzF,WAAW,cAAc,EAAE;UACrD0F,MAAM,EAAE,MAAM;UACdtE,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/C0B,IAAI,EAAE6C,IAAI,CAACC,SAAS,CAACL,OAAO;QAC9B,CAAC,CAAC;QAEF,IAAI,CAACC,IAAI,CAACK,EAAE,EAAE;UACZ,MAAMC,OAAO,GAAG,MAAMN,IAAI,CAACO,IAAI,CAAC,CAAC;UACjC,MAAM,IAAIC,KAAK,CAAC,WAAWR,IAAI,CAACS,MAAM,cAAcH,OAAO,IAAIN,IAAI,CAACU,UAAU,EAAE,CAAC;QACnF;QAEA,MAAMC,IAAI,GAAG,MAAMX,IAAI,CAACY,IAAI,CAAC,CAAC;QAC9B,MAAMC,IAAI,GAAGC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC,CAACrC,MAAM,CAAC0C,OAAO,CAAC;QAChE7H,WAAW,CAAC0H,IAAI,CAAC;QAEjB,IAAIA,IAAI,CAACpF,MAAM,GAAG,CAAC,IAAIoF,IAAI,CAAC,CAAC,CAAC,CAACI,WAAW,EAAE;UAC1ClH,oBAAoB,CAAC8G,IAAI,CAAC,CAAC,CAAC,CAACI,WAAW,CAAC;QAC3C,CAAC,MAAM;UACL,MAAMC,UAAU,GAAGC,cAAc,CAACC,OAAO,CAAC,+BAA+B,CAAC;UAC1ErH,oBAAoB,CAACmH,UAAU,IAAIrB,KAAK,CAAC;QAC3C;MACF,CAAC,CAAC,OAAOwB,CAAC,EAAE;QACV3F,OAAO,CAACpC,KAAK,CAAC,8BAA8B,EAAE+H,CAAC,CAAC;QAChD9H,QAAQ,CAAC,gCAAgC8H,CAAC,CAACC,OAAO,EAAE,CAAC;MACvD,CAAC,SAAS;QACRjI,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED,IAAIkI,UAAU,IAAAjC,eAAA,GAAGtG,QAAQ,CAACwI,KAAK,cAAAlC,eAAA,uBAAdA,eAAA,CAAgB/D,KAAK;IACtC,IAAIkG,SAAS,IAAAlC,gBAAA,GAAGvG,QAAQ,CAACwI,KAAK,cAAAjC,gBAAA,uBAAdA,gBAAA,CAAgBK,IAAI;IACpC,IAAI8B,cAAc,GAAG3I,YAAY;IACjC,IAAI4I,gBAAgB,IAAAnC,gBAAA,GAAGxG,QAAQ,CAACwI,KAAK,cAAAhC,gBAAA,uBAAdA,gBAAA,CAAgByB,WAAW;IAClD,IAAIW,QAAQ,IAAAnC,gBAAA,GAAGzG,QAAQ,CAACwI,KAAK,cAAA/B,gBAAA,uBAAdA,gBAAA,CAAgBoC,GAAG;IAClC,IAAIC,gBAAgB,IAAApC,gBAAA,GAAG1G,QAAQ,CAACwI,KAAK,cAAA9B,gBAAA,uBAAdA,gBAAA,CAAgBI,WAAW;IAElD,IAAI,CAACyB,UAAU,EAAEA,UAAU,GAAGJ,cAAc,CAACC,OAAO,CAAC,yBAAyB,CAAC;IAC/E,IAAI,CAACK,SAAS,EAAEA,SAAS,GAAGN,cAAc,CAACC,OAAO,CAAC,wBAAwB,CAAC;IAC5E,IAAI,CAACO,gBAAgB,EAAEA,gBAAgB,GAAGR,cAAc,CAACC,OAAO,CAAC,+BAA+B,CAAC;IACjG,IAAI,CAACQ,QAAQ,EAAEA,QAAQ,GAAGT,cAAc,CAACC,OAAO,CAAC,uBAAuB,CAAC;IACzE,IAAI,CAACU,gBAAgB,EAAEA,gBAAgB,GAAGX,cAAc,CAACC,OAAO,CAAC,wBAAwB,CAAC;IAE1FG,UAAU,GAAGA,UAAU,GAAGQ,QAAQ,CAACR,UAAU,EAAE,EAAE,CAAC,GAAG,IAAI;IACzDE,SAAS,GAAGA,SAAS,GAAGM,QAAQ,CAACN,SAAS,EAAE,EAAE,CAAC,GAAG,IAAI;IAEtD,IAAIF,UAAU,IAAIE,SAAS,IAAIC,cAAc,EAAE;MAC7C,IACEH,UAAU,KAAK/H,WAAW,IAC1BiI,SAAS,KAAK/H,UAAU,IACxBgI,cAAc,KAAK9H,eAAe,IAClCgI,QAAQ,KAAK5H,SAAS,IACtB8H,gBAAgB,KAAK5H,iBAAiB,EACtC;QACAT,cAAc,CAAC8H,UAAU,CAAC;QAC1B5H,aAAa,CAAC8H,SAAS,CAAC;QACxB5H,kBAAkB,CAAC6H,cAAc,CAAC;QAClC,IAAIC,gBAAgB,EAAE;UACpB5H,oBAAoB,CAAC4H,gBAAgB,CAAC;QACxC;QACA1H,YAAY,CAAC2H,QAAQ,CAAC;QACtBzH,oBAAoB,CAAC2H,gBAAgB,CAAC;QAEtCX,cAAc,CAACa,OAAO,CAAC,yBAAyB,EAAET,UAAU,CAACU,QAAQ,CAAC,CAAC,CAAC;QACxEd,cAAc,CAACa,OAAO,CAAC,wBAAwB,EAAEP,SAAS,CAACQ,QAAQ,CAAC,CAAC,CAAC;QACtEd,cAAc,CAACa,OAAO,CAAC,6BAA6B,EAAEN,cAAc,CAAC;QACrE,IAAIC,gBAAgB,EAAE;UACpBR,cAAc,CAACa,OAAO,CAAC,+BAA+B,EAAEL,gBAAgB,CAAC;QAC3E;QACA,IAAIC,QAAQ,EAAE;UACZT,cAAc,CAACa,OAAO,CAAC,uBAAuB,EAAEJ,QAAQ,CAAC;QAC3D;QACA,IAAIE,gBAAgB,EAAE;UACpBX,cAAc,CAACa,OAAO,CAAC,wBAAwB,EAAEF,gBAAgB,CAAC;QACpE;QAEAnC,gBAAgB,CAAC4B,UAAU,EAAEE,SAAS,EAAEC,cAAc,EAAEI,gBAAgB,CAAC;MAC3E,CAAC,MAAM;QACLzI,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,MAAM;MACLE,QAAQ,CAAC,+EAA+E,CAAC;MACzFF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CACDL,QAAQ,CAACwI,KAAK,EACdzI,YAAY,EACZS,WAAW,EACXE,UAAU,EACVE,eAAe,EACfI,SAAS,EACTE,iBAAiB,CAClB,CAAC;;EAEF;EACAjC,SAAS,CAAC,MAAM;IACdsC,mBAAmB,CAAC4D,YAAY,CAACjF,QAAQ,EAAEkB,aAAa,CAAC,CAAC;EAC5D,CAAC,EAAE,CAAClB,QAAQ,EAAEkB,aAAa,CAAC,CAAC;;EAE7B;EACAnC,SAAS,CAAC,MAAM;IACd,IAAI,CAACmB,OAAO,IAAIkB,gBAAgB,CAACmB,MAAM,GAAG,CAAC,IAAIxC,QAAQ,CAACiJ,OAAO,EAAE;MAC/D,MAAMC,IAAI,GAAG7J,CAAC,CAACW,QAAQ,CAACiJ,OAAO,CAAC;MAChC,IAAI5J,CAAC,CAAC8J,EAAE,CAACC,SAAS,CAACC,WAAW,CAACH,IAAI,CAAC,EAAE;QACpCA,IAAI,CAACE,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAAC;MAC5B;MACAJ,IAAI,CAACE,SAAS,CAAC;QACbG,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE,IAAI;QACfC,QAAQ,EAAE,KAAK;QACfC,IAAI,EAAE,IAAI;QACVC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ;IAEA,OAAO,MAAM;MACX,IAAI3J,QAAQ,CAACiJ,OAAO,EAAE;QACpB,MAAMC,IAAI,GAAG7J,CAAC,CAACW,QAAQ,CAACiJ,OAAO,CAAC;QAChC,IAAI5J,CAAC,CAAC8J,EAAE,CAACC,SAAS,CAACC,WAAW,CAACH,IAAI,CAAC,EAAE;UACpCA,IAAI,CAACE,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAAC;QAC5B;MACF;IACF,CAAC;EACH,CAAC,EAAE,CAACnJ,OAAO,EAAEkB,gBAAgB,CAAC,CAAC;;EAE/B;EACA,MAAMuI,cAAc,GAAG,CACrB;IAAEC,IAAI,EAAE,eAAe;IAAEC,IAAI,EAAE;EAAG,CAAC,EACnC;IAAED,IAAI,EAAE,+BAA+B;IAAEC,IAAI,EAAE;EAAS,CAAC,EACzD,IAAI/I,SAAS,GAAG,CAAC;IAAE8I,IAAI,EAAE,GAAG9I,SAAS,YAAY;IAAE+I,IAAI,EAAE,KAAK;IAAEvB,KAAK,EAAE;MAAEjG,KAAK,EAAE/B,WAAW;MAAEoG,IAAI,EAAElG,UAAU;MAAEmI,GAAG,EAAE7H;IAAU;EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EACxI;IAAE8I,IAAI,EAAE,eAAe;IAAEC,IAAI,EAAE,UAAU;IAAEvB,KAAK,EAAE;MAAEjG,KAAK,EAAE/B,WAAW;MAAEoG,IAAI,EAAElG,UAAU;MAAEmI,GAAG,EAAE7H;IAAU;EAAE,CAAC,EAC5G,IAAIE,iBAAiB,GAAG,CAAC;IAAE4I,IAAI,EAAE,GAAG5I,iBAAiB,eAAe;IAAE6I,IAAI,EAAE,YAAYnJ,eAAe,gBAAgB;IAAE4H,KAAK,EAAE;MAAEjG,KAAK,EAAE/B,WAAW;MAAEoG,IAAI,EAAElG,UAAU;MAAEmI,GAAG,EAAE7H,SAAS;MAAE6F,KAAK,EAAEjG;IAAgB;EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EACzN;IACEkJ,IAAI,EAAE,aAAahJ,iBAAiB,GAAG;IACvCiJ,IAAI,EAAE,YAAYnJ,eAAe;EACnC,CAAC,CACF,CAAC0E,MAAM,CAAC0C,OAAO,CAAC;;EAEjB;EACA,IAAI5H,OAAO,EAAE;IACX,oBACEV,OAAA;MAAKsK,SAAS,EAAC,6DAA6D;MAAAC,QAAA,gBAC1EvK,OAAA;QAAKsK,SAAS,EAAC,6BAA6B;QAACE,IAAI,EAAC;MAAQ;QAAA/F,QAAA,EAAAgG,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7D3K,OAAA;QAAGsK,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAC;MAAuB;QAAA9F,QAAA,EAAAgG,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAlG,QAAA,EAAAgG,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD,CAAC;EAEV;;EAEA;EACA,IAAI/J,KAAK,EAAE;IACT,oBACEZ,OAAA;MAAKsK,SAAS,EAAC,qFAAqF;MAAAC,QAAA,gBAClGvK,OAAA;QAAGsK,SAAS,EAAC,MAAM;QAAAC,QAAA,GAAC,SAAO,EAAC3J,KAAK;MAAA;QAAA6D,QAAA,EAAAgG,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtC3K,OAAA;QACEsK,SAAS,EAAC,sBAAsB;QAChCM,OAAO,EAAEA,CAAA,KAAMzK,QAAQ,CAAC,WAAW,EAAE;UAAE2I,KAAK,EAAE;YAAEjG,KAAK,EAAE/B,WAAW;YAAEoG,IAAI,EAAElG,UAAU;YAAEmI,GAAG,EAAE7H;UAAU;QAAE,CAAC,CAAE;QAAAiJ,QAAA,EAC3G;MAED;QAAA9F,QAAA,EAAAgG,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAlG,QAAA,EAAAgG,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEV;;EAEA;EACA,oBACE3K,OAAA;IACEsK,SAAS,EAAC,4DAA4D;IACtElI,KAAK,EAAE;MACLyI,UAAU,EAAE,oDAAoD;MAChElE,UAAU,EAAE;IACd,CAAE;IAAA4D,QAAA,eAEFvK,OAAA;MACEsK,SAAS,EAAC,8BAA8B;MACxClI,KAAK,EAAE;QACL0I,QAAQ,EAAE,QAAQ;QAClBC,eAAe,EAAE,WAAW;QAC5BC,YAAY,EAAE;MAChB,CAAE;MAAAT,QAAA,gBAGFvK,OAAA,CAACH,WAAW;QAACoL,IAAI,EAAEd;MAAe;QAAA1F,QAAA,EAAAgG,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAErC3K,OAAA;QAAKsK,SAAS,EAAC,wDAAwD;QAAAC,QAAA,gBACrEvK,OAAA;UAAIsK,SAAS,EAAC,4BAA4B;UAAAC,QAAA,GAAC,qCAChB,EAAC,GAAG,EAC5BrJ,eAAe,GAAG,OAAOE,iBAAiB,EAAE,GAAG,EAAE;QAAA;UAAAqD,QAAA,EAAAgG,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC,EAEJnK,QAAQ,CAACuC,MAAM,GAAG,CAAC,iBAClB/C,OAAA;UACEsK,SAAS,EAAC,2CAA2C;UACrDM,OAAO,EAAE9H,kBAAmB;UAC5BoI,KAAK,EAAC,uBAAuB;UAAAX,QAAA,gBAE7BvK,OAAA;YAAGsK,SAAS,EAAC;UAAqB;YAAA7F,QAAA,EAAAgG,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,kBACzC;QAAA;UAAAlG,QAAA,EAAAgG,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT;MAAA;QAAAlG,QAAA,EAAAgG,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGN3K,OAAA;QAAKsK,SAAS,EAAC,0BAA0B;QAAAC,QAAA,eACvCvK,OAAA;UACEmL,GAAG,EAAE5K,QAAS;UACd+J,SAAS,EAAC,8DAA8D;UACxElI,KAAK,EAAE;YAAEgJ,KAAK,EAAE;UAAO,CAAE;UAAAb,QAAA,gBAEzBvK,OAAA;YACEsK,SAAS,EAAC,YAAY;YACtBlI,KAAK,EAAE;cAAEyI,UAAU,EAAE;YAA8C,CAAE;YAAAN,QAAA,eAErEvK,OAAA;cAAAuK,QAAA,gBAEEvK,OAAA;gBAAAuK,QAAA,GAAI,YAEF,eAAAvK,OAAA;kBACEsK,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAG1C,CAAC,IAAKpD,kBAAkB,CAAC,WAAW,EAAEoD,CAAC,CAAC2C,MAAM,CAACtJ,KAAK,CAAE;kBACjEA,KAAK,EAAEN,aAAa,CAAC4B,SAAS,IAAI,KAAM;kBAAAiH,QAAA,EAEvCtF,gBAAgB,CAAC,WAAW,CAAC,CAAC7B,GAAG,CAACmI,MAAM,iBACvCvL,OAAA;oBAAqBgC,KAAK,EAAEuJ,MAAO;oBAAAhB,QAAA,EAAEgB;kBAAM,GAA9BA,MAAM;oBAAA9G,QAAA,EAAAgG,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAiC,CACrD;gBAAC;kBAAAlG,QAAA,EAAAgG,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAAlG,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL3K,OAAA;gBAAAuK,QAAA,GAAI,cAEF,eAAAvK,OAAA;kBACEsK,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAG1C,CAAC,IAAKpD,kBAAkB,CAAC,aAAa,EAAEoD,CAAC,CAAC2C,MAAM,CAACtJ,KAAK,CAAE;kBACnEA,KAAK,EAAEN,aAAa,CAAC6B,WAAW,IAAI,KAAM;kBAAAgH,QAAA,EAEzCtF,gBAAgB,CAAC,aAAa,CAAC,CAAC7B,GAAG,CAACmI,MAAM,iBACzCvL,OAAA;oBAAqBgC,KAAK,EAAEuJ,MAAO;oBAAAhB,QAAA,EAAEgB;kBAAM,GAA9BA,MAAM;oBAAA9G,QAAA,EAAAgG,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAiC,CACrD;gBAAC;kBAAAlG,QAAA,EAAAgG,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAAlG,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL3K,OAAA;gBAAAuK,QAAA,GAAI,kBAEF,eAAAvK,OAAA;kBACEsK,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAG1C,CAAC,IAAKpD,kBAAkB,CAAC,sBAAsB,EAAEoD,CAAC,CAAC2C,MAAM,CAACtJ,KAAK,CAAE;kBAC5EA,KAAK,EAAEN,aAAa,CAAC8B,oBAAoB,IAAI,KAAM;kBAAA+G,QAAA,EAElDtF,gBAAgB,CAAC,sBAAsB,CAAC,CAAC7B,GAAG,CAACmI,MAAM,iBAClDvL,OAAA;oBAAqBgC,KAAK,EAAEuJ,MAAO;oBAAAhB,QAAA,EAAEgB;kBAAM,GAA9BA,MAAM;oBAAA9G,QAAA,EAAAgG,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAiC,CACrD;gBAAC;kBAAAlG,QAAA,EAAAgG,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAAlG,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL3K,OAAA;gBAAAuK,QAAA,GAAI,eACF,eAAAvK,OAAA;kBACEsK,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAG1C,CAAC,IAAKpD,kBAAkB,CAAC,mBAAmB,EAAEoD,CAAC,CAAC2C,MAAM,CAACtJ,KAAK,CAAE;kBACzEA,KAAK,EAAEN,aAAa,CAAC+B,iBAAiB,IAAI,KAAM;kBAAA8G,QAAA,EAE/CtF,gBAAgB,CAAC,mBAAmB,CAAC,CAAC7B,GAAG,CAACmI,MAAM,iBAC/CvL,OAAA;oBAAqBgC,KAAK,EAAEuJ,MAAO;oBAAAhB,QAAA,EAAEgB;kBAAM,GAA9BA,MAAM;oBAAA9G,QAAA,EAAAgG,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAiC,CACrD;gBAAC;kBAAAlG,QAAA,EAAAgG,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAAlG,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL3K,OAAA;gBAAAuK,QAAA,GAAI,cACF,eAAAvK,OAAA;kBACEsK,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAG1C,CAAC,IAAKpD,kBAAkB,CAAC,kBAAkB,EAAEoD,CAAC,CAAC2C,MAAM,CAACtJ,KAAK,CAAE;kBACxEA,KAAK,EAAEN,aAAa,CAACgC,gBAAgB,IAAI,KAAM;kBAAA6G,QAAA,EAE9CtF,gBAAgB,CAAC,kBAAkB,CAAC,CAAC7B,GAAG,CAACmI,MAAM,iBAC9CvL,OAAA;oBAAqBgC,KAAK,EAAEuJ,MAAO;oBAAAhB,QAAA,EAAEgB;kBAAM,GAA9BA,MAAM;oBAAA9G,QAAA,EAAAgG,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAiC,CACrD;gBAAC;kBAAAlG,QAAA,EAAAgG,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAAlG,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL3K,OAAA;gBAAAuK,QAAA,GAAI,gBACF,eAAAvK,OAAA;kBACEsK,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAG1C,CAAC,IAAKpD,kBAAkB,CAAC,eAAe,EAAEoD,CAAC,CAAC2C,MAAM,CAACtJ,KAAK,CAAE;kBACrEA,KAAK,EAAEN,aAAa,CAACiC,aAAa,IAAI,KAAM;kBAAA4G,QAAA,EAE3CtF,gBAAgB,CAAC,eAAe,CAAC,CAAC7B,GAAG,CAACmI,MAAM,iBAC3CvL,OAAA;oBAAqBgC,KAAK,EAAEuJ,MAAO;oBAAAhB,QAAA,EAAEgB;kBAAM,GAA9BA,MAAM;oBAAA9G,QAAA,EAAAgG,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAiC,CACrD;gBAAC;kBAAAlG,QAAA,EAAAgG,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAAlG,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL3K,OAAA;gBAAAuK,QAAA,GAAI,SACF,eAAAvK,OAAA;kBACEsK,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAG1C,CAAC,IAAKpD,kBAAkB,CAAC,SAAS,EAAEoD,CAAC,CAAC2C,MAAM,CAACtJ,KAAK,CAAE;kBAC/DA,KAAK,EAAEN,aAAa,CAACkC,OAAO,IAAI,KAAM;kBAAA2G,QAAA,EAErCtF,gBAAgB,CAAC,SAAS,CAAC,CAAC7B,GAAG,CAACmI,MAAM,iBACrCvL,OAAA;oBAAqBgC,KAAK,EAAEuJ,MAAO;oBAAAhB,QAAA,EAAEgB;kBAAM,GAA9BA,MAAM;oBAAA9G,QAAA,EAAAgG,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAiC,CACrD;gBAAC;kBAAAlG,QAAA,EAAAgG,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAAlG,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL3K,OAAA;gBAAIsK,SAAS,EAAC,aAAa;gBAAAC,QAAA,EAAC;cAAI;gBAAA9F,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAlG,QAAA,EAAAgG,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnC;UAAC;YAAAlG,QAAA,EAAAgG,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACR3K,OAAA;YAAAuK,QAAA,EAEG3I,gBAAgB,CAACwB,GAAG,CAACC,OAAO,iBAC3BrD,OAAA;cAAAuK,QAAA,gBACEvK,OAAA;gBAAAuK,QAAA,EAAKlH,OAAO,CAACC;cAAS;gBAAAmB,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC5B3K,OAAA;gBAAAuK,QAAA,EAAKlH,OAAO,CAACE;cAAW;gBAAAkB,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9B3K,OAAA;gBAAAuK,QAAA,EAAKlH,OAAO,CAACG;cAAoB;gBAAAiB,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACvC3K,OAAA;gBAAAuK,QAAA,EAAKlH,OAAO,CAACI;cAAiB;gBAAAgB,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACpC3K,OAAA;gBAAAuK,QAAA,EAAKlH,OAAO,CAACK;cAAgB;gBAAAe,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnC3K,OAAA;gBAAAuK,QAAA,EAAKlH,OAAO,CAACM;cAAa;gBAAAc,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAChC3K,OAAA;gBAAAuK,QAAA,EAAKxI,cAAc,CAACsB,OAAO,CAACO,OAAO;cAAC;gBAAAa,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC1C3K,OAAA;gBAAIsK,SAAS,EAAC,aAAa;gBAAAC,QAAA,eACzBvK,OAAA;kBACEsK,SAAS,EAAC,+CAA+C;kBACzDM,OAAO,EAAEA,CAAA,KACPzK,QAAQ,CACN,aAAakD,OAAO,CAACC,SAAS,aAAa,EAC3C;oBACEwF,KAAK,EAAE;sBACLxF,SAAS,EAAED,OAAO,CAACC,SAAS;sBAC5BC,WAAW,EAAEF,OAAO,CAACE,WAAW;sBAChCnD,SAAS,EAAEiD,OAAO,CAACjD,SAAS;sBAC5BmI,WAAW,EAAElF,OAAO,CAACkF,WAAW;sBAChC1F,KAAK,EAAE/B,WAAW;sBAClBoG,IAAI,EAAElG,UAAU;sBAChBmI,GAAG,EAAE7H,SAAS;sBACd8F,WAAW,EAAE5F;oBACf;kBACF,CACF,CACD;kBACD0J,KAAK,EAAC,iBAAiB;kBAAAX,QAAA,EACxB;gBAED;kBAAA9F,QAAA,EAAAgG,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAlG,QAAA,EAAAgG,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC;YAAA,GAhCEtH,OAAO,CAACC,SAAS;cAAAmB,QAAA,EAAAgG,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAiCtB,CACL;UAAC;YAAAlG,QAAA,EAAAgG,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA;UAAAlG,QAAA,EAAAgG,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAlG,QAAA,EAAAgG,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAlG,QAAA,EAAAgG,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAlG,QAAA,EAAAgG,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzK,EAAA,CArfID,YAAY;EAAA,QACCR,WAAW,EACQC,SAAS,EAC5BC,WAAW;AAAA;AAAA6L,EAAA,GAHxBvL,YAAY;AAuflB,eAAeA,YAAY;AAAC,IAAAuL,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}