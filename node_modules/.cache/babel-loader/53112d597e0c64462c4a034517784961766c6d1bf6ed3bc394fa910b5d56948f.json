{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\Frontend\\\\Revenue-forecast\\\\src\\\\components\\\\Details\\\\ProjectLevel.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { useNavigate, useParams, useLocation } from \"react-router-dom\";\nimport $ from \"jquery\";\nimport \"datatables.net\";\nimport \"datatables.net-dt/css/dataTables.dataTables.min.css\";\n// Assuming these paths are correct relative to where ProjectLevel.jsx resides\nimport Breadcrumbs from \"../Breadcrumbs\";\nimport commonData from \"../../data/commonData.json\"; // Ensure commonData.json exists and is accessible\n\n// Declare the BACKEND_URL constant at the top level\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_URL = \"http://localhost:8081\"; // Ensure this matches your backend API endpoint\n\nconst ProjectLevel = () => {\n  _s();\n  // Hooks for navigation and route parameters\n  const navigate = useNavigate();\n  const {\n    accountId: urlAccountId\n  } = useParams();\n  const location = useLocation();\n\n  // Ref for the DataTable HTML table element\n  const tableRef = useRef(null);\n\n  // State variables for data and UI management\n  const [projects, setProjects] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // State for parameters defining the current view\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState(\"Loading...\");\n  const [activeSbu, setActiveSbu] = useState(null);\n  const [activeProjectType, setActiveProjectType] = useState(null);\n\n  // State to manage column filters. Initialized from sessionStorage or as an empty object.\n  const [columnFilters, setColumnFilters] = useState(() => {\n    try {\n      const savedFilters = sessionStorage.getItem(\"projectLevelFilters\");\n      return savedFilters ? JSON.parse(savedFilters) : {};\n    } catch (e) {\n      console.error(\"Failed to parse saved filters from sessionStorage:\", e);\n      return {}; // Fallback to empty if parsing fails\n    }\n  });\n\n  /**\r\n   * Formats a numeric value into a currency string based on commonData settings.\r\n   * @param {number} value - The number to format. Defaults to 0 if not provided.\r\n   * @returns {string} The formatted currency string.\r\n   */\n  const formatCurrency = (value = 0) => value.toLocaleString(commonData.currencySettings.locale, {\n    style: \"currency\",\n    currency: commonData.currencySettings.currency,\n    minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\n    maximumFractionDigits: commonData.currencySettings.maximumFractionDigits\n  });\n\n  /**\r\n   * Converts a month number (1-12) to its full English name.\r\n   * Used primarily for file naming in downloads.\r\n   * @param {number} monthNumber - The month number (e.g., 1 for January).\r\n   * @returns {string} The full month name.\r\n   */\n  const getMonthName = monthNumber => {\n    if (!monthNumber) return \"\";\n    const date = new Date();\n    date.setMonth(monthNumber - 1); // Month is 0-indexed in Date object\n    return date.toLocaleString(\"en-US\", {\n      month: \"long\"\n    });\n  };\n\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data (filtered by current columnFilters)\r\n   * and triggers a download in the user's browser.\r\n   */\n  const handleDownloadData = () => {\n    if (projects.length === 0) {\n      console.log(\"No data to download.\");\n      return;\n    }\n\n    // Define CSV headers that match the table columns and expected data structure\n    const headers = [\"Project ID\", \"Project Name\", \"Total Associates\", \"Company Hours\", \"Client Hours\", \"Variance Hours\", \"Revenue\"];\n\n    // Apply the current column filters to the 'projects' array before generating CSV.\n    // This ensures only visible data in the table is downloaded.\n    const csvRows = applyFilters(projects, columnFilters).map(project => {\n      return [`\"${project.projectId}\"`,\n      // Enclose strings in quotes to handle commas\n      `\"${project.projectName}\"`, project.totalAssociatesCount, project.totalCompanyHours, project.totalClientHours, project.varianceHours, `\"${formatCurrency(project.revenue)}\"` // Format currency for CSV\n      ].join(\",\"); // Join each row's values with a comma\n    });\n\n    // Combine headers and data rows for the complete CSV content\n    const csvContent = [headers.join(\",\"), ...csvRows].join(\"\\n\");\n\n    // Create a Blob containing the CSV data and trigger download\n    const blob = new Blob([csvContent], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(blob);\n    const monthName = getMonthName(activeMonth);\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`; // Dynamic file name\n\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", fileName);\n    link.style.visibility = \"hidden\"; // Hide the link element\n    document.body.appendChild(link); // Append to body to make it clickable\n    link.click(); // Programmatically click the link to trigger download\n    document.body.removeChild(link); // Clean up the link element\n    URL.revokeObjectURL(url); // Release the object URL\n  };\n\n  /**\r\n   * Generates a unique, sorted list of options for a given column filter dropdown.\r\n   * Includes an \"All\" option for resetting the filter.\r\n   * @param {string} columnKey - The key of the column (e.g., \"projectId\", \"revenue\").\r\n   * @returns {string[]} An array of unique string values, starting with \"All\".\r\n   */\n  const getUniqueOptions = columnKey => {\n    // Return default options if projects data is not yet available or empty\n    if (!projects || !Array.isArray(projects) || projects.length === 0) {\n      return [\"All\"];\n    }\n\n    // Map project data to obtain values for the specified column\n    const options = projects.map(project => {\n      const value = project[columnKey];\n      if (columnKey === \"revenue\") {\n        // If the column is revenue, format it to match the displayed table value\n        return formatCurrency(value);\n      }\n      return String(value); // Convert all values to string for consistent comparison\n    });\n\n    // Get unique options and sort them\n    const uniqueOptions = [...new Set(options)].sort((a, b) => {\n      // Determine if the column is numeric based on its key\n      const isNumericColumn = columnKey === \"totalAssociatesCount\" || columnKey === \"totalCompanyHours\" || columnKey === \"totalClientHours\" || columnKey === \"varianceHours\";\n      if (isNumericColumn) {\n        // Numeric sort for numeric columns\n        return Number(a) - Number(b);\n      }\n      // Lexicographical sort for string columns\n      return a.localeCompare(b);\n    });\n    return [\"All\", ...uniqueOptions]; // Prepend \"All\" option\n  };\n\n  /**\r\n   * Handles changes from the column filter dropdowns.\r\n   * Updates the `columnFilters` state, which in turn triggers DataTable filtering.\r\n   * @param {string} columnKey - The key of the column being filtered.\r\n   * @param {string} value - The selected filter value (e.g., \"All\", \"Project A\", \"100\").\r\n   */\n  const handleFilterChange = (columnKey, value) => {\n    setColumnFilters(prevFilters => ({\n      ...prevFilters,\n      [columnKey]: value === \"All\" ? null : value // Set to null if \"All\" is selected\n    }));\n  };\n\n  /**\r\n   * Filters the provided `projectsArray` based on the given `filters` object.\r\n   * This function is used internally for the download functionality to ensure the\r\n   * downloaded CSV matches the currently visible, filtered data in the table.\r\n   * @param {Array} projectsArray - The array of project objects to filter.\r\n   * @param {Object} filters - An object where keys are column keys and values are filter criteria.\r\n   * @returns {Array} The array of projects that match all active filters.\r\n   */\n  const applyFilters = (projectsArray, filters) => {\n    return projectsArray.filter(project => {\n      // Check if every active filter matches the current project\n      return Object.keys(filters).every(columnKey => {\n        const filterValue = filters[columnKey];\n        // If no filter is applied for this column, or filterValue is null/undefined, it matches\n        if (filterValue === null || filterValue === undefined) {\n          return true;\n        }\n        const projectValue = project[columnKey];\n        // If project's value for this column is null/undefined, it cannot match a filter\n        if (projectValue === null || projectValue === undefined) {\n          return false;\n        }\n\n        // Special handling for 'revenue' column: compare formatted currency strings\n        if (columnKey === \"revenue\") {\n          return formatCurrency(project.revenue) === String(filterValue);\n        }\n\n        // For numeric columns, perform strict number equality comparison\n        if (typeof projectValue === \"number\" && !Number.isNaN(Number(filterValue)) // Ensure filterValue can be converted to a number\n        ) {\n          return projectValue === Number(filterValue);\n        }\n\n        // For all other columns (strings), perform a case-insensitive string comparison\n        return String(projectValue).toLowerCase() === String(filterValue).toLowerCase();\n      });\n    });\n  };\n\n  // Effect to load Poppins font from Google Fonts for consistent styling\n  useEffect(() => {\n    const link = document.createElement(\"link\");\n    link.href = \"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap\";\n    link.rel = \"stylesheet\";\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  // Effect to fetch project data based on URL parameters and session storage.\n  // This hook also initializes state related to the current view (month, year, account, etc.).\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5;\n    const fetchProjectData = async (month, year, accId, projectType) => {\n      setLoading(true); // Indicate that data is being loaded\n      setError(null); // Clear any previous errors\n\n      try {\n        const payload = {\n          month,\n          year,\n          accId,\n          projectType\n        };\n        // Make a POST request to the backend API\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(payload)\n        });\n        if (!resp.ok) {\n          // If response is not OK (e.g., 404, 500), throw an error\n          const errText = await resp.text();\n          throw new Error(`status: ${resp.status}, message: ${errText || resp.statusText}`);\n        }\n        const data = await resp.json();\n        // Ensure data is an array; if a single object, wrap it in an array\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\n        setProjects(list); // Update the projects state\n\n        // Attempt to set the account name from fetched data, otherwise use stored or URL ID\n        if (list.length > 0 && list[0].accountName) {\n          setActiveAccountName(list[0].accountName);\n        } else {\n          const storedName = sessionStorage.getItem(\"lastFetchedProjectAccountName\");\n          setActiveAccountName(storedName || accId);\n        }\n      } catch (e) {\n        console.error(\"Error fetching project data:\", e);\n        setError(`Failed to load project data: ${e.message}`); // Set error message\n      } finally {\n        setLoading(false); // End loading state regardless of success or failure\n      }\n    };\n\n    // Determine the parameters to use for fetching data:\n    // Prioritize `location.state` (from navigation), then `sessionStorage`, then URL params.\n    let monthToUse = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month) || sessionStorage.getItem(\"lastFetchedProjectMonth\");\n    let yearToUse = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year) || sessionStorage.getItem(\"lastFetchedProjectYear\");\n    let accountIdToUse = urlAccountId || sessionStorage.getItem(\"lastFetchedProjectAccountId\");\n    let accountNameToUse = ((_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.accountName) || sessionStorage.getItem(\"lastFetchedProjectAccountName\");\n    let sbuToUse = ((_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.sbu) || sessionStorage.getItem(\"lastFetchedProjectSbu\");\n    let projectTypeToUse = ((_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.projectType) || sessionStorage.getItem(\"lastFetchedProjectType\");\n\n    // Parse month and year to integers\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\n\n    // Proceed only if essential parameters are available\n    if (monthToUse && yearToUse && accountIdToUse) {\n      // Check if the current parameters differ from the active ones to avoid redundant fetches\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accountIdToUse !== activeAccountId || sbuToUse !== activeSbu || projectTypeToUse !== activeProjectType) {\n        // Update active states\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        setActiveAccountId(accountIdToUse);\n        if (accountNameToUse) {\n          setActiveAccountName(accountNameToUse);\n        }\n        setActiveSbu(sbuToUse);\n        setActiveProjectType(projectTypeToUse);\n\n        // Save current parameters to sessionStorage for persistence\n        sessionStorage.setItem(\"lastFetchedProjectMonth\", monthToUse.toString());\n        sessionStorage.setItem(\"lastFetchedProjectYear\", yearToUse.toString());\n        sessionStorage.setItem(\"lastFetchedProjectAccountId\", accountIdToUse);\n        if (accountNameToUse) {\n          sessionStorage.setItem(\"lastFetchedProjectAccountName\", accountNameToUse);\n        }\n        if (sbuToUse) {\n          sessionStorage.setItem(\"lastFetchedProjectSbu\", sbuToUse);\n        }\n        if (projectTypeToUse) {\n          sessionStorage.setItem(\"lastFetchedProjectType\", projectTypeToUse);\n        }\n\n        // Trigger the data fetch\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse);\n      } else {\n        // If parameters haven't changed, but data is already loaded, just set loading to false\n        setLoading(false);\n      }\n    } else {\n      // If essential parameters are missing, set an error\n      setError(\"Missing month, year, or Account ID. Please navigate here with all parameters.\");\n      setLoading(false);\n    }\n  }, [location.state, urlAccountId, activeMonth, activeYear, activeAccountId, activeSbu, activeProjectType]); // Dependencies ensure this effect re-runs when relevant parameters change\n\n  // Effect to handle DataTables initialization and destruction.\n  // It runs when 'loading' or 'projects' state changes.\n  useEffect(() => {\n    // Only initialize if not loading, projects are available, and the table ref exists\n    if (!loading && projects.length > 0 && tableRef.current) {\n      const $tbl = $(tableRef.current);\n\n      // Destroy existing DataTable instance if it already exists to prevent re-initialization issues\n      if ($.fn.DataTable.isDataTable($tbl)) {\n        $tbl.DataTable().destroy();\n      }\n\n      // Initialize DataTable with desired options\n      const tableInstance = $tbl.DataTable({\n        paging: true,\n        // Enable pagination\n        searching: true,\n        // Enable global search bar\n        ordering: false,\n        // Disable default column ordering (handled by custom filtering)\n        info: true,\n        // Show table information (e.g., \"Showing 1 to 10 of X entries\")\n        autoWidth: false // Disable auto column width calculation for better responsiveness\n      });\n\n      // Store the DataTables instance on the ref for later access (e.g., for applying filters)\n      tableRef.current.dataTableInstance = tableInstance;\n    }\n\n    // Cleanup function: This runs when the component unmounts or when dependencies change,\n    // ensuring that the DataTable instance is properly destroyed to prevent memory leaks.\n    return () => {\n      if (tableRef.current && tableRef.current.dataTableInstance) {\n        tableRef.current.dataTableInstance.destroy(); // Destroy the DataTable instance\n        tableRef.current.dataTableInstance = null; // Clear the stored instance\n      }\n    };\n  }, [loading, projects]); // Dependencies: re-run when loading state or projects data changes\n\n  // NEW EFFECT: Persist column filters to sessionStorage whenever they change.\n  useEffect(() => {\n    // Save filters only if there's at least one filter applied, otherwise remove the key.\n    if (Object.keys(columnFilters).length > 0) {\n      sessionStorage.setItem(\"projectLevelFilters\", JSON.stringify(columnFilters));\n    } else {\n      sessionStorage.removeItem(\"projectLevelFilters\");\n    }\n  }, [columnFilters]); // This effect runs every time `columnFilters` state is updated\n\n  // Effect to apply filters using the DataTables API whenever columnFilters state changes.\n  useEffect(() => {\n    if (tableRef.current && tableRef.current.dataTableInstance) {\n      const tableInstance = tableRef.current.dataTableInstance;\n\n      // Clear all existing column-specific searches before applying new ones\n      tableInstance.columns().search(\"\");\n\n      // Define a mapping from column keys (used in state) to DataTables column indices\n      // This is crucial for DataTables' `.column(index).search()` method\n      const columnMapping = {\n        projectId: 0,\n        projectName: 1,\n        totalAssociatesCount: 2,\n        totalCompanyHours: 3,\n        totalClientHours: 4,\n        varianceHours: 5,\n        revenue: 6\n      };\n\n      // Iterate over the current `columnFilters` and apply each filter to the corresponding DataTable column\n      Object.keys(columnFilters).forEach(columnKey => {\n        const filterValue = columnFilters[columnKey];\n        if (filterValue !== null) {\n          // Only apply filter if a value is selected (not \"All\")\n          const columnIndex = columnMapping[columnKey];\n          if (columnIndex !== undefined) {\n            // Escape special regex characters in the filter value to ensure exact match\n            const escapedValue = String(filterValue).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n            // Apply the column search: `^${escapedValue}$` ensures an exact match for the cell content\n            // The `true` argument enables regex search, `false` disables smart search\n            tableInstance.column(columnIndex).search(`^${escapedValue}$`, true, false);\n          }\n        }\n      });\n\n      // Redraw the table to apply all the newly set filters\n      tableInstance.draw();\n    }\n  }, [columnFilters]); // This effect runs whenever the `columnFilters` state changes\n\n  // Define the breadcrumb navigation path dynamically\n  const breadcrumbPath = [{\n    name: \"PMO Dashboard\",\n    page: \"\"\n  }, {\n    name: \"Revenue Forecast - Early View\",\n    page: \"upload\"\n  },\n  // Conditionally add SBU level if activeSbu is present\n  ...(activeSbu ? [{\n    name: `${activeSbu} SBU Level`,\n    page: \"sbu\",\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  }] : []), {\n    name: \"Account Level\",\n    page: `accounts`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu\n    }\n  },\n  // Conditionally add Project Type level if activeProjectType is present\n  ...(activeProjectType ? [{\n    name: `${activeProjectType} Project Type`,\n    page: `accounts/${activeAccountId}/project-types`,\n    state: {\n      month: activeMonth,\n      year: activeYear,\n      sbu: activeSbu,\n      accId: activeAccountId\n    }\n  }] : []), {\n    name: `Projects (${activeAccountName})`,\n    page: `accounts/${activeAccountId}/projects`\n  }].filter(Boolean); // Filter out any null or undefined entries from the array\n\n  // Render loading state while data is being fetched\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Project Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state if data fetching failed\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () =>\n        // Provide a way to navigate back if an error occurs\n        navigate(\"/accounts\", {\n          state: {\n            month: activeMonth,\n            year: activeYear,\n            sbu: activeSbu\n          }\n        }),\n        children: \"Go to Account Level\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Main component render: displays the project data table\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: \"linear-gradient(to bottom right, #f5f7fa, #e9ecef)\",\n      // Gradient background\n      fontFamily: \"'Poppins', sans-serif\" // Apply Poppins font\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: \"1200px\",\n        backgroundColor: \"#ffffffdd\",\n        // Slightly transparent white card background\n        borderRadius: \"1rem\" // Rounded corners for the card\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-0 fw-semibold text-dark\",\n          children: [\"\\uD83D\\uDCC1 Project Level Overview\", \" \", activeAccountId ? `for ${activeAccountName}` : \"\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this), projects.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-success rounded-pill px-3\",\n          onClick: handleDownloadData,\n          title: \"Download Project Data\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-download me-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 15\n          }, this), \" Download Data\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          ref: tableRef // Attach ref to the table element\n          ,\n          className: \"display table table-hover align-middle table-borderless mb-0\",\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: \"linear-gradient(to right, #3b82f6, #2563eb)\" // Blue gradient for table header\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Project ID\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"projectId\", e.target.value),\n                  value: columnFilters.projectId || \"All\" // Controlled component: value reflects state\n                  ,\n                  children: getUniqueOptions(\"projectId\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 577,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 569,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Project Name\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"projectName\", e.target.value),\n                  value: columnFilters.projectName || \"All\",\n                  children: getUniqueOptions(\"projectName\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 593,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 585,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Total Associates\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"totalAssociatesCount\", e.target.value),\n                  value: columnFilters.totalAssociatesCount || \"All\",\n                  children: getUniqueOptions(\"totalAssociatesCount\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 609,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 601,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Company Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"totalCompanyHours\", e.target.value),\n                  value: columnFilters.totalCompanyHours || \"All\",\n                  children: getUniqueOptions(\"totalCompanyHours\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 625,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 617,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Client Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"totalClientHours\", e.target.value),\n                  value: columnFilters.totalClientHours || \"All\",\n                  children: getUniqueOptions(\"totalClientHours\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 641,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 633,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 631,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Variance Hours\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"varianceHours\", e.target.value),\n                  value: columnFilters.varianceHours || \"All\",\n                  children: getUniqueOptions(\"varianceHours\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 657,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 649,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 647,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: [\"Revenue\", /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select form-select-sm mt-1\",\n                  onChange: e => handleFilterChange(\"revenue\", e.target.value),\n                  value: columnFilters.revenue || \"All\",\n                  children: getUniqueOptions(\"revenue\").map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option,\n                    children: option\n                  }, option, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 673,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 665,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 663,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-center\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: projects.map(project => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.projectId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 686,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.projectName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 687,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalAssociatesCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalCompanyHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 689,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.totalClientHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 690,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: project.varianceHours\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 691,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatCurrency(project.revenue)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-sm btn-outline-primary rounded-circle\",\n                  onClick: () =>\n                  // Navigate to the Associates level with relevant state\n                  navigate(`/projects/${project.projectId}/associates`, {\n                    state: {\n                      projectId: project.projectId,\n                      projectName: project.projectName,\n                      accountId: project.accountId,\n                      accountName: project.accountName,\n                      month: activeMonth,\n                      year: activeYear,\n                      sbu: activeSbu,\n                      projectType: activeProjectType\n                    }\n                  }),\n                  title: \"View Associates\",\n                  children: \"\\uD83D\\uDD0D \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 694,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 19\n              }, this)]\n            }, project.projectId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectLevel, \"wBbde8L4il4Wd4tfBB547nrAkRQ=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = ProjectLevel;\nexport default ProjectLevel;\nvar _c;\n$RefreshReg$(_c, \"ProjectLevel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","useParams","useLocation","$","Breadcrumbs","commonData","jsxDEV","_jsxDEV","BACKEND_URL","ProjectLevel","_s","navigate","accountId","urlAccountId","location","tableRef","projects","setProjects","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","activeSbu","setActiveSbu","activeProjectType","setActiveProjectType","columnFilters","setColumnFilters","savedFilters","sessionStorage","getItem","JSON","parse","e","console","formatCurrency","value","toLocaleString","currencySettings","locale","style","currency","minimumFractionDigits","maximumFractionDigits","getMonthName","monthNumber","date","Date","setMonth","month","handleDownloadData","length","log","headers","csvRows","applyFilters","map","project","projectId","projectName","totalAssociatesCount","totalCompanyHours","totalClientHours","varianceHours","revenue","join","csvContent","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","monthName","fileName","setAttribute","visibility","body","appendChild","click","removeChild","revokeObjectURL","getUniqueOptions","columnKey","Array","isArray","options","String","uniqueOptions","Set","sort","a","b","isNumericColumn","Number","localeCompare","handleFilterChange","prevFilters","projectsArray","filters","filter","Object","keys","every","filterValue","undefined","projectValue","isNaN","toLowerCase","href","rel","head","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","fetchProjectData","year","accId","projectType","payload","resp","fetch","method","stringify","ok","errText","text","Error","status","statusText","data","json","list","Boolean","accountName","storedName","message","monthToUse","state","yearToUse","accountIdToUse","accountNameToUse","sbuToUse","sbu","projectTypeToUse","parseInt","setItem","toString","current","$tbl","fn","DataTable","isDataTable","destroy","tableInstance","paging","searching","ordering","info","autoWidth","dataTableInstance","removeItem","columns","search","columnMapping","forEach","columnIndex","escapedValue","replace","column","draw","breadcrumbPath","name","page","className","children","role","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","title","ref","width","onChange","target","option","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/Frontend/Revenue-forecast/src/components/Details/ProjectLevel.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams, useLocation } from \"react-router-dom\";\r\nimport $ from \"jquery\";\r\nimport \"datatables.net\";\r\nimport \"datatables.net-dt/css/dataTables.dataTables.min.css\";\r\n// Assuming these paths are correct relative to where ProjectLevel.jsx resides\r\nimport Breadcrumbs from \"../Breadcrumbs\";\r\nimport commonData from \"../../data/commonData.json\"; // Ensure commonData.json exists and is accessible\r\n\r\n// Declare the BACKEND_URL constant at the top level\r\nconst BACKEND_URL = \"http://localhost:8081\"; // Ensure this matches your backend API endpoint\r\n\r\nconst ProjectLevel = () => {\r\n  // Hooks for navigation and route parameters\r\n  const navigate = useNavigate();\r\n  const { accountId: urlAccountId } = useParams();\r\n  const location = useLocation();\r\n\r\n  // Ref for the DataTable HTML table element\r\n  const tableRef = useRef(null);\r\n\r\n  // State variables for data and UI management\r\n  const [projects, setProjects] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // State for parameters defining the current view\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n  const [activeAccountId, setActiveAccountId] = useState(null);\r\n  const [activeAccountName, setActiveAccountName] = useState(\"Loading...\");\r\n  const [activeSbu, setActiveSbu] = useState(null);\r\n  const [activeProjectType, setActiveProjectType] = useState(null);\r\n\r\n  // State to manage column filters. Initialized from sessionStorage or as an empty object.\r\n  const [columnFilters, setColumnFilters] = useState(() => {\r\n    try {\r\n      const savedFilters = sessionStorage.getItem(\"projectLevelFilters\");\r\n      return savedFilters ? JSON.parse(savedFilters) : {};\r\n    } catch (e) {\r\n      console.error(\"Failed to parse saved filters from sessionStorage:\", e);\r\n      return {}; // Fallback to empty if parsing fails\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Formats a numeric value into a currency string based on commonData settings.\r\n   * @param {number} value - The number to format. Defaults to 0 if not provided.\r\n   * @returns {string} The formatted currency string.\r\n   */\r\n  const formatCurrency = (value = 0) =>\r\n    value.toLocaleString(commonData.currencySettings.locale, {\r\n      style: \"currency\",\r\n      currency: commonData.currencySettings.currency,\r\n      minimumFractionDigits: commonData.currencySettings.minimumFractionDigits,\r\n      maximumFractionDigits: commonData.currencySettings.maximumFractionDigits,\r\n    });\r\n\r\n  /**\r\n   * Converts a month number (1-12) to its full English name.\r\n   * Used primarily for file naming in downloads.\r\n   * @param {number} monthNumber - The month number (e.g., 1 for January).\r\n   * @returns {string} The full month name.\r\n   */\r\n  const getMonthName = (monthNumber) => {\r\n    if (!monthNumber) return \"\";\r\n    const date = new Date();\r\n    date.setMonth(monthNumber - 1); // Month is 0-indexed in Date object\r\n    return date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  };\r\n\r\n  /**\r\n   * Handles the \"Download Data\" button click.\r\n   * Generates a CSV file from the 'projects' data (filtered by current columnFilters)\r\n   * and triggers a download in the user's browser.\r\n   */\r\n  const handleDownloadData = () => {\r\n    if (projects.length === 0) {\r\n      console.log(\"No data to download.\");\r\n      return;\r\n    }\r\n\r\n    // Define CSV headers that match the table columns and expected data structure\r\n    const headers = [\r\n      \"Project ID\",\r\n      \"Project Name\",\r\n      \"Total Associates\",\r\n      \"Company Hours\",\r\n      \"Client Hours\",\r\n      \"Variance Hours\",\r\n      \"Revenue\",\r\n    ];\r\n\r\n    // Apply the current column filters to the 'projects' array before generating CSV.\r\n    // This ensures only visible data in the table is downloaded.\r\n    const csvRows = applyFilters(projects, columnFilters).map((project) => {\r\n      return [\r\n        `\"${project.projectId}\"`, // Enclose strings in quotes to handle commas\r\n        `\"${project.projectName}\"`,\r\n        project.totalAssociatesCount,\r\n        project.totalCompanyHours,\r\n        project.totalClientHours,\r\n        project.varianceHours,\r\n        `\"${formatCurrency(project.revenue)}\"`, // Format currency for CSV\r\n      ].join(\",\"); // Join each row's values with a comma\r\n    });\r\n\r\n    // Combine headers and data rows for the complete CSV content\r\n    const csvContent = [headers.join(\",\"), ...csvRows].join(\"\\n\");\r\n\r\n    // Create a Blob containing the CSV data and trigger download\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    const link = document.createElement(\"a\");\r\n    const url = URL.createObjectURL(blob);\r\n    const monthName = getMonthName(activeMonth);\r\n    const fileName = `Projects_Account_${activeAccountId}_${monthName}_${activeYear}.csv`; // Dynamic file name\r\n\r\n    link.setAttribute(\"href\", url);\r\n    link.setAttribute(\"download\", fileName);\r\n    link.style.visibility = \"hidden\"; // Hide the link element\r\n    document.body.appendChild(link); // Append to body to make it clickable\r\n    link.click(); // Programmatically click the link to trigger download\r\n    document.body.removeChild(link); // Clean up the link element\r\n    URL.revokeObjectURL(url); // Release the object URL\r\n  };\r\n\r\n  /**\r\n   * Generates a unique, sorted list of options for a given column filter dropdown.\r\n   * Includes an \"All\" option for resetting the filter.\r\n   * @param {string} columnKey - The key of the column (e.g., \"projectId\", \"revenue\").\r\n   * @returns {string[]} An array of unique string values, starting with \"All\".\r\n   */\r\n  const getUniqueOptions = (columnKey) => {\r\n    // Return default options if projects data is not yet available or empty\r\n    if (!projects || !Array.isArray(projects) || projects.length === 0) {\r\n      return [\"All\"];\r\n    }\r\n\r\n    // Map project data to obtain values for the specified column\r\n    const options = projects.map((project) => {\r\n      const value = project[columnKey];\r\n      if (columnKey === \"revenue\") {\r\n        // If the column is revenue, format it to match the displayed table value\r\n        return formatCurrency(value);\r\n      }\r\n      return String(value); // Convert all values to string for consistent comparison\r\n    });\r\n\r\n    // Get unique options and sort them\r\n    const uniqueOptions = [...new Set(options)].sort((a, b) => {\r\n      // Determine if the column is numeric based on its key\r\n      const isNumericColumn =\r\n        columnKey === \"totalAssociatesCount\" ||\r\n        columnKey === \"totalCompanyHours\" ||\r\n        columnKey === \"totalClientHours\" ||\r\n        columnKey === \"varianceHours\";\r\n\r\n      if (isNumericColumn) {\r\n        // Numeric sort for numeric columns\r\n        return Number(a) - Number(b);\r\n      }\r\n      // Lexicographical sort for string columns\r\n      return a.localeCompare(b);\r\n    });\r\n\r\n    return [\"All\", ...uniqueOptions]; // Prepend \"All\" option\r\n  };\r\n\r\n  /**\r\n   * Handles changes from the column filter dropdowns.\r\n   * Updates the `columnFilters` state, which in turn triggers DataTable filtering.\r\n   * @param {string} columnKey - The key of the column being filtered.\r\n   * @param {string} value - The selected filter value (e.g., \"All\", \"Project A\", \"100\").\r\n   */\r\n  const handleFilterChange = (columnKey, value) => {\r\n    setColumnFilters((prevFilters) => ({\r\n      ...prevFilters,\r\n      [columnKey]: value === \"All\" ? null : value, // Set to null if \"All\" is selected\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * Filters the provided `projectsArray` based on the given `filters` object.\r\n   * This function is used internally for the download functionality to ensure the\r\n   * downloaded CSV matches the currently visible, filtered data in the table.\r\n   * @param {Array} projectsArray - The array of project objects to filter.\r\n   * @param {Object} filters - An object where keys are column keys and values are filter criteria.\r\n   * @returns {Array} The array of projects that match all active filters.\r\n   */\r\n  const applyFilters = (projectsArray, filters) => {\r\n    return projectsArray.filter((project) => {\r\n      // Check if every active filter matches the current project\r\n      return Object.keys(filters).every((columnKey) => {\r\n        const filterValue = filters[columnKey];\r\n        // If no filter is applied for this column, or filterValue is null/undefined, it matches\r\n        if (filterValue === null || filterValue === undefined) {\r\n          return true;\r\n        }\r\n\r\n        const projectValue = project[columnKey];\r\n        // If project's value for this column is null/undefined, it cannot match a filter\r\n        if (projectValue === null || projectValue === undefined) {\r\n          return false;\r\n        }\r\n\r\n        // Special handling for 'revenue' column: compare formatted currency strings\r\n        if (columnKey === \"revenue\") {\r\n          return formatCurrency(project.revenue) === String(filterValue);\r\n        }\r\n\r\n        // For numeric columns, perform strict number equality comparison\r\n        if (\r\n          typeof projectValue === \"number\" &&\r\n          !Number.isNaN(Number(filterValue)) // Ensure filterValue can be converted to a number\r\n        ) {\r\n          return projectValue === Number(filterValue);\r\n        }\r\n\r\n        // For all other columns (strings), perform a case-insensitive string comparison\r\n        return (\r\n          String(projectValue).toLowerCase() ===\r\n          String(filterValue).toLowerCase()\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  // Effect to load Poppins font from Google Fonts for consistent styling\r\n  useEffect(() => {\r\n    const link = document.createElement(\"link\");\r\n    link.href =\r\n      \"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap\";\r\n    link.rel = \"stylesheet\";\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []); // Empty dependency array ensures this runs only once on mount\r\n\r\n  // Effect to fetch project data based on URL parameters and session storage.\r\n  // This hook also initializes state related to the current view (month, year, account, etc.).\r\n  useEffect(() => {\r\n    const fetchProjectData = async (month, year, accId, projectType) => {\r\n      setLoading(true); // Indicate that data is being loaded\r\n      setError(null); // Clear any previous errors\r\n\r\n      try {\r\n        const payload = { month, year, accId, projectType };\r\n        // Make a POST request to the backend API\r\n        const resp = await fetch(`${BACKEND_URL}/api/project`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(payload),\r\n        });\r\n\r\n        if (!resp.ok) {\r\n          // If response is not OK (e.g., 404, 500), throw an error\r\n          const errText = await resp.text();\r\n          throw new Error(\r\n            `status: ${resp.status}, message: ${errText || resp.statusText}`\r\n          );\r\n        }\r\n\r\n        const data = await resp.json();\r\n        // Ensure data is an array; if a single object, wrap it in an array\r\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\r\n        setProjects(list); // Update the projects state\r\n\r\n        // Attempt to set the account name from fetched data, otherwise use stored or URL ID\r\n        if (list.length > 0 && list[0].accountName) {\r\n          setActiveAccountName(list[0].accountName);\r\n        } else {\r\n          const storedName = sessionStorage.getItem(\r\n            \"lastFetchedProjectAccountName\"\r\n          );\r\n          setActiveAccountName(storedName || accId);\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error fetching project data:\", e);\r\n        setError(`Failed to load project data: ${e.message}`); // Set error message\r\n      } finally {\r\n        setLoading(false); // End loading state regardless of success or failure\r\n      }\r\n    };\r\n\r\n    // Determine the parameters to use for fetching data:\r\n    // Prioritize `location.state` (from navigation), then `sessionStorage`, then URL params.\r\n    let monthToUse = location.state?.month || sessionStorage.getItem(\"lastFetchedProjectMonth\");\r\n    let yearToUse = location.state?.year || sessionStorage.getItem(\"lastFetchedProjectYear\");\r\n    let accountIdToUse = urlAccountId || sessionStorage.getItem(\"lastFetchedProjectAccountId\");\r\n    let accountNameToUse = location.state?.accountName || sessionStorage.getItem(\"lastFetchedProjectAccountName\");\r\n    let sbuToUse = location.state?.sbu || sessionStorage.getItem(\"lastFetchedProjectSbu\");\r\n    let projectTypeToUse = location.state?.projectType || sessionStorage.getItem(\"lastFetchedProjectType\");\r\n\r\n    // Parse month and year to integers\r\n    monthToUse = monthToUse ? parseInt(monthToUse, 10) : null;\r\n    yearToUse = yearToUse ? parseInt(yearToUse, 10) : null;\r\n\r\n    // Proceed only if essential parameters are available\r\n    if (monthToUse && yearToUse && accountIdToUse) {\r\n      // Check if the current parameters differ from the active ones to avoid redundant fetches\r\n      if (\r\n        monthToUse !== activeMonth ||\r\n        yearToUse !== activeYear ||\r\n        accountIdToUse !== activeAccountId ||\r\n        sbuToUse !== activeSbu ||\r\n        projectTypeToUse !== activeProjectType\r\n      ) {\r\n        // Update active states\r\n        setActiveMonth(monthToUse);\r\n        setActiveYear(yearToUse);\r\n        setActiveAccountId(accountIdToUse);\r\n        if (accountNameToUse) {\r\n          setActiveAccountName(accountNameToUse);\r\n        }\r\n        setActiveSbu(sbuToUse);\r\n        setActiveProjectType(projectTypeToUse);\r\n\r\n        // Save current parameters to sessionStorage for persistence\r\n        sessionStorage.setItem(\"lastFetchedProjectMonth\", monthToUse.toString());\r\n        sessionStorage.setItem(\"lastFetchedProjectYear\", yearToUse.toString());\r\n        sessionStorage.setItem(\"lastFetchedProjectAccountId\", accountIdToUse);\r\n        if (accountNameToUse) {\r\n          sessionStorage.setItem(\"lastFetchedProjectAccountName\", accountNameToUse);\r\n        }\r\n        if (sbuToUse) {\r\n          sessionStorage.setItem(\"lastFetchedProjectSbu\", sbuToUse);\r\n        }\r\n        if (projectTypeToUse) {\r\n          sessionStorage.setItem(\"lastFetchedProjectType\", projectTypeToUse);\r\n        }\r\n\r\n        // Trigger the data fetch\r\n        fetchProjectData(monthToUse, yearToUse, accountIdToUse, projectTypeToUse);\r\n      } else {\r\n        // If parameters haven't changed, but data is already loaded, just set loading to false\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      // If essential parameters are missing, set an error\r\n      setError(\r\n        \"Missing month, year, or Account ID. Please navigate here with all parameters.\"\r\n      );\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    location.state,\r\n    urlAccountId,\r\n    activeMonth,\r\n    activeYear,\r\n    activeAccountId,\r\n    activeSbu,\r\n    activeProjectType,\r\n  ]); // Dependencies ensure this effect re-runs when relevant parameters change\r\n\r\n  // Effect to handle DataTables initialization and destruction.\r\n  // It runs when 'loading' or 'projects' state changes.\r\n  useEffect(() => {\r\n    // Only initialize if not loading, projects are available, and the table ref exists\r\n    if (!loading && projects.length > 0 && tableRef.current) {\r\n      const $tbl = $(tableRef.current);\r\n\r\n      // Destroy existing DataTable instance if it already exists to prevent re-initialization issues\r\n      if ($.fn.DataTable.isDataTable($tbl)) {\r\n        $tbl.DataTable().destroy();\r\n      }\r\n\r\n      // Initialize DataTable with desired options\r\n      const tableInstance = $tbl.DataTable({\r\n        paging: true,      // Enable pagination\r\n        searching: true,   // Enable global search bar\r\n        ordering: false,   // Disable default column ordering (handled by custom filtering)\r\n        info: true,        // Show table information (e.g., \"Showing 1 to 10 of X entries\")\r\n        autoWidth: false,  // Disable auto column width calculation for better responsiveness\r\n      });\r\n\r\n      // Store the DataTables instance on the ref for later access (e.g., for applying filters)\r\n      tableRef.current.dataTableInstance = tableInstance;\r\n    }\r\n\r\n    // Cleanup function: This runs when the component unmounts or when dependencies change,\r\n    // ensuring that the DataTable instance is properly destroyed to prevent memory leaks.\r\n    return () => {\r\n      if (tableRef.current && tableRef.current.dataTableInstance) {\r\n        tableRef.current.dataTableInstance.destroy(); // Destroy the DataTable instance\r\n        tableRef.current.dataTableInstance = null; // Clear the stored instance\r\n      }\r\n    };\r\n  }, [loading, projects]); // Dependencies: re-run when loading state or projects data changes\r\n\r\n  // NEW EFFECT: Persist column filters to sessionStorage whenever they change.\r\n  useEffect(() => {\r\n    // Save filters only if there's at least one filter applied, otherwise remove the key.\r\n    if (Object.keys(columnFilters).length > 0) {\r\n      sessionStorage.setItem(\"projectLevelFilters\", JSON.stringify(columnFilters));\r\n    } else {\r\n      sessionStorage.removeItem(\"projectLevelFilters\");\r\n    }\r\n  }, [columnFilters]); // This effect runs every time `columnFilters` state is updated\r\n\r\n  // Effect to apply filters using the DataTables API whenever columnFilters state changes.\r\n  useEffect(() => {\r\n    if (tableRef.current && tableRef.current.dataTableInstance) {\r\n      const tableInstance = tableRef.current.dataTableInstance;\r\n\r\n      // Clear all existing column-specific searches before applying new ones\r\n      tableInstance.columns().search(\"\");\r\n\r\n      // Define a mapping from column keys (used in state) to DataTables column indices\r\n      // This is crucial for DataTables' `.column(index).search()` method\r\n      const columnMapping = {\r\n        projectId: 0,\r\n        projectName: 1,\r\n        totalAssociatesCount: 2,\r\n        totalCompanyHours: 3,\r\n        totalClientHours: 4,\r\n        varianceHours: 5,\r\n        revenue: 6,\r\n      };\r\n\r\n      // Iterate over the current `columnFilters` and apply each filter to the corresponding DataTable column\r\n      Object.keys(columnFilters).forEach((columnKey) => {\r\n        const filterValue = columnFilters[columnKey];\r\n        if (filterValue !== null) { // Only apply filter if a value is selected (not \"All\")\r\n          const columnIndex = columnMapping[columnKey];\r\n          if (columnIndex !== undefined) {\r\n            // Escape special regex characters in the filter value to ensure exact match\r\n            const escapedValue = String(filterValue).replace(\r\n              /[.*+?^${}()|[\\]\\\\]/g,\r\n              \"\\\\$&\"\r\n            );\r\n            // Apply the column search: `^${escapedValue}$` ensures an exact match for the cell content\r\n            // The `true` argument enables regex search, `false` disables smart search\r\n            tableInstance\r\n              .column(columnIndex)\r\n              .search(`^${escapedValue}$`, true, false);\r\n          }\r\n        }\r\n      });\r\n\r\n      // Redraw the table to apply all the newly set filters\r\n      tableInstance.draw();\r\n    }\r\n  }, [columnFilters]); // This effect runs whenever the `columnFilters` state changes\r\n\r\n  // Define the breadcrumb navigation path dynamically\r\n  const breadcrumbPath = [\r\n    { name: \"PMO Dashboard\", page: \"\" },\r\n    { name: \"Revenue Forecast - Early View\", page: \"upload\" },\r\n    // Conditionally add SBU level if activeSbu is present\r\n    ...(activeSbu\r\n      ? [\r\n          {\r\n            name: `${activeSbu} SBU Level`,\r\n            page: \"sbu\",\r\n            state: { month: activeMonth, year: activeYear, sbu: activeSbu },\r\n          },\r\n        ]\r\n      : []),\r\n    {\r\n      name: \"Account Level\",\r\n      page: `accounts`,\r\n      state: { month: activeMonth, year: activeYear, sbu: activeSbu },\r\n    },\r\n    // Conditionally add Project Type level if activeProjectType is present\r\n    ...(activeProjectType\r\n      ? [\r\n          {\r\n            name: `${activeProjectType} Project Type`,\r\n            page: `accounts/${activeAccountId}/project-types`,\r\n            state: {\r\n              month: activeMonth,\r\n              year: activeYear,\r\n              sbu: activeSbu,\r\n              accId: activeAccountId,\r\n            },\r\n          },\r\n        ]\r\n      : []),\r\n    {\r\n      name: `Projects (${activeAccountName})`,\r\n      page: `accounts/${activeAccountId}/projects`,\r\n    },\r\n  ].filter(Boolean); // Filter out any null or undefined entries from the array\r\n\r\n  // Render loading state while data is being fetched\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\" />\r\n        <p className=\"ms-3 text-primary\">Loading Project Data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render error state if data fetching failed\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n        <button\r\n          className=\"btn btn-primary mt-3\"\r\n          onClick={() =>\r\n            // Provide a way to navigate back if an error occurs\r\n            navigate(\"/accounts\", {\r\n              state: { month: activeMonth, year: activeYear, sbu: activeSbu },\r\n            })\r\n          }\r\n        >\r\n          Go to Account Level\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main component render: displays the project data table\r\n  return (\r\n    <div\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n      style={{\r\n        background: \"linear-gradient(to bottom right, #f5f7fa, #e9ecef)\", // Gradient background\r\n        fontFamily: \"'Poppins', sans-serif\", // Apply Poppins font\r\n      }}\r\n    >\r\n      <div\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n        style={{\r\n          maxWidth: \"1200px\",\r\n          backgroundColor: \"#ffffffdd\", // Slightly transparent white card background\r\n          borderRadius: \"1rem\", // Rounded corners for the card\r\n        }}\r\n      >\r\n        {/* Breadcrumbs component for navigation hierarchy */}\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n          <h2 className=\"mb-0 fw-semibold text-dark\">\r\n            📁 Project Level Overview{\" \"}\r\n            {activeAccountId ? `for ${activeAccountName}` : \"\"}{\" \"}\r\n            {/* Display account name if available */}\r\n          </h2>\r\n          {/* Download button, visible only if projects data is loaded */}\r\n          {projects.length > 0 && (\r\n            <button\r\n              className=\"btn btn-outline-success rounded-pill px-3\"\r\n              onClick={handleDownloadData}\r\n              title=\"Download Project Data\"\r\n            >\r\n              <i className=\"bi bi-download me-2\"></i> Download Data\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Responsive table container for DataTables */}\r\n        <div className=\"table-responsive rounded\">\r\n          <table\r\n            ref={tableRef} // Attach ref to the table element\r\n            className=\"display table table-hover align-middle table-borderless mb-0\"\r\n            style={{ width: \"100%\" }}\r\n          >\r\n            <thead\r\n              className=\"text-white\"\r\n              style={{\r\n                background: \"linear-gradient(to right, #3b82f6, #2563eb)\", // Blue gradient for table header\r\n              }}\r\n            >\r\n              <tr>\r\n                {/* Each table header now includes a filter dropdown for its column */}\r\n                <th>\r\n                  Project ID\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"projectId\", e.target.value)\r\n                    }\r\n                    value={columnFilters.projectId || \"All\"} // Controlled component: value reflects state\r\n                  >\r\n                    {getUniqueOptions(\"projectId\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Project Name\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"projectName\", e.target.value)\r\n                    }\r\n                    value={columnFilters.projectName || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"projectName\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Total Associates\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"totalAssociatesCount\", e.target.value)\r\n                    }\r\n                    value={columnFilters.totalAssociatesCount || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"totalAssociatesCount\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Company Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"totalCompanyHours\", e.target.value)\r\n                    }\r\n                    value={columnFilters.totalCompanyHours || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"totalCompanyHours\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Client Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"totalClientHours\", e.target.value)\r\n                    }\r\n                    value={columnFilters.totalClientHours || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"totalClientHours\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Variance Hours\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"varianceHours\", e.target.value)\r\n                    }\r\n                    value={columnFilters.varianceHours || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"varianceHours\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th>\r\n                  Revenue\r\n                  <select\r\n                    className=\"form-select form-select-sm mt-1\"\r\n                    onChange={(e) =>\r\n                      handleFilterChange(\"revenue\", e.target.value)\r\n                    }\r\n                    value={columnFilters.revenue || \"All\"}\r\n                  >\r\n                    {getUniqueOptions(\"revenue\").map((option) => (\r\n                      <option key={option} value={option}>\r\n                        {option}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </th>\r\n                <th className=\"text-center\">View</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {/* Render project rows. DataTables will automatically handle filtering and pagination. */}\r\n              {projects.map((project) => (\r\n                <tr key={project.projectId}>\r\n                  <td>{project.projectId}</td>\r\n                  <td>{project.projectName}</td>\r\n                  <td>{project.totalAssociatesCount}</td>\r\n                  <td>{project.totalCompanyHours}</td>\r\n                  <td>{project.totalClientHours}</td>\r\n                  <td>{project.varianceHours}</td>\r\n                  <td>{formatCurrency(project.revenue)}</td>\r\n                  <td className=\"text-center\">\r\n                    <button\r\n                      className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n                      onClick={() =>\r\n                        // Navigate to the Associates level with relevant state\r\n                        navigate(`/projects/${project.projectId}/associates`, {\r\n                          state: {\r\n                            projectId: project.projectId,\r\n                            projectName: project.projectName,\r\n                            accountId: project.accountId,\r\n                            accountName: project.accountName,\r\n                            month: activeMonth,\r\n                            year: activeYear,\r\n                            sbu: activeSbu,\r\n                            projectType: activeProjectType,\r\n                          },\r\n                        })\r\n                      }\r\n                      title=\"View Associates\"\r\n                    >\r\n                      🔍 {/* Magnifying glass icon */}\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectLevel;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACtE,OAAOC,CAAC,MAAM,QAAQ;AACtB,OAAO,gBAAgB;AACvB,OAAO,qDAAqD;AAC5D;AACA,OAAOC,WAAW,MAAM,gBAAgB;AACxC,OAAOC,UAAU,MAAM,4BAA4B,CAAC,CAAC;;AAErD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAG,uBAAuB,CAAC,CAAC;;AAE7C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;EACA,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEY,SAAS,EAAEC;EAAa,CAAC,GAAGZ,SAAS,CAAC,CAAC;EAC/C,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMa,QAAQ,GAAGlB,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACA,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC2B,eAAe,EAAEC,kBAAkB,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAAC6B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG9B,QAAQ,CAAC,YAAY,CAAC;EACxE,MAAM,CAAC+B,SAAS,EAAEC,YAAY,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACiC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;;EAEhE;EACA,MAAM,CAACmC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpC,QAAQ,CAAC,MAAM;IACvD,IAAI;MACF,MAAMqC,YAAY,GAAGC,cAAc,CAACC,OAAO,CAAC,qBAAqB,CAAC;MAClE,OAAOF,YAAY,GAAGG,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,GAAG,CAAC,CAAC;IACrD,CAAC,CAAC,OAAOK,CAAC,EAAE;MACVC,OAAO,CAACtB,KAAK,CAAC,oDAAoD,EAAEqB,CAAC,CAAC;MACtE,OAAO,CAAC,CAAC,CAAC,CAAC;IACb;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,MAAME,cAAc,GAAGA,CAACC,KAAK,GAAG,CAAC,KAC/BA,KAAK,CAACC,cAAc,CAACxC,UAAU,CAACyC,gBAAgB,CAACC,MAAM,EAAE;IACvDC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE5C,UAAU,CAACyC,gBAAgB,CAACG,QAAQ;IAC9CC,qBAAqB,EAAE7C,UAAU,CAACyC,gBAAgB,CAACI,qBAAqB;IACxEC,qBAAqB,EAAE9C,UAAU,CAACyC,gBAAgB,CAACK;EACrD,CAAC,CAAC;;EAEJ;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,YAAY,GAAIC,WAAW,IAAK;IACpC,IAAI,CAACA,WAAW,EAAE,OAAO,EAAE;IAC3B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;IACvBD,IAAI,CAACE,QAAQ,CAACH,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IAChC,OAAOC,IAAI,CAACT,cAAc,CAAC,OAAO,EAAE;MAAEY,KAAK,EAAE;IAAO,CAAC,CAAC;EACxD,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI1C,QAAQ,CAAC2C,MAAM,KAAK,CAAC,EAAE;MACzBjB,OAAO,CAACkB,GAAG,CAAC,sBAAsB,CAAC;MACnC;IACF;;IAEA;IACA,MAAMC,OAAO,GAAG,CACd,YAAY,EACZ,cAAc,EACd,kBAAkB,EAClB,eAAe,EACf,cAAc,EACd,gBAAgB,EAChB,SAAS,CACV;;IAED;IACA;IACA,MAAMC,OAAO,GAAGC,YAAY,CAAC/C,QAAQ,EAAEkB,aAAa,CAAC,CAAC8B,GAAG,CAAEC,OAAO,IAAK;MACrE,OAAO,CACL,IAAIA,OAAO,CAACC,SAAS,GAAG;MAAE;MAC1B,IAAID,OAAO,CAACE,WAAW,GAAG,EAC1BF,OAAO,CAACG,oBAAoB,EAC5BH,OAAO,CAACI,iBAAiB,EACzBJ,OAAO,CAACK,gBAAgB,EACxBL,OAAO,CAACM,aAAa,EACrB,IAAI5B,cAAc,CAACsB,OAAO,CAACO,OAAO,CAAC,GAAG,CAAE;MAAA,CACzC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACf,CAAC,CAAC;;IAEF;IACA,MAAMC,UAAU,GAAG,CAACb,OAAO,CAACY,IAAI,CAAC,GAAG,CAAC,EAAE,GAAGX,OAAO,CAAC,CAACW,IAAI,CAAC,IAAI,CAAC;;IAE7D;IACA,MAAME,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,UAAU,CAAC,EAAE;MAAEG,IAAI,EAAE;IAA0B,CAAC,CAAC;IACxE,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxC,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACR,IAAI,CAAC;IACrC,MAAMS,SAAS,GAAGhC,YAAY,CAAC9B,WAAW,CAAC;IAC3C,MAAM+D,QAAQ,GAAG,oBAAoB3D,eAAe,IAAI0D,SAAS,IAAI5D,UAAU,MAAM,CAAC,CAAC;;IAEvFsD,IAAI,CAACQ,YAAY,CAAC,MAAM,EAAEL,GAAG,CAAC;IAC9BH,IAAI,CAACQ,YAAY,CAAC,UAAU,EAAED,QAAQ,CAAC;IACvCP,IAAI,CAAC9B,KAAK,CAACuC,UAAU,GAAG,QAAQ,CAAC,CAAC;IAClCR,QAAQ,CAACS,IAAI,CAACC,WAAW,CAACX,IAAI,CAAC,CAAC,CAAC;IACjCA,IAAI,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC;IACdX,QAAQ,CAACS,IAAI,CAACG,WAAW,CAACb,IAAI,CAAC,CAAC,CAAC;IACjCI,GAAG,CAACU,eAAe,CAACX,GAAG,CAAC,CAAC,CAAC;EAC5B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,MAAMY,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA,IAAI,CAAC9E,QAAQ,IAAI,CAAC+E,KAAK,CAACC,OAAO,CAAChF,QAAQ,CAAC,IAAIA,QAAQ,CAAC2C,MAAM,KAAK,CAAC,EAAE;MAClE,OAAO,CAAC,KAAK,CAAC;IAChB;;IAEA;IACA,MAAMsC,OAAO,GAAGjF,QAAQ,CAACgD,GAAG,CAAEC,OAAO,IAAK;MACxC,MAAMrB,KAAK,GAAGqB,OAAO,CAAC6B,SAAS,CAAC;MAChC,IAAIA,SAAS,KAAK,SAAS,EAAE;QAC3B;QACA,OAAOnD,cAAc,CAACC,KAAK,CAAC;MAC9B;MACA,OAAOsD,MAAM,CAACtD,KAAK,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC;;IAEF;IACA,MAAMuD,aAAa,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACH,OAAO,CAAC,CAAC,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACzD;MACA,MAAMC,eAAe,GACnBV,SAAS,KAAK,sBAAsB,IACpCA,SAAS,KAAK,mBAAmB,IACjCA,SAAS,KAAK,kBAAkB,IAChCA,SAAS,KAAK,eAAe;MAE/B,IAAIU,eAAe,EAAE;QACnB;QACA,OAAOC,MAAM,CAACH,CAAC,CAAC,GAAGG,MAAM,CAACF,CAAC,CAAC;MAC9B;MACA;MACA,OAAOD,CAAC,CAACI,aAAa,CAACH,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO,CAAC,KAAK,EAAE,GAAGJ,aAAa,CAAC,CAAC,CAAC;EACpC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,MAAMQ,kBAAkB,GAAGA,CAACb,SAAS,EAAElD,KAAK,KAAK;IAC/CT,gBAAgB,CAAEyE,WAAW,KAAM;MACjC,GAAGA,WAAW;MACd,CAACd,SAAS,GAAGlD,KAAK,KAAK,KAAK,GAAG,IAAI,GAAGA,KAAK,CAAE;IAC/C,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMmB,YAAY,GAAGA,CAAC8C,aAAa,EAAEC,OAAO,KAAK;IAC/C,OAAOD,aAAa,CAACE,MAAM,CAAE9C,OAAO,IAAK;MACvC;MACA,OAAO+C,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,KAAK,CAAEpB,SAAS,IAAK;QAC/C,MAAMqB,WAAW,GAAGL,OAAO,CAAChB,SAAS,CAAC;QACtC;QACA,IAAIqB,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAKC,SAAS,EAAE;UACrD,OAAO,IAAI;QACb;QAEA,MAAMC,YAAY,GAAGpD,OAAO,CAAC6B,SAAS,CAAC;QACvC;QACA,IAAIuB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAKD,SAAS,EAAE;UACvD,OAAO,KAAK;QACd;;QAEA;QACA,IAAItB,SAAS,KAAK,SAAS,EAAE;UAC3B,OAAOnD,cAAc,CAACsB,OAAO,CAACO,OAAO,CAAC,KAAK0B,MAAM,CAACiB,WAAW,CAAC;QAChE;;QAEA;QACA,IACE,OAAOE,YAAY,KAAK,QAAQ,IAChC,CAACZ,MAAM,CAACa,KAAK,CAACb,MAAM,CAACU,WAAW,CAAC,CAAC,CAAC;QAAA,EACnC;UACA,OAAOE,YAAY,KAAKZ,MAAM,CAACU,WAAW,CAAC;QAC7C;;QAEA;QACA,OACEjB,MAAM,CAACmB,YAAY,CAAC,CAACE,WAAW,CAAC,CAAC,KAClCrB,MAAM,CAACiB,WAAW,CAAC,CAACI,WAAW,CAAC,CAAC;MAErC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;;EAED;EACAzH,SAAS,CAAC,MAAM;IACd,MAAMgF,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IAC3CF,IAAI,CAAC0C,IAAI,GACP,gFAAgF;IAClF1C,IAAI,CAAC2C,GAAG,GAAG,YAAY;IACvB1C,QAAQ,CAAC2C,IAAI,CAACjC,WAAW,CAACX,IAAI,CAAC;IAC/BC,QAAQ,CAACS,IAAI,CAACxC,KAAK,CAAC2E,UAAU,GAAG,uBAAuB;EAC1D,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA;EACA7H,SAAS,CAAC,MAAM;IAAA,IAAA8H,eAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,gBAAA;IACd,MAAMC,gBAAgB,GAAG,MAAAA,CAAOxE,KAAK,EAAEyE,IAAI,EAAEC,KAAK,EAAEC,WAAW,KAAK;MAClEjH,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;MAEhB,IAAI;QACF,MAAMgH,OAAO,GAAG;UAAE5E,KAAK;UAAEyE,IAAI;UAAEC,KAAK;UAAEC;QAAY,CAAC;QACnD;QACA,MAAME,IAAI,GAAG,MAAMC,KAAK,CAAC,GAAG/H,WAAW,cAAc,EAAE;UACrDgI,MAAM,EAAE,MAAM;UACd3E,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/C2B,IAAI,EAAEjD,IAAI,CAACkG,SAAS,CAACJ,OAAO;QAC9B,CAAC,CAAC;QAEF,IAAI,CAACC,IAAI,CAACI,EAAE,EAAE;UACZ;UACA,MAAMC,OAAO,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;UACjC,MAAM,IAAIC,KAAK,CACb,WAAWP,IAAI,CAACQ,MAAM,cAAcH,OAAO,IAAIL,IAAI,CAACS,UAAU,EAChE,CAAC;QACH;QAEA,MAAMC,IAAI,GAAG,MAAMV,IAAI,CAACW,IAAI,CAAC,CAAC;QAC9B;QACA,MAAMC,IAAI,GAAGnD,KAAK,CAACC,OAAO,CAACgD,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC,CAACjC,MAAM,CAACoC,OAAO,CAAC;QAChElI,WAAW,CAACiI,IAAI,CAAC,CAAC,CAAC;;QAEnB;QACA,IAAIA,IAAI,CAACvF,MAAM,GAAG,CAAC,IAAIuF,IAAI,CAAC,CAAC,CAAC,CAACE,WAAW,EAAE;UAC1CvH,oBAAoB,CAACqH,IAAI,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC;QAC3C,CAAC,MAAM;UACL,MAAMC,UAAU,GAAGhH,cAAc,CAACC,OAAO,CACvC,+BACF,CAAC;UACDT,oBAAoB,CAACwH,UAAU,IAAIlB,KAAK,CAAC;QAC3C;MACF,CAAC,CAAC,OAAO1F,CAAC,EAAE;QACVC,OAAO,CAACtB,KAAK,CAAC,8BAA8B,EAAEqB,CAAC,CAAC;QAChDpB,QAAQ,CAAC,gCAAgCoB,CAAC,CAAC6G,OAAO,EAAE,CAAC,CAAC,CAAC;MACzD,CAAC,SAAS;QACRnI,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;;IAED;IACA;IACA,IAAIoI,UAAU,GAAG,EAAA3B,eAAA,GAAA9G,QAAQ,CAAC0I,KAAK,cAAA5B,eAAA,uBAAdA,eAAA,CAAgBnE,KAAK,KAAIpB,cAAc,CAACC,OAAO,CAAC,yBAAyB,CAAC;IAC3F,IAAImH,SAAS,GAAG,EAAA5B,gBAAA,GAAA/G,QAAQ,CAAC0I,KAAK,cAAA3B,gBAAA,uBAAdA,gBAAA,CAAgBK,IAAI,KAAI7F,cAAc,CAACC,OAAO,CAAC,wBAAwB,CAAC;IACxF,IAAIoH,cAAc,GAAG7I,YAAY,IAAIwB,cAAc,CAACC,OAAO,CAAC,6BAA6B,CAAC;IAC1F,IAAIqH,gBAAgB,GAAG,EAAA7B,gBAAA,GAAAhH,QAAQ,CAAC0I,KAAK,cAAA1B,gBAAA,uBAAdA,gBAAA,CAAgBsB,WAAW,KAAI/G,cAAc,CAACC,OAAO,CAAC,+BAA+B,CAAC;IAC7G,IAAIsH,QAAQ,GAAG,EAAA7B,gBAAA,GAAAjH,QAAQ,CAAC0I,KAAK,cAAAzB,gBAAA,uBAAdA,gBAAA,CAAgB8B,GAAG,KAAIxH,cAAc,CAACC,OAAO,CAAC,uBAAuB,CAAC;IACrF,IAAIwH,gBAAgB,GAAG,EAAA9B,gBAAA,GAAAlH,QAAQ,CAAC0I,KAAK,cAAAxB,gBAAA,uBAAdA,gBAAA,CAAgBI,WAAW,KAAI/F,cAAc,CAACC,OAAO,CAAC,wBAAwB,CAAC;;IAEtG;IACAiH,UAAU,GAAGA,UAAU,GAAGQ,QAAQ,CAACR,UAAU,EAAE,EAAE,CAAC,GAAG,IAAI;IACzDE,SAAS,GAAGA,SAAS,GAAGM,QAAQ,CAACN,SAAS,EAAE,EAAE,CAAC,GAAG,IAAI;;IAEtD;IACA,IAAIF,UAAU,IAAIE,SAAS,IAAIC,cAAc,EAAE;MAC7C;MACA,IACEH,UAAU,KAAKjI,WAAW,IAC1BmI,SAAS,KAAKjI,UAAU,IACxBkI,cAAc,KAAKhI,eAAe,IAClCkI,QAAQ,KAAK9H,SAAS,IACtBgI,gBAAgB,KAAK9H,iBAAiB,EACtC;QACA;QACAT,cAAc,CAACgI,UAAU,CAAC;QAC1B9H,aAAa,CAACgI,SAAS,CAAC;QACxB9H,kBAAkB,CAAC+H,cAAc,CAAC;QAClC,IAAIC,gBAAgB,EAAE;UACpB9H,oBAAoB,CAAC8H,gBAAgB,CAAC;QACxC;QACA5H,YAAY,CAAC6H,QAAQ,CAAC;QACtB3H,oBAAoB,CAAC6H,gBAAgB,CAAC;;QAEtC;QACAzH,cAAc,CAAC2H,OAAO,CAAC,yBAAyB,EAAET,UAAU,CAACU,QAAQ,CAAC,CAAC,CAAC;QACxE5H,cAAc,CAAC2H,OAAO,CAAC,wBAAwB,EAAEP,SAAS,CAACQ,QAAQ,CAAC,CAAC,CAAC;QACtE5H,cAAc,CAAC2H,OAAO,CAAC,6BAA6B,EAAEN,cAAc,CAAC;QACrE,IAAIC,gBAAgB,EAAE;UACpBtH,cAAc,CAAC2H,OAAO,CAAC,+BAA+B,EAAEL,gBAAgB,CAAC;QAC3E;QACA,IAAIC,QAAQ,EAAE;UACZvH,cAAc,CAAC2H,OAAO,CAAC,uBAAuB,EAAEJ,QAAQ,CAAC;QAC3D;QACA,IAAIE,gBAAgB,EAAE;UACpBzH,cAAc,CAAC2H,OAAO,CAAC,wBAAwB,EAAEF,gBAAgB,CAAC;QACpE;;QAEA;QACA7B,gBAAgB,CAACsB,UAAU,EAAEE,SAAS,EAAEC,cAAc,EAAEI,gBAAgB,CAAC;MAC3E,CAAC,MAAM;QACL;QACA3I,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,MAAM;MACL;MACAE,QAAQ,CACN,+EACF,CAAC;MACDF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CACDL,QAAQ,CAAC0I,KAAK,EACd3I,YAAY,EACZS,WAAW,EACXE,UAAU,EACVE,eAAe,EACfI,SAAS,EACTE,iBAAiB,CAClB,CAAC,CAAC,CAAC;;EAEJ;EACA;EACAlC,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACoB,OAAO,IAAIF,QAAQ,CAAC2C,MAAM,GAAG,CAAC,IAAI5C,QAAQ,CAACmJ,OAAO,EAAE;MACvD,MAAMC,IAAI,GAAGhK,CAAC,CAACY,QAAQ,CAACmJ,OAAO,CAAC;;MAEhC;MACA,IAAI/J,CAAC,CAACiK,EAAE,CAACC,SAAS,CAACC,WAAW,CAACH,IAAI,CAAC,EAAE;QACpCA,IAAI,CAACE,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAAC;MAC5B;;MAEA;MACA,MAAMC,aAAa,GAAGL,IAAI,CAACE,SAAS,CAAC;QACnCI,MAAM,EAAE,IAAI;QAAO;QACnBC,SAAS,EAAE,IAAI;QAAI;QACnBC,QAAQ,EAAE,KAAK;QAAI;QACnBC,IAAI,EAAE,IAAI;QAAS;QACnBC,SAAS,EAAE,KAAK,CAAG;MACrB,CAAC,CAAC;;MAEF;MACA9J,QAAQ,CAACmJ,OAAO,CAACY,iBAAiB,GAAGN,aAAa;IACpD;;IAEA;IACA;IACA,OAAO,MAAM;MACX,IAAIzJ,QAAQ,CAACmJ,OAAO,IAAInJ,QAAQ,CAACmJ,OAAO,CAACY,iBAAiB,EAAE;QAC1D/J,QAAQ,CAACmJ,OAAO,CAACY,iBAAiB,CAACP,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9CxJ,QAAQ,CAACmJ,OAAO,CAACY,iBAAiB,GAAG,IAAI,CAAC,CAAC;MAC7C;IACF,CAAC;EACH,CAAC,EAAE,CAAC5J,OAAO,EAAEF,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEzB;EACAlB,SAAS,CAAC,MAAM;IACd;IACA,IAAIkH,MAAM,CAACC,IAAI,CAAC/E,aAAa,CAAC,CAACyB,MAAM,GAAG,CAAC,EAAE;MACzCtB,cAAc,CAAC2H,OAAO,CAAC,qBAAqB,EAAEzH,IAAI,CAACkG,SAAS,CAACvG,aAAa,CAAC,CAAC;IAC9E,CAAC,MAAM;MACLG,cAAc,CAAC0I,UAAU,CAAC,qBAAqB,CAAC;IAClD;EACF,CAAC,EAAE,CAAC7I,aAAa,CAAC,CAAC,CAAC,CAAC;;EAErB;EACApC,SAAS,CAAC,MAAM;IACd,IAAIiB,QAAQ,CAACmJ,OAAO,IAAInJ,QAAQ,CAACmJ,OAAO,CAACY,iBAAiB,EAAE;MAC1D,MAAMN,aAAa,GAAGzJ,QAAQ,CAACmJ,OAAO,CAACY,iBAAiB;;MAExD;MACAN,aAAa,CAACQ,OAAO,CAAC,CAAC,CAACC,MAAM,CAAC,EAAE,CAAC;;MAElC;MACA;MACA,MAAMC,aAAa,GAAG;QACpBhH,SAAS,EAAE,CAAC;QACZC,WAAW,EAAE,CAAC;QACdC,oBAAoB,EAAE,CAAC;QACvBC,iBAAiB,EAAE,CAAC;QACpBC,gBAAgB,EAAE,CAAC;QACnBC,aAAa,EAAE,CAAC;QAChBC,OAAO,EAAE;MACX,CAAC;;MAED;MACAwC,MAAM,CAACC,IAAI,CAAC/E,aAAa,CAAC,CAACiJ,OAAO,CAAErF,SAAS,IAAK;QAChD,MAAMqB,WAAW,GAAGjF,aAAa,CAAC4D,SAAS,CAAC;QAC5C,IAAIqB,WAAW,KAAK,IAAI,EAAE;UAAE;UAC1B,MAAMiE,WAAW,GAAGF,aAAa,CAACpF,SAAS,CAAC;UAC5C,IAAIsF,WAAW,KAAKhE,SAAS,EAAE;YAC7B;YACA,MAAMiE,YAAY,GAAGnF,MAAM,CAACiB,WAAW,CAAC,CAACmE,OAAO,CAC9C,qBAAqB,EACrB,MACF,CAAC;YACD;YACA;YACAd,aAAa,CACVe,MAAM,CAACH,WAAW,CAAC,CACnBH,MAAM,CAAC,IAAII,YAAY,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC;UAC7C;QACF;MACF,CAAC,CAAC;;MAEF;MACAb,aAAa,CAACgB,IAAI,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACtJ,aAAa,CAAC,CAAC,CAAC,CAAC;;EAErB;EACA,MAAMuJ,cAAc,GAAG,CACrB;IAAEC,IAAI,EAAE,eAAe;IAAEC,IAAI,EAAE;EAAG,CAAC,EACnC;IAAED,IAAI,EAAE,+BAA+B;IAAEC,IAAI,EAAE;EAAS,CAAC;EACzD;EACA,IAAI7J,SAAS,GACT,CACE;IACE4J,IAAI,EAAE,GAAG5J,SAAS,YAAY;IAC9B6J,IAAI,EAAE,KAAK;IACXnC,KAAK,EAAE;MAAE/F,KAAK,EAAEnC,WAAW;MAAE4G,IAAI,EAAE1G,UAAU;MAAEqI,GAAG,EAAE/H;IAAU;EAChE,CAAC,CACF,GACD,EAAE,CAAC,EACP;IACE4J,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE,UAAU;IAChBnC,KAAK,EAAE;MAAE/F,KAAK,EAAEnC,WAAW;MAAE4G,IAAI,EAAE1G,UAAU;MAAEqI,GAAG,EAAE/H;IAAU;EAChE,CAAC;EACD;EACA,IAAIE,iBAAiB,GACjB,CACE;IACE0J,IAAI,EAAE,GAAG1J,iBAAiB,eAAe;IACzC2J,IAAI,EAAE,YAAYjK,eAAe,gBAAgB;IACjD8H,KAAK,EAAE;MACL/F,KAAK,EAAEnC,WAAW;MAClB4G,IAAI,EAAE1G,UAAU;MAChBqI,GAAG,EAAE/H,SAAS;MACdqG,KAAK,EAAEzG;IACT;EACF,CAAC,CACF,GACD,EAAE,CAAC,EACP;IACEgK,IAAI,EAAE,aAAa9J,iBAAiB,GAAG;IACvC+J,IAAI,EAAE,YAAYjK,eAAe;EACnC,CAAC,CACF,CAACqF,MAAM,CAACoC,OAAO,CAAC,CAAC,CAAC;;EAEnB;EACA,IAAIjI,OAAO,EAAE;IACX,oBACEX,OAAA;MAAKqL,SAAS,EAAC,6DAA6D;MAAAC,QAAA,gBAC1EtL,OAAA;QAAKqL,SAAS,EAAC,6BAA6B;QAACE,IAAI,EAAC;MAAQ;QAAAzG,QAAA,EAAA0G,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7D1L,OAAA;QAAGqL,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAC;MAAuB;QAAAxG,QAAA,EAAA0G,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAA5G,QAAA,EAAA0G,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD,CAAC;EAEV;;EAEA;EACA,IAAI7K,KAAK,EAAE;IACT,oBACEb,OAAA;MAAKqL,SAAS,EAAC,qFAAqF;MAAAC,QAAA,gBAClGtL,OAAA;QAAGqL,SAAS,EAAC,MAAM;QAAAC,QAAA,GAAC,SAAO,EAACzK,KAAK;MAAA;QAAAiE,QAAA,EAAA0G,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtC1L,OAAA;QACEqL,SAAS,EAAC,sBAAsB;QAChCM,OAAO,EAAEA,CAAA;QACP;QACAvL,QAAQ,CAAC,WAAW,EAAE;UACpB6I,KAAK,EAAE;YAAE/F,KAAK,EAAEnC,WAAW;YAAE4G,IAAI,EAAE1G,UAAU;YAAEqI,GAAG,EAAE/H;UAAU;QAChE,CAAC,CACF;QAAA+J,QAAA,EACF;MAED;QAAAxG,QAAA,EAAA0G,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAA5G,QAAA,EAAA0G,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEV;;EAEA;EACA,oBACE1L,OAAA;IACEqL,SAAS,EAAC,4DAA4D;IACtE5I,KAAK,EAAE;MACLmJ,UAAU,EAAE,oDAAoD;MAAE;MAClExE,UAAU,EAAE,uBAAuB,CAAE;IACvC,CAAE;IAAAkE,QAAA,eAEFtL,OAAA;MACEqL,SAAS,EAAC,8BAA8B;MACxC5I,KAAK,EAAE;QACLoJ,QAAQ,EAAE,QAAQ;QAClBC,eAAe,EAAE,WAAW;QAAE;QAC9BC,YAAY,EAAE,MAAM,CAAE;MACxB,CAAE;MAAAT,QAAA,gBAGFtL,OAAA,CAACH,WAAW;QAACmM,IAAI,EAAEd;MAAe;QAAApG,QAAA,EAAA0G,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAErC1L,OAAA;QAAKqL,SAAS,EAAC,wDAAwD;QAAAC,QAAA,gBACrEtL,OAAA;UAAIqL,SAAS,EAAC,4BAA4B;UAAAC,QAAA,GAAC,qCAChB,EAAC,GAAG,EAC5BnK,eAAe,GAAG,OAAOE,iBAAiB,EAAE,GAAG,EAAE,EAAE,GAAG;QAAA;UAAAyD,QAAA,EAAA0G,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAErD,CAAC,EAEJjL,QAAQ,CAAC2C,MAAM,GAAG,CAAC,iBAClBpD,OAAA;UACEqL,SAAS,EAAC,2CAA2C;UACrDM,OAAO,EAAExI,kBAAmB;UAC5B8I,KAAK,EAAC,uBAAuB;UAAAX,QAAA,gBAE7BtL,OAAA;YAAGqL,SAAS,EAAC;UAAqB;YAAAvG,QAAA,EAAA0G,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,kBACzC;QAAA;UAAA5G,QAAA,EAAA0G,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT;MAAA;QAAA5G,QAAA,EAAA0G,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGN1L,OAAA;QAAKqL,SAAS,EAAC,0BAA0B;QAAAC,QAAA,eACvCtL,OAAA;UACEkM,GAAG,EAAE1L,QAAS,CAAC;UAAA;UACf6K,SAAS,EAAC,8DAA8D;UACxE5I,KAAK,EAAE;YAAE0J,KAAK,EAAE;UAAO,CAAE;UAAAb,QAAA,gBAEzBtL,OAAA;YACEqL,SAAS,EAAC,YAAY;YACtB5I,KAAK,EAAE;cACLmJ,UAAU,EAAE,6CAA6C,CAAE;YAC7D,CAAE;YAAAN,QAAA,eAEFtL,OAAA;cAAAsL,QAAA,gBAEEtL,OAAA;gBAAAsL,QAAA,GAAI,YAEF,eAAAtL,OAAA;kBACEqL,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAGlK,CAAC,IACVkE,kBAAkB,CAAC,WAAW,EAAElE,CAAC,CAACmK,MAAM,CAAChK,KAAK,CAC/C;kBACDA,KAAK,EAAEV,aAAa,CAACgC,SAAS,IAAI,KAAM,CAAC;kBAAA;kBAAA2H,QAAA,EAExChG,gBAAgB,CAAC,WAAW,CAAC,CAAC7B,GAAG,CAAE6I,MAAM,iBACxCtM,OAAA;oBAAqBqC,KAAK,EAAEiK,MAAO;oBAAAhB,QAAA,EAChCgB;kBAAM,GADIA,MAAM;oBAAAxH,QAAA,EAAA0G,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAEX,CACT;gBAAC;kBAAA5G,QAAA,EAAA0G,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAA5G,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL1L,OAAA;gBAAAsL,QAAA,GAAI,cAEF,eAAAtL,OAAA;kBACEqL,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAGlK,CAAC,IACVkE,kBAAkB,CAAC,aAAa,EAAElE,CAAC,CAACmK,MAAM,CAAChK,KAAK,CACjD;kBACDA,KAAK,EAAEV,aAAa,CAACiC,WAAW,IAAI,KAAM;kBAAA0H,QAAA,EAEzChG,gBAAgB,CAAC,aAAa,CAAC,CAAC7B,GAAG,CAAE6I,MAAM,iBAC1CtM,OAAA;oBAAqBqC,KAAK,EAAEiK,MAAO;oBAAAhB,QAAA,EAChCgB;kBAAM,GADIA,MAAM;oBAAAxH,QAAA,EAAA0G,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAEX,CACT;gBAAC;kBAAA5G,QAAA,EAAA0G,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAA5G,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL1L,OAAA;gBAAAsL,QAAA,GAAI,kBAEF,eAAAtL,OAAA;kBACEqL,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAGlK,CAAC,IACVkE,kBAAkB,CAAC,sBAAsB,EAAElE,CAAC,CAACmK,MAAM,CAAChK,KAAK,CAC1D;kBACDA,KAAK,EAAEV,aAAa,CAACkC,oBAAoB,IAAI,KAAM;kBAAAyH,QAAA,EAElDhG,gBAAgB,CAAC,sBAAsB,CAAC,CAAC7B,GAAG,CAAE6I,MAAM,iBACnDtM,OAAA;oBAAqBqC,KAAK,EAAEiK,MAAO;oBAAAhB,QAAA,EAChCgB;kBAAM,GADIA,MAAM;oBAAAxH,QAAA,EAAA0G,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAEX,CACT;gBAAC;kBAAA5G,QAAA,EAAA0G,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAA5G,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL1L,OAAA;gBAAAsL,QAAA,GAAI,eAEF,eAAAtL,OAAA;kBACEqL,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAGlK,CAAC,IACVkE,kBAAkB,CAAC,mBAAmB,EAAElE,CAAC,CAACmK,MAAM,CAAChK,KAAK,CACvD;kBACDA,KAAK,EAAEV,aAAa,CAACmC,iBAAiB,IAAI,KAAM;kBAAAwH,QAAA,EAE/ChG,gBAAgB,CAAC,mBAAmB,CAAC,CAAC7B,GAAG,CAAE6I,MAAM,iBAChDtM,OAAA;oBAAqBqC,KAAK,EAAEiK,MAAO;oBAAAhB,QAAA,EAChCgB;kBAAM,GADIA,MAAM;oBAAAxH,QAAA,EAAA0G,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAEX,CACT;gBAAC;kBAAA5G,QAAA,EAAA0G,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAA5G,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL1L,OAAA;gBAAAsL,QAAA,GAAI,cAEF,eAAAtL,OAAA;kBACEqL,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAGlK,CAAC,IACVkE,kBAAkB,CAAC,kBAAkB,EAAElE,CAAC,CAACmK,MAAM,CAAChK,KAAK,CACtD;kBACDA,KAAK,EAAEV,aAAa,CAACoC,gBAAgB,IAAI,KAAM;kBAAAuH,QAAA,EAE9ChG,gBAAgB,CAAC,kBAAkB,CAAC,CAAC7B,GAAG,CAAE6I,MAAM,iBAC/CtM,OAAA;oBAAqBqC,KAAK,EAAEiK,MAAO;oBAAAhB,QAAA,EAChCgB;kBAAM,GADIA,MAAM;oBAAAxH,QAAA,EAAA0G,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAEX,CACT;gBAAC;kBAAA5G,QAAA,EAAA0G,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAA5G,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL1L,OAAA;gBAAAsL,QAAA,GAAI,gBAEF,eAAAtL,OAAA;kBACEqL,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAGlK,CAAC,IACVkE,kBAAkB,CAAC,eAAe,EAAElE,CAAC,CAACmK,MAAM,CAAChK,KAAK,CACnD;kBACDA,KAAK,EAAEV,aAAa,CAACqC,aAAa,IAAI,KAAM;kBAAAsH,QAAA,EAE3ChG,gBAAgB,CAAC,eAAe,CAAC,CAAC7B,GAAG,CAAE6I,MAAM,iBAC5CtM,OAAA;oBAAqBqC,KAAK,EAAEiK,MAAO;oBAAAhB,QAAA,EAChCgB;kBAAM,GADIA,MAAM;oBAAAxH,QAAA,EAAA0G,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAEX,CACT;gBAAC;kBAAA5G,QAAA,EAAA0G,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAA5G,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL1L,OAAA;gBAAAsL,QAAA,GAAI,SAEF,eAAAtL,OAAA;kBACEqL,SAAS,EAAC,iCAAiC;kBAC3Ce,QAAQ,EAAGlK,CAAC,IACVkE,kBAAkB,CAAC,SAAS,EAAElE,CAAC,CAACmK,MAAM,CAAChK,KAAK,CAC7C;kBACDA,KAAK,EAAEV,aAAa,CAACsC,OAAO,IAAI,KAAM;kBAAAqH,QAAA,EAErChG,gBAAgB,CAAC,SAAS,CAAC,CAAC7B,GAAG,CAAE6I,MAAM,iBACtCtM,OAAA;oBAAqBqC,KAAK,EAAEiK,MAAO;oBAAAhB,QAAA,EAChCgB;kBAAM,GADIA,MAAM;oBAAAxH,QAAA,EAAA0G,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAEX,CACT;gBAAC;kBAAA5G,QAAA,EAAA0G,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACI,CAAC;cAAA;gBAAA5G,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC,eACL1L,OAAA;gBAAIqL,SAAS,EAAC,aAAa;gBAAAC,QAAA,EAAC;cAAI;gBAAAxG,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAA5G,QAAA,EAAA0G,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnC;UAAC;YAAA5G,QAAA,EAAA0G,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACR1L,OAAA;YAAAsL,QAAA,EAEG7K,QAAQ,CAACgD,GAAG,CAAEC,OAAO,iBACpB1D,OAAA;cAAAsL,QAAA,gBACEtL,OAAA;gBAAAsL,QAAA,EAAK5H,OAAO,CAACC;cAAS;gBAAAmB,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC5B1L,OAAA;gBAAAsL,QAAA,EAAK5H,OAAO,CAACE;cAAW;gBAAAkB,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9B1L,OAAA;gBAAAsL,QAAA,EAAK5H,OAAO,CAACG;cAAoB;gBAAAiB,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACvC1L,OAAA;gBAAAsL,QAAA,EAAK5H,OAAO,CAACI;cAAiB;gBAAAgB,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACpC1L,OAAA;gBAAAsL,QAAA,EAAK5H,OAAO,CAACK;cAAgB;gBAAAe,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACnC1L,OAAA;gBAAAsL,QAAA,EAAK5H,OAAO,CAACM;cAAa;gBAAAc,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAChC1L,OAAA;gBAAAsL,QAAA,EAAKlJ,cAAc,CAACsB,OAAO,CAACO,OAAO;cAAC;gBAAAa,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC1C1L,OAAA;gBAAIqL,SAAS,EAAC,aAAa;gBAAAC,QAAA,eACzBtL,OAAA;kBACEqL,SAAS,EAAC,+CAA+C;kBACzDM,OAAO,EAAEA,CAAA;kBACP;kBACAvL,QAAQ,CAAC,aAAasD,OAAO,CAACC,SAAS,aAAa,EAAE;oBACpDsF,KAAK,EAAE;sBACLtF,SAAS,EAAED,OAAO,CAACC,SAAS;sBAC5BC,WAAW,EAAEF,OAAO,CAACE,WAAW;sBAChCvD,SAAS,EAAEqD,OAAO,CAACrD,SAAS;sBAC5BwI,WAAW,EAAEnF,OAAO,CAACmF,WAAW;sBAChC3F,KAAK,EAAEnC,WAAW;sBAClB4G,IAAI,EAAE1G,UAAU;sBAChBqI,GAAG,EAAE/H,SAAS;sBACdsG,WAAW,EAAEpG;oBACf;kBACF,CAAC,CACF;kBACDwK,KAAK,EAAC,iBAAiB;kBAAAX,QAAA,EACxB;gBACI;kBAAAxG,QAAA,EAAA0G,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACG;cAAC;gBAAA5G,QAAA,EAAA0G,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC;YAAA,GA9BEhI,OAAO,CAACC,SAAS;cAAAmB,QAAA,EAAA0G,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA+BtB,CACL;UAAC;YAAA5G,QAAA,EAAA0G,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA;UAAA5G,QAAA,EAAA0G,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAA5G,QAAA,EAAA0G,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAA5G,QAAA,EAAA0G,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAA5G,QAAA,EAAA0G,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvL,EAAA,CAvsBID,YAAY;EAAA,QAECT,WAAW,EACQC,SAAS,EAC5BC,WAAW;AAAA;AAAA4M,EAAA,GAJxBrM,YAAY;AAysBlB,eAAeA,YAAY;AAAC,IAAAqM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}