{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\AccountLevel.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\n// import accountData from '../../data/accountData.json'; // CORRECTED PATH: data is two levels up\n\n// const AccountLevel = () => {\n//   const navigate = useNavigate();\n\n//   // Set font family on component mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Define breadcrumb path for Account Level\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' }\n//   ];\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\n//             <thead\n//               className=\"text-white\"\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\n//             >\n//               <tr>\n//                 <th className=\"px-3 py-2\">Account ID</th>\n//                 <th className=\"px-3 py-2\">Account Name</th>\n//                 <th className=\"px-3 py-2\">Actual Revenue</th>\n//                 <th className=\"px-3 py-2\">Forecast Revenue</th>\n//                 <th className=\"px-3 py-2\">Forecast vs Actual Revenue</th>\n//                 <th className=\"px-3 py-2 text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {accountData.accounts.map((account) => {\n//                 const variance = account.actualRevenue - account.forecastRevenue;\n//                 return (\n//                   <tr key={account.id} style={{ backgroundColor: '#fdfdfd' }}>\n//                     <td className=\"px-3 py-2\">{account.id}</td>\n//                     <td className=\"px-3 py-2\">{account.name}</td>\n//                     <td className=\"px-3 py-2\">${account.actualRevenue.toLocaleString()}</td>\n//                     <td className=\"px-3 py-2\">${account.forecastRevenue.toLocaleString()}</td>\n//                     <td\n//                       className={`px-3 py-2 fw-semibold ${\n//                         variance > 0 ? 'text-success' : variance < 0 ? 'text-danger' : 'text-muted'\n//                       }`}\n//                     >\n//                       ${variance.toLocaleString()}\n//                     </td>\n//                     <td className=\"px-3 py-2 text-center\">\n//                       <button\n//                         onClick={() => navigate(`/accounts/${account.id}/projects`)} // Navigate to projects for this account\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                         title={`View Projects for ${account.name}`}\n//                       >\n//                         üîç\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AccountLevel;\n\n//after demo after discussion for adding datatables.net\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\n\nimport Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation(); // Hook to access location state\n\n  // State to store fetched account data\n\n  const [accounts, setAccounts] = useState([]);\n\n  // State for loading indicator\n\n  const [loading, setLoading] = useState(true);\n\n  // State for error messages\n\n  const [error, setError] = useState(null);\n\n  // States to keep track of the month and year for which data was last fetched\n\n  // This helps in preventing unnecessary re-fetches and retaining context\n\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n\n  // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Set font family on component mount\n\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Effect to handle month/year state and fetch data\n\n  useEffect(() => {\n    var _location$state, _location$state2;\n    const fetchAccountData = async (month, year) => {\n      setLoading(true);\n      setError(null);\n\n      // Construct the request body as expected by your backend\n\n      const requestBody = {\n        month: month,\n        year: year\n      };\n      console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\n\n      try {\n        const response = await fetch(`${BACKEND_URL}/api/account`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json' // Specify that we are sending JSON\n          },\n          body: JSON.stringify(requestBody) // Send the month and year in the body\n        });\n        if (!response.ok) {\n          const errorText = await response.text(); // Get detailed error message from backend\n\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n        }\n        const data = await response.json();\n        setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\n      } catch (err) {\n        console.error(\"Error fetching account data:\", err);\n        setError(`Failed to load account data: ${err.message || \"Network error\"}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Logic to determine month and year for fetching\n\n    let monthToUse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let yearToUse = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n\n    // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\n\n    if (!monthToUse || !yearToUse) {\n      const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\n      const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\n      if (storedMonth && storedYear) {\n        monthToUse = parseInt(storedMonth, 10);\n        yearToUse = parseInt(storedYear, 10);\n      }\n    }\n\n    // If we have valid month/year, set active states and fetch data if needed\n\n    if (monthToUse && yearToUse) {\n      // Only fetch if the active month/year has changed or if accounts are empty\n\n      // This prevents re-fetching when simply navigating back to the same view\n\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\n        setActiveMonth(monthToUse);\n        setActiveYear(yearToUse);\n        sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\n        sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\n        fetchAccountData(monthToUse, yearToUse);\n      } else {\n        // Data is already present for the active month/year, no need to fetch\n\n        setLoading(false);\n      }\n    } else {\n      // No month/year found in state or session, show error\n\n      setError(\"Missing month or year. Please go back and select a date.\");\n      setLoading(false);\n    }\n  }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\n\n  // Define breadcrumb path for Account Level\n\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  }, {\n    name: 'Account Level',\n    page: 'accounts'\n  }];\n\n  // Render loading state\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex justify-content-center align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading Account Data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"ms-3 text-primary\",\n        children: \"Loading Account Data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fs-4\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: () => navigate('/upload'),\n        children: \"Go to Upload Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-vh-100 d-flex flex-column align-items-center px-3 py-4\",\n    style: {\n      background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n      fontFamily: \"'Poppins', sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4 p-md-5 w-100\",\n      style: {\n        maxWidth: '1100px',\n        backgroundColor: '#ffffffdd',\n        borderRadius: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4 fw-semibold text-dark\",\n        children: \"\\uD83C\\uDFE2 Account Level Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-hover align-middle table-borderless mb-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"text-white\",\n            style: {\n              background: 'linear-gradient(to right, #1d4ed8, #2563eb)'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Account ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Account Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Total Projects\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2\",\n                children: \"Total Revenue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-3 py-2 text-center\",\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: accounts.length > 0 ? accounts.map(account => /*#__PURE__*/_jsxDEV(\"tr\", {\n              style: {\n                backgroundColor: '#fdfdfd'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2\",\n                children: account.accountId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2\",\n                children: account.accountName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2\",\n                children: account.totalProjects\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2\",\n                children: [\"$\", account.totalRevenue.toLocaleString(undefined, {\n                  minimumFractionDigits: 2,\n                  maximumFractionDigits: 2\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-3 py-2 text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  // Navigate to ProjectLevel, passing accountId, month, and year\n\n                  onClick: () => navigate(`/accounts/${account.accountId}/projects`, {\n                    state: {\n                      accountId: account.accountId,\n                      // Pass accountId explicitly\n\n                      month: activeMonth,\n                      // Pass the active month\n\n                      year: activeYear // Pass the active year\n                    }\n                  }),\n                  className: \"btn btn-sm btn-outline-primary rounded-circle\",\n                  title: `View Projects for ${account.accountName}`,\n                  children: \"\\uD83D\\uDD0D\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 21\n              }, this)]\n            }, account.accountId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"5\",\n                className: \"text-center text-muted py-4\",\n                children: \"No account data found for the selected period.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountLevel, \"sqKsRvfGIAHj6q1QsPcdg0cX4Nc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AccountLevel;\nexport default AccountLevel;\nvar _c;\n$RefreshReg$(_c, \"AccountLevel\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","Breadcrumbs","jsxDEV","_jsxDEV","AccountLevel","_s","navigate","location","accounts","setAccounts","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","BACKEND_URL","link","document","createElement","href","rel","head","appendChild","body","style","fontFamily","_location$state","_location$state2","fetchAccountData","month","year","requestBody","console","log","response","fetch","method","headers","JSON","stringify","ok","errorText","text","Error","status","statusText","data","json","Array","isArray","filter","Boolean","err","message","monthToUse","state","yearToUse","storedMonth","sessionStorage","getItem","storedYear","parseInt","length","setItem","toString","breadcrumbPath","name","page","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","onClick","background","maxWidth","backgroundColor","borderRadius","path","map","account","accountId","accountName","totalProjects","totalRevenue","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","title","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/AccountLevel.js"],"sourcesContent":["// import React, { useEffect } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\r\n// import accountData from '../../data/accountData.json'; // CORRECTED PATH: data is two levels up\r\n\r\n// const AccountLevel = () => {\r\n//   const navigate = useNavigate();\r\n\r\n//   // Set font family on component mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Define breadcrumb path for Account Level\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' }\r\n//   ];\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n//             <thead\r\n//               className=\"text-white\"\r\n//               style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n//             >\r\n//               <tr>\r\n//                 <th className=\"px-3 py-2\">Account ID</th>\r\n//                 <th className=\"px-3 py-2\">Account Name</th>\r\n//                 <th className=\"px-3 py-2\">Actual Revenue</th>\r\n//                 <th className=\"px-3 py-2\">Forecast Revenue</th>\r\n//                 <th className=\"px-3 py-2\">Forecast vs Actual Revenue</th>\r\n//                 <th className=\"px-3 py-2 text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {accountData.accounts.map((account) => {\r\n//                 const variance = account.actualRevenue - account.forecastRevenue;\r\n//                 return (\r\n//                   <tr key={account.id} style={{ backgroundColor: '#fdfdfd' }}>\r\n//                     <td className=\"px-3 py-2\">{account.id}</td>\r\n//                     <td className=\"px-3 py-2\">{account.name}</td>\r\n//                     <td className=\"px-3 py-2\">${account.actualRevenue.toLocaleString()}</td>\r\n//                     <td className=\"px-3 py-2\">${account.forecastRevenue.toLocaleString()}</td>\r\n//                     <td\r\n//                       className={`px-3 py-2 fw-semibold ${\r\n//                         variance > 0 ? 'text-success' : variance < 0 ? 'text-danger' : 'text-muted'\r\n//                       }`}\r\n//                     >\r\n//                       ${variance.toLocaleString()}\r\n//                     </td>\r\n//                     <td className=\"px-3 py-2 text-center\">\r\n//                       <button\r\n//                         onClick={() => navigate(`/accounts/${account.id}/projects`)} // Navigate to projects for this account\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                         title={`View Projects for ${account.name}`}\r\n//                       >\r\n//                         üîç\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 );\r\n//               })}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AccountLevel;\r\n\r\n//after demo after discussion for adding datatables.net\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { useNavigate, useLocation } from 'react-router-dom'; // Import useLocation\r\n\r\nimport Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\nconst AccountLevel = () => {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const location = useLocation(); // Hook to access location state\r\n\r\n  // State to store fetched account data\r\n\r\n  const [accounts, setAccounts] = useState([]);\r\n\r\n  // State for loading indicator\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // State for error messages\r\n\r\n  const [error, setError] = useState(null);\r\n\r\n  // States to keep track of the month and year for which data was last fetched\r\n\r\n  // This helps in preventing unnecessary re-fetches and retaining context\r\n\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n\r\n  const [activeYear, setActiveYear] = useState(null);\r\n\r\n  // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Set font family on component mount\r\n\r\n  useEffect(() => {\r\n\r\n    const link = document.createElement('link');\r\n\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n\r\n    link.rel = 'stylesheet';\r\n\r\n    document.head.appendChild(link);\r\n\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n  }, []);\r\n\r\n  // Effect to handle month/year state and fetch data\r\n\r\n  useEffect(() => {\r\n\r\n    const fetchAccountData = async (month, year) => {\r\n\r\n      setLoading(true);\r\n\r\n      setError(null);\r\n\r\n      // Construct the request body as expected by your backend\r\n\r\n      const requestBody = {\r\n\r\n        month: month,\r\n\r\n        year: year\r\n\r\n      };\r\n\r\n      console.log(\"Fetching account data with request body (POST):\", requestBody); // For debugging\r\n\r\n      try {\r\n\r\n        const response = await fetch(`${BACKEND_URL}/api/account`, {\r\n\r\n          method: 'POST',\r\n\r\n          headers: {\r\n\r\n            'Content-Type': 'application/json', // Specify that we are sending JSON\r\n\r\n          },\r\n\r\n          body: JSON.stringify(requestBody), // Send the month and year in the body\r\n\r\n        });\r\n\r\n        if (!response.ok) {\r\n\r\n          const errorText = await response.text(); // Get detailed error message from backend\r\n\r\n          throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setAccounts(Array.isArray(data) ? data : [data].filter(Boolean));\r\n\r\n      } catch (err) {\r\n\r\n        console.error(\"Error fetching account data:\", err);\r\n\r\n        setError(`Failed to load account data: ${err.message || \"Network error\"}`);\r\n\r\n      } finally {\r\n\r\n        setLoading(false);\r\n\r\n      }\r\n\r\n    };\r\n\r\n    // Logic to determine month and year for fetching\r\n\r\n    let monthToUse = location.state?.month;\r\n\r\n    let yearToUse = location.state?.year;\r\n\r\n    // If month/year are not in location.state (e.g., on back navigation), check sessionStorage\r\n\r\n    if (!monthToUse || !yearToUse) {\r\n\r\n      const storedMonth = sessionStorage.getItem('lastFetchedAccountMonth');\r\n\r\n      const storedYear = sessionStorage.getItem('lastFetchedAccountYear');\r\n\r\n      if (storedMonth && storedYear) {\r\n\r\n        monthToUse = parseInt(storedMonth, 10);\r\n\r\n        yearToUse = parseInt(storedYear, 10);\r\n\r\n      }\r\n\r\n    }\r\n\r\n    // If we have valid month/year, set active states and fetch data if needed\r\n\r\n    if (monthToUse && yearToUse) {\r\n\r\n      // Only fetch if the active month/year has changed or if accounts are empty\r\n\r\n      // This prevents re-fetching when simply navigating back to the same view\r\n\r\n      if (monthToUse !== activeMonth || yearToUse !== activeYear || accounts.length === 0) {\r\n\r\n        setActiveMonth(monthToUse);\r\n\r\n        setActiveYear(yearToUse);\r\n\r\n        sessionStorage.setItem('lastFetchedAccountMonth', monthToUse.toString());\r\n\r\n        sessionStorage.setItem('lastFetchedAccountYear', yearToUse.toString());\r\n\r\n        fetchAccountData(monthToUse, yearToUse);\r\n\r\n      } else {\r\n\r\n        // Data is already present for the active month/year, no need to fetch\r\n\r\n        setLoading(false);\r\n\r\n      }\r\n\r\n    } else {\r\n\r\n      // No month/year found in state or session, show error\r\n\r\n      setError(\"Missing month or year. Please go back and select a date.\");\r\n\r\n      setLoading(false);\r\n\r\n    }\r\n\r\n  }, [location.state, BACKEND_URL, activeMonth, activeYear, accounts.length]); // Dependencies for useEffect\r\n\r\n  // Define breadcrumb path for Account Level\r\n\r\n  const breadcrumbPath = [\r\n\r\n    { name: 'PMO Dashboard', page: '' },\r\n\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n\r\n    { name: 'Account Level', page: 'accounts' }\r\n\r\n  ];\r\n\r\n  // Render loading state\r\n\r\n  if (loading) {\r\n\r\n    return (\r\n\r\n      <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n\r\n        <div className=\"spinner-border text-primary\" role=\"status\">\r\n\r\n          <span className=\"visually-hidden\">Loading Account Data...</span>\r\n\r\n        </div>\r\n\r\n        <p className=\"ms-3 text-primary\">Loading Account Data...</p>\r\n\r\n      </div>\r\n\r\n    );\r\n\r\n  }\r\n\r\n  // Render error state\r\n\r\n  if (error) {\r\n\r\n    return (\r\n\r\n      <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n\r\n        <p className=\"fs-4\">Error: {error}</p>\r\n\r\n        <button className=\"btn btn-primary mt-3\" onClick={() => navigate('/upload')}>\r\n\r\n          Go to Upload Page\r\n\r\n        </button>\r\n\r\n      </div>\r\n\r\n    );\r\n\r\n  }\r\n\r\n  return (\r\n\r\n    <div\r\n\r\n      className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n\r\n      style={{\r\n\r\n        background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n\r\n        fontFamily: \"'Poppins', sans-serif\"\r\n\r\n      }}\r\n\r\n    >\r\n\r\n      <div\r\n\r\n        className=\"card shadow p-4 p-md-5 w-100\"\r\n\r\n        style={{ maxWidth: '1100px', backgroundColor: '#ffffffdd', borderRadius: '1rem' }}\r\n\r\n      >\r\n\r\n        <Breadcrumbs path={breadcrumbPath} />\r\n\r\n        <h2 className=\"text-center mb-4 fw-semibold text-dark\">üè¢ Account Level Overview</h2>\r\n\r\n        <div className=\"table-responsive rounded\">\r\n\r\n          <table className=\"table table-hover align-middle table-borderless mb-0\">\r\n\r\n            <thead\r\n\r\n              className=\"text-white\"\r\n\r\n              style={{ background: 'linear-gradient(to right, #1d4ed8, #2563eb)' }}\r\n\r\n            >\r\n\r\n              <tr>\r\n\r\n                <th className=\"px-3 py-2\">Account ID</th>\r\n\r\n                <th className=\"px-3 py-2\">Account Name</th>\r\n\r\n                <th className=\"px-3 py-2\">Total Projects</th>\r\n\r\n                <th className=\"px-3 py-2\">Total Revenue</th>\r\n\r\n                <th className=\"px-3 py-2 text-center\">View</th>\r\n\r\n              </tr>\r\n\r\n            </thead>\r\n\r\n            <tbody>\r\n\r\n              {accounts.length > 0 ? (\r\n\r\n                accounts.map((account) => (\r\n\r\n                  <tr key={account.accountId} style={{ backgroundColor: '#fdfdfd' }}>\r\n\r\n                    <td className=\"px-3 py-2\">{account.accountId}</td>\r\n\r\n                    <td className=\"px-3 py-2\">{account.accountName}</td>\r\n\r\n                    <td className=\"px-3 py-2\">{account.totalProjects}</td>\r\n\r\n                    <td className=\"px-3 py-2\">${account.totalRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n\r\n                    <td className=\"px-3 py-2 text-center\">\r\n\r\n                      <button\r\n\r\n                        // Navigate to ProjectLevel, passing accountId, month, and year\r\n\r\n                        onClick={() => navigate(`/accounts/${account.accountId}/projects`, {\r\n\r\n                          state: {\r\n\r\n                            accountId: account.accountId, // Pass accountId explicitly\r\n\r\n                            month: activeMonth, // Pass the active month\r\n\r\n                            year: activeYear // Pass the active year\r\n\r\n                          }\r\n\r\n                        })}\r\n\r\n                        className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n\r\n                        title={`View Projects for ${account.accountName}`}\r\n\r\n                      >\r\n\r\n                        üîç\r\n\r\n                      </button>\r\n\r\n                    </td>\r\n\r\n                  </tr>\r\n\r\n                ))\r\n\r\n              ) : (\r\n\r\n                <tr>\r\n\r\n                  <td colSpan=\"5\" className=\"text-center text-muted py-4\">\r\n\r\n                    No account data found for the selected period.\r\n\r\n                  </td>\r\n\r\n                </tr>\r\n\r\n              )}\r\n\r\n            </tbody>\r\n\r\n          </table>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n};\r\n\r\nexport default AccountLevel;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}