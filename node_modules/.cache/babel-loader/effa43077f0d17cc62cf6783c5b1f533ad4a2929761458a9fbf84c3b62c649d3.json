{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2374927\\\\OneDrive - Cognizant\\\\Desktop\\\\earlyview\\\\revenue-forecast-ui\\\\timesheet-comparison\\\\src\\\\components\\\\Details\\\\AssociateLevel.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs';\n\n// const AssociateLevel = () => {\n//   const navigate = useNavigate();\n//   const { projectId } = useParams();\n\n//   const associates = [\n//     {\n//       id: 'A001',\n//       name: 'Alice',\n//       ctsHour: 160,\n//       clientHour: 155,\n//       managerId: 'M001',\n//       managerName: 'John Doe',\n//       rate: 50,\n//       projectId: 'P001'\n//     },\n//     {\n//       id: 'A002',\n//       name: 'Bob',\n//       ctsHour: 140,\n//       clientHour: 140,\n//       managerId: 'M002',\n//       managerName: 'Jane Smith',\n//       rate: 60,\n//       projectId: 'P001'\n//     }\n//   ].filter(a => a.projectId === projectId);\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 w-100\"\n//         style={{\n//           maxWidth: '1100px',\n//           backgroundColor: '#ffffffee',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs\n//           path={[\n//             { name: 'PMO Dashboard', page: '' },\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\n//             { name: 'Project Level', page: 'projects' },\n//             { name: `Associates (${projectId})`, page: `projects/${projectId}/associates` }\n//           ]}\n//         />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n//           üë§ Associate Details ‚Äì Project: {projectId}\n//         </h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n//             <thead\n//               style={{\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\n//                 color: 'white'\n//               }}\n//             >\n//               <tr>\n//                 <th>ID</th>\n//                 <th>Name</th>\n//                 <th>CTS Hours</th>\n//                 <th>Client Hours</th>\n//                 <th>Variance</th>\n//                 <th>Manager</th>\n//                 <th>Rate</th>\n//                 <th className=\"text-center\">Notify</th>\n//                 <th className=\"text-center\">View</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {associates.map((a) => (\n//                 <tr key={a.id}>\n//                   <td>{a.id}</td>\n//                   <td>{a.name}</td>\n//                   <td>{a.ctsHour}</td>\n//                   <td>{a.clientHour}</td>\n//                   <td\n//                     className={`fw-semibold ${\n//                       a.ctsHour - a.clientHour > 0\n//                         ? 'text-danger'\n//                         : a.ctsHour - a.clientHour < 0\n//                         ? 'text-primary'\n//                         : 'text-success'\n//                     }`}\n//                   >\n//                     {a.ctsHour - a.clientHour}\n//                   </td>\n//                   <td>{a.managerName}</td>\n//                   <td>${a.rate}</td>\n//                   <td className=\"text-center\">\n//                     <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\n//                       Notify\n//                     </button>\n//                   </td>\n//                   <td className=\"text-center\">\n//                     <button\n//                       onClick={() => navigate(`/projects/${projectId}/associates/${a.id}`)}\n//                       className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                       title=\"View Associate\"\n//                     >\n//                       üîç\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//               {associates.length === 0 && (\n//                 <tr>\n//                   <td colSpan=\"9\" className=\"text-center text-muted py-4\">\n//                     No associates found for this project.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AssociateLevel;\n\n// import React, { useEffect } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\n// import associateData from '../../data/associateData.json'; // CORRECTED PATH: data is two levels up\n// import projectData from '../../data/projectData.json'; // CORRECTED PATH: data is two levels up\n\n// const AssociateLevel = () => {\n//   const navigate = useNavigate();\n//   const { projectId } = useParams(); // Get projectId from URL parameters\n\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Filter associates based on projectId\n//   const associates = associateData.associates.filter(a => a.projectId === projectId);\n\n//   // Get project name for breadcrumbs\n//   const currentProject = projectData.projects.find(p => p.id === projectId);\n//   const projectName = currentProject ? currentProject.name : projectId; // Fallback to ID if not found\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 w-100\"\n//         style={{\n//           maxWidth: '1100px',\n//           backgroundColor: '#ffffffee',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs\n//           path={[\n//             { name: 'PMO Dashboard', page: '' },\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\n//             { name: 'Account Level', page: 'accounts' }, // Added for full path\n//             { name: `Projects (${currentProject?.accountName})`, page: `accounts/${currentProject?.accountId}/projects` }, // Added for full path\n//             { name: `Associates (${projectName})`, page: `projects/${projectId}/associates` }\n//           ]}\n//         />\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n//           üë§ Associate Details ‚Äì Project: {projectName}\n//         </h2>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n//             <thead\n//               style={{\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\n//                 color: 'white'\n//               }}\n//             >\n//               <tr>\n//                 <th>ID</th>\n//                 <th>Name</th>\n//                 <th>CTS Hours</th>\n//                 <th>Client Hours</th>\n//                 <th>Variance</th>\n//                 <th>Manager</th>\n//                 <th>Rate</th>\n//                 <th className=\"text-center\">Notify</th>\n//                 <th className=\"text-center\">View Daily</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {associates.length > 0 ? (\n//                 associates.map((a) => {\n//                   const variance = a.ctsHour - a.clientHour;\n//                   return (\n//                     <tr key={a.id}>\n//                       <td>{a.id}</td>\n//                       <td>{a.name}</td>\n//                       <td>{a.ctsHour}</td>\n//                       <td>{a.clientHour}</td>\n//                       <td\n//                         className={`fw-semibold ${\n//                           variance > 0\n//                             ? 'text-danger'\n//                             : variance < 0\n//                             ? 'text-primary'\n//                             : 'text-success'\n//                         }`}\n//                       >\n//                         {variance}\n//                       </td>\n//                       <td>{a.managerName}</td>\n//                       <td>${a.rate}</td>\n//                       <td className=\"text-center\">\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\n//                           Notify\n//                         </button>\n//                       </td>\n//                       <td className=\"text-center\">\n//                         <button\n//                           onClick={() => navigate(`/projects/${projectId}/associates/${a.id}`)}\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                           title=\"View Daily Hours\"\n//                         >\n//                           üîç\n//                         </button>\n//                       </td>\n//                     </tr>\n//                   );\n//                 })\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"9\" className=\"text-center text-muted py-4\">\n//                     No associates found for this project.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AssociateLevel;\n// import React, { useEffect, useState } from 'react';\n\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\n\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n\n// const AssociateLevel = () => {\n\n//   const navigate = useNavigate();\n\n//   const { projectId: urlProjectId } = useParams(); // Get projectId from URL parameters\n\n//   const location = useLocation(); // Hook to access location state\n\n//   // State for fetched associate data\n\n//   const [associates, setAssociates] = useState([]);\n\n//   // State for loading indicator\n\n//   const [loading, setLoading] = useState(true);\n\n//   // State for error messages\n\n//   const [error, setError] = useState(null);\n\n//   // States to keep track of the context (month, year, projectId, accountId) for which data was last fetched\n\n//   const [activeMonth, setActiveMonth] = useState(null);\n\n//   const [activeYear, setActiveYear] = useState(null);\n\n//   const [activeProjectId, setActiveProjectId] = useState(null);\n\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\n\n//   const [activeAccountId, setActiveAccountId] = useState(null);\n\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\n\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Set font family on component mount\n\n//   useEffect(() => {\n\n//     const link = document.createElement('link');\n\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n\n//     link.rel = 'stylesheet';\n\n//     document.head.appendChild(link);\n\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n\n//   }, []);\n\n//   // Effect to handle context and fetch data\n\n//   useEffect(() => {\n\n//     const fetchAssociateData = async (month, year, projId) => {\n\n//       setLoading(true);\n\n//       setError(null);\n\n//       // Construct the request body as expected by your backend\n\n//       const requestBody = {\n\n//         month: month,\n\n//         year: year,\n\n//         projectId: projId // Pass the project ID\n\n//       };\n\n//       console.log(\"Fetching associate data with request body (POST):\", requestBody); // For debugging\n\n//       try {\n\n//         const response = await fetch(`${BACKEND_URL}/api/associate`, {\n\n//           method: 'POST', // As per your backend spec\n\n//           headers: {\n\n//             'Content-Type': 'application/json',\n\n//           },\n\n//           body: JSON.stringify(requestBody),\n\n//         });\n\n//         if (!response.ok) {\n\n//           const errorText = await response.text();\n\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n\n//         }\n\n//         const data = await response.json();\n\n//         setAssociates(Array.isArray(data) ? data : [data].filter(Boolean));\n\n//         // Try to derive project and account names from fetched data if available\n\n//         if (data && data.length > 0) {\n\n//           if (data[0].projectName) setActiveProjectName(data[0].projectName);\n\n//           if (data[0].accountName) setActiveAccountName(data[0].accountName);\n\n//           if (data[0].accountId) setActiveAccountId(data[0].accountId); // Ensure accountId is set\n\n//         } else {\n\n//           // Fallback to stored names or IDs if data is empty or names are missing\n\n//           const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\n\n//           const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\n\n//           const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\n\n//           if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\n\n//           if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\n\n//           if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\n\n//         }\n\n//       } catch (err) {\n\n//         console.error(\"Error fetching associate data:\", err);\n\n//         setError(`Failed to load associate data: ${err.message || \"Network error\"}`);\n\n//       } finally {\n\n//         setLoading(false);\n\n//       }\n\n//     };\n\n//     // Logic to determine context for fetching\n\n//     let monthToUse = location.state?.month;\n\n//     let yearToUse = location.state?.year;\n\n//     let projectIdToUse = urlProjectId; // Always get projectId from URL params\n\n//     let accountIdToUse = location.state?.accountId; // Get accountId from state for breadcrumbs\n\n//     let accountNameToUse = location.state?.accountName; // Get accountName from state for breadcrumbs\n\n//     let projectNameToUse = location.state?.projectName; // Get project name from state for breadcrumbs\n\n//     // If context is not in location.state (e.g., on back navigation), check sessionStorage\n\n//     if (!monthToUse || !yearToUse || !projectIdToUse || !accountIdToUse || !projectNameToUse) {\n\n//       const storedMonth = sessionStorage.getItem('lastFetchedAssociateMonth');\n\n//       const storedYear = sessionStorage.getItem('lastFetchedAssociateYear');\n\n//       const storedProjectId = sessionStorage.getItem('lastFetchedAssociateProjectId');\n\n//       const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\n\n//       const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\n\n//       const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\n\n//       if (storedMonth && storedYear && storedProjectId) {\n\n//         monthToUse = parseInt(storedMonth, 10);\n\n//         yearToUse = parseInt(storedYear, 10);\n\n//         projectIdToUse = storedProjectId;\n\n//         if (storedProjectName) projectNameToUse = storedProjectName;\n\n//         if (storedAccountId) accountIdToUse = storedAccountId;\n\n//         if (storedAccountName) accountNameToUse = storedAccountName;\n\n//       }\n\n//     }\n\n//     // If we have valid context, set active states and fetch data if needed\n\n//     if (monthToUse && yearToUse && projectIdToUse && accountIdToUse && projectNameToUse) {\n\n//       // Only fetch if the context has changed or if associates are empty\n\n//       if (\n\n//         monthToUse !== activeMonth ||\n\n//         yearToUse !== activeYear ||\n\n//         projectIdToUse !== activeProjectId ||\n\n//         associates.length === 0\n\n//       ) {\n\n//         setActiveMonth(monthToUse);\n\n//         setActiveYear(yearToUse);\n\n//         setActiveProjectId(projectIdToUse);\n\n//         setActiveProjectName(projectNameToUse); // Set project name from state\n\n//         setActiveAccountId(accountIdToUse); // Set account ID from state\n\n//         setActiveAccountName(accountNameToUse); // Set account name from state\n\n//         // Store current context in sessionStorage\n\n//         sessionStorage.setItem('lastFetchedAssociateMonth', monthToUse.toString());\n\n//         sessionStorage.setItem('lastFetchedAssociateYear', yearToUse.toString());\n\n//         sessionStorage.setItem('lastFetchedAssociateProjectId', projectIdToUse);\n\n//         sessionStorage.setItem('lastFetchedAssociateProjectName', projectNameToUse);\n\n//         sessionStorage.setItem('lastFetchedAssociateAccountId', accountIdToUse);\n\n//         sessionStorage.setItem('lastFetchedAssociateAccountName', accountNameToUse);\n\n//         fetchAssociateData(monthToUse, yearToUse, projectIdToUse);\n\n//       } else {\n\n//         // Data is already present for the active context, no need to fetch\n\n//         setLoading(false);\n\n//       }\n\n//     } else {\n\n//       // No valid context found, show error\n\n//       setError(\"Missing associate context (month, year, project ID, or account ID). Please go back and select a project.\");\n\n//       setLoading(false);\n\n//     }\n\n//   }, [location.state, urlProjectId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAccountId, activeAccountName, activeProjectName, associates.length]); // Dependencies for useEffect\n\n//   // Adjust breadcrumb path based on active states\n\n//   const breadcrumbPath = [\n\n//     { name: 'PMO Dashboard', page: '' },\n\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n\n//     { name: 'Account Level', page: 'accounts' },\n\n//     { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\n\n//     { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` }\n\n//   ];\n\n//   // Render loading state\n\n//   if (loading) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n\n//           <span className=\"visually-hidden\">Loading Associate Data...</span>\n\n//         </div>\n\n//         <p className=\"ms-3 text-primary\">Loading Associate Data...</p>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   // Render error state\n\n//   if (error) {\n\n//     return (\n\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n\n//         <p className=\"fs-4\">Error: {error}</p>\n\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/accounts/${activeAccountId}/projects`)}>\n\n//           Go to Project Level\n\n//         </button>\n\n//       </div>\n\n//     );\n\n//   }\n\n//   return (\n\n//     <div\n\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n\n//       style={{\n\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n\n//         fontFamily: \"'Poppins', sans-serif\"\n\n//       }}\n\n//     >\n\n//       <div\n\n//         className=\"card shadow p-4 w-100\"\n\n//         style={{\n\n//           maxWidth: '1100px',\n\n//           backgroundColor: '#ffffffee',\n\n//           borderRadius: '1rem'\n\n//         }}\n\n//       >\n\n//         <Breadcrumbs path={breadcrumbPath} />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n\n//           üë§ Associate Details ‚Äì Project: {activeProjectName}\n\n//         </h2>\n\n//         <div className=\"table-responsive rounded\">\n\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n\n//             <thead\n\n//               style={{\n\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\n\n//                 color: 'white'\n\n//               }}\n\n//             >\n\n//               <tr>\n\n//                 <th>Associate ID</th>\n\n//                 <th>Associate Name</th>\n\n//                 <th>Project ID</th>\n\n//                 <th>Project Name</th>\n\n//                 <th>PM ID</th>\n\n//                 <th>Total Company Hours (Monthly)</th>\n\n//                 <th>Total Client Hours (Monthly)</th>\n\n//                 <th>Variance Hours (Monthly)</th>\n\n//                 <th>Actual Revenue</th>\n\n//                 <th>Associate Rate</th>\n\n//                 <th className=\"text-center\">Notify</th>\n\n//                 <th className=\"text-center\">View Daily</th>\n\n//               </tr>\n\n//             </thead>\n\n//             <tbody>\n\n//               {associates.length > 0 ? (\n\n//                 associates.map((associate) => {\n\n//                   // const variance = associate.totalCompanyHoursMonthly - associate.totalClientHoursMonthly; // Assuming variance is Company - Client\n\n//                   return (\n\n//                     <tr key={associate.associateId}>\n\n//                       <td>{associate.associateId}</td>\n\n//                       <td>{associate.associateName}</td>\n\n//                       <td>{associate.projectId}</td>\n\n//                       <td>{associate.projectName}</td>\n\n//                       <td>{associate.esaID}</td>\n\n//                       <td>{associate.totalCompanyHoursMonthly}</td>\n\n//                       <td>{associate.totalClientHoursMonthly}</td>\n\n//                       <td>{associate.varianceHoursMonthly}</td>\n\n//                       {/* <td\n\n//             className={`fw-semibold ${\n\n//              variance > 0\n\n//               ? 'text-danger'\n\n//               : variance < 0\n\n//               ? 'text-primary'\n\n//               : 'text-success'\n\n//             }`}\n\n//            >\n\n//             {variance}\n\n//            </td> */}\n\n//                       <td>${associate.actualRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n\n//                       <td>${associate.associateRtRate.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n\n//                       <td className=\"text-center\">\n\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\n\n//                           Notify\n\n//                         </button>\n\n//                       </td>\n\n//                       <td className=\"text-center\">\n\n//                         <button\n\n//                           // Navigate to DateLevel, passing full context\n\n//                           onClick={() => {\n\n//                             const targetPath = `/projects/${associate.projectId}/associates/${associate.associateId}/daily`;\n\n//                             const stateToPass = {\n\n//                               month: activeMonth,\n\n//                               year: activeYear,\n\n//                               projectId: associate.projectId, // Use from current associate object\n\n//                               projectName: associate.projectName, // Use from current associate object\n\n//                               accountId: activeAccountId, // Use from AssociateLevel's state\n\n//                               accountName: activeAccountName, // Use from AssociateLevel's state\n\n//                               associateId: associate.associateId,\n\n//                               associateName: associate.associateName\n\n//                             };\n\n//                             // ADD THIS LOG: Check the path and state before navigation\n\n//                             console.log(\"Navigating to DateLevel with path:\", targetPath, \"and state:\", stateToPass);\n\n//                             navigate(targetPath, { state: stateToPass });\n\n//                           }}\n\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\n\n//                           title=\"View Daily Hours\"\n\n//                         >\n\n//                           üîç\n\n//                         </button>\n\n//                       </td>\n\n//                     </tr>\n\n//                   );\n\n//                 })\n\n//               ) : (\n\n//                 <tr>\n\n//                   <td colSpan=\"11\" className=\"text-center text-muted py-4\">\n\n//                     No associates found for this project and period.\n\n//                   </td>\n\n//                 </tr>\n\n//               )}\n\n//             </tbody>\n\n//           </table>\n\n//         </div>\n\n//       </div>\n\n//     </div>\n\n//   );\n\n// };\n\n// export default AssociateLevel;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n\n// const AssociateLevel = () => {\n//   const navigate = useNavigate();\n//   const { projectId: urlProjectId } = useParams(); // Get projectId from URL parameters\n//   const location = useLocation(); // Hook to access location state\n\n//   // State for fetched associate data\n//   const [associates, setAssociates] = useState([]);\n//   // State for loading indicator\n//   const [loading, setLoading] = useState(true);\n//   // State for error messages\n//   const [error, setError] = useState(null);\n\n//   // States to keep track of the context (month, year, projectId, accountId) for which data was last fetched\n//   const [activeMonth, setActiveMonth] = useState(null);\n//   const [activeYear, setActiveYear] = useState(null);\n//   const [activeProjectId, setActiveProjectId] = useState(null);\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\n//   const [activeAccountId, setActiveAccountId] = useState(null);\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\n\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Set font family on component mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Effect to handle context and fetch data\n//   useEffect(() => {\n//     const fetchAssociateData = async (month, year, projId) => {\n//       setLoading(true);\n//       setError(null);\n\n//       // Construct the request body as expected by your backend\n//       const requestBody = {\n//         month: month,\n//         year: year,\n//         projectId: projId // Pass the project ID\n//       };\n\n//       console.log(\"Fetching associate data with request body (POST):\", requestBody); // For debugging\n\n//       try {\n//         const response = await fetch(`${BACKEND_URL}/api/associate`, {\n//           method: 'POST', // As per your backend spec\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify(requestBody),\n//         });\n\n//         if (!response.ok) {\n//           const errorText = await response.text();\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n//         }\n\n//         const data = await response.json();\n//         setAssociates(Array.isArray(data) ? data : [data].filter(Boolean));\n\n//         // Try to derive project and account names from fetched data if available\n//         if (data && data.length > 0) {\n//           if (data[0].projectName) setActiveProjectName(data[0].projectName);\n//           if (data[0].accountName) setActiveAccountName(data[0].accountName);\n//           if (data[0].accountId) setActiveAccountId(data[0].accountId); // Ensure accountId is set\n//         } else {\n//           // Fallback to stored names or IDs if data is empty or names are missing\n//           const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\n//           const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\n//           const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\n\n//           if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\n//           if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\n//           if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\n//         }\n\n//       } catch (err) {\n//         console.error(\"Error fetching associate data:\", err);\n//         setError(`Failed to load associate data: ${err.message || \"Network error\"}`);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     // Logic to determine context for fetching\n//     let monthToUse = location.state?.month;\n//     let yearToUse = location.state?.year;\n//     let projectIdToUse = urlProjectId; // Always get projectId from URL params\n//     let accountIdToUse = location.state?.accountId; // Get accountId from state for breadcrumbs\n//     let accountNameToUse = location.state?.accountName; // Get accountName from state for breadcrumbs\n//     let projectNameToUse = location.state?.projectName; // Get project name from state for breadcrumbs\n\n//     // If context is not in location.state (e.g., on back navigation), check sessionStorage\n//     if (!monthToUse || !yearToUse || !projectIdToUse || !accountIdToUse || !projectNameToUse) {\n//       const storedMonth = sessionStorage.getItem('lastFetchedAssociateMonth');\n//       const storedYear = sessionStorage.getItem('lastFetchedAssociateYear');\n//       const storedProjectId = sessionStorage.getItem('lastFetchedAssociateProjectId');\n//       const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\n//       const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\n//       const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\n\n//       if (storedMonth && storedYear && storedProjectId) {\n//         monthToUse = parseInt(storedMonth, 10);\n//         yearToUse = parseInt(storedYear, 10);\n//         projectIdToUse = storedProjectId;\n//         if (storedProjectName) projectNameToUse = storedProjectName;\n//         if (storedAccountId) accountIdToUse = storedAccountId;\n//         if (storedAccountName) accountNameToUse = storedAccountName;\n//       }\n//     }\n\n//     // If we have valid context, set active states and fetch data if needed\n//     if (monthToUse && yearToUse && projectIdToUse && accountIdToUse && projectNameToUse) {\n//       // Only fetch if the context has changed or if associates are empty\n//       if (\n//         monthToUse !== activeMonth || \n//         yearToUse !== activeYear || \n//         projectIdToUse !== activeProjectId || \n//         associates.length === 0\n//       ) {\n//         setActiveMonth(monthToUse);\n//         setActiveYear(yearToUse);\n//         setActiveProjectId(projectIdToUse);\n//         setActiveProjectName(projectNameToUse); // Set project name from state\n//         setActiveAccountId(accountIdToUse);     // Set account ID from state\n//         setActiveAccountName(accountNameToUse); // Set account name from state\n\n//         // Store current context in sessionStorage\n//         sessionStorage.setItem('lastFetchedAssociateMonth', monthToUse.toString());\n//         sessionStorage.setItem('lastFetchedAssociateYear', yearToUse.toString());\n//         sessionStorage.setItem('lastFetchedAssociateProjectId', projectIdToUse);\n//         sessionStorage.setItem('lastFetchedAssociateProjectName', projectNameToUse);\n//         sessionStorage.setItem('lastFetchedAssociateAccountId', accountIdToUse);\n//         sessionStorage.setItem('lastFetchedAssociateAccountName', accountNameToUse);\n\n//         fetchAssociateData(monthToUse, yearToUse, projectIdToUse);\n//       } else {\n//         // Data is already present for the active context, no need to fetch\n//         setLoading(false);\n//       }\n//     } else {\n//       // No valid context found, show error\n//       setError(\"Missing associate context (month, year, project ID, or account ID). Please go back and select a project.\");\n//       setLoading(false);\n//     }\n\n//   }, [location.state, urlProjectId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAccountId, activeAccountName, activeProjectName, associates.length]); // Dependencies for useEffect\n\n//   // Adjust breadcrumb path based on active states\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' },\n//     { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\n//     { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` }\n//   ];\n\n//   // Placeholder function for Notify All\n//   const handleNotifyAll = () => {\n//     alert('Notifying all associates for this project!');\n//     // Implement your actual notification logic here\n//   };\n\n//   // Placeholder function for Download Data\n//   const handleDownloadData = () => {\n//     alert('Downloading associate data for this project!');\n//     // Implement your actual data download logic here\n//     // You might want to format 'associates' data into CSV or Excel and trigger a download\n//   };\n\n//   // Render loading state\n//   if (loading) {\n//     return (\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n//           <span className=\"visually-hidden\">Loading Associate Data...</span>\n//         </div>\n//         <p className=\"ms-3 text-primary\">Loading Associate Data...</p>\n//       </div>\n//     );\n//   }\n\n//   // Render error state\n//   if (error) {\n//     return (\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n//         <p className=\"fs-4\">Error: {error}</p>\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/accounts/${activeAccountId}/projects`)}>\n//           Go to Project Level\n//         </button>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 w-100\"\n//         style={{\n//           maxWidth: '1100px',\n//           backgroundColor: '#ffffffee',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\n//           <h2 className=\"mb-0 fw-semibold text-dark\">\n//             üë§ Associate Details ‚Äì Project: {activeProjectName}\n//           </h2>\n//           <div className=\"d-flex gap-2\">\n//             <button \n//               className=\"btn btn-outline-info rounded-pill px-3\"\n//               onClick={handleNotifyAll}\n//             >\n//               Notify All\n//             </button>\n//             <button \n//               className=\"btn btn-outline-success rounded-pill px-3\"\n//               onClick={handleDownloadData}\n//             >\n//               Download Data\n//             </button>\n//           </div>\n//         </div>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n//             <thead\n//               style={{\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\n//                 color: 'white'\n//               }}\n//             >\n//               <tr>\n//                 <th>Associate ID</th>\n//                 <th>Associate Name</th>\n//                 <th>Project ID</th>\n//                 <th>Project Name</th>\n//                 <th>PM ID</th>\n//                 <th>Total Company Hours (Monthly)</th>\n//                 <th>Total Client Hours (Monthly)</th>\n//                 <th>Variance Hours (Monthly)</th>\n//                 <th>Actual Revenue</th>\n//                 <th>Associate Rate</th>\n//                 <th className=\"text-center\">Notify</th>\n//                 <th className=\"text-center\">View Daily</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {associates.length > 0 ? (\n//                 associates.map((associate) => {\n//                   // const variance = associate.totalCompanyHoursMonthly - associate.totalClientHoursMonthly; // Assuming variance is Company - Client\n//                   return (\n//                     <tr key={associate.associateId}>\n//                       <td>{associate.associateId}</td>\n//                       <td>{associate.associateName}</td>\n//                       <td>{associate.projectId}</td>\n//                       <td>{associate.projectName}</td>\n//                       <td>{associate.esaID}</td>\n//                       <td>{associate.totalCompanyHoursMonthly}</td>\n//                       <td>{associate.totalClientHoursMonthly}</td>\n//                       <td>{associate.varianceHoursMonthly}</td>\n//                       {/* <td\n//             className={`fw-semibold ${\n//               variance > 0\n//                 ? 'text-danger'\n//                 : variance < 0\n//                 ? 'text-primary'\n//                 : 'text-success'\n//             }`}\n//            >\n//             {variance}\n//            </td> */}\n//                       <td>${associate.actualRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n//                       <td>${associate.associateRtRate.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\n//                       <td className=\"text-center\">\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\n//                           Notify\n//                         </button>\n//                       </td>\n//                       <td className=\"text-center\">\n//                         <button\n//                           // Navigate to DateLevel, passing full context\n//                           onClick={() => {\n//                             const targetPath = `/projects/${associate.projectId}/associates/${associate.associateId}/daily`;\n//                             const stateToPass = {\n//                               month: activeMonth,\n//                               year: activeYear,\n//                               projectId: associate.projectId, // Use from current associate object\n//                               projectName: associate.projectName, // Use from current associate object\n//                               accountId: activeAccountId, // Use from AssociateLevel's state\n//                               accountName: activeAccountName, // Use from AssociateLevel's state\n//                               associateId: associate.associateId,\n//                               associateName: associate.associateName\n//                             };\n//                             // ADD THIS LOG: Check the path and state before navigation\n//                             console.log(\"Navigating to DateLevel with path:\", targetPath, \"and state:\", stateToPass);\n//                             navigate(targetPath, { state: stateToPass });\n//                           }}\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                           title=\"View Daily Hours\"\n//                         >\n//                           üîç\n//                         </button>\n//                       </td>\n//                     </tr>\n//                   );\n//                 })\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"11\" className=\"text-center text-muted py-4\">\n//                     No associates found for this project and period.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AssociateLevel;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\n\n// // 1) Import your commonData.json\n// import commonData from '../../data/commonData.json';\n\n// const AssociateLevel = () => {\n//   const navigate = useNavigate();\n//   const { projectId: urlProjectId } = useParams(); // Get projectId from URL parameters\n//   const location = useLocation(); // Hook to access location state\n\n//   // State for fetched associate data\n//   const [associates, setAssociates] = useState([]);\n//   // State for loading indicator\n//   const [loading, setLoading] = useState(true);\n//   // State for error messages\n//   const [error, setError] = useState(null);\n\n//   // States to keep track of the context (month, year, projectId, accountId) for which data was last fetched\n//   const [activeMonth, setActiveMonth] = useState(null);\n//   const [activeYear, setActiveYear] = useState(null);\n//   const [activeProjectId, setActiveProjectId] = useState(null);\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\n//   const [activeAccountId, setActiveAccountId] = useState(null);\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   //Destructure your currency settings\n//   const {\n//     locale,\n//     currency,\n//     minimumFractionDigits,\n//     maximumFractionDigits\n//   } = commonData.currencySettings;\n\n//   // 3) Utility to format any number to your centralized currency format\n//   const formatCurrency = (value = 0) =>\n//     value.toLocaleString(locale, {\n//       style: 'currency',\n//       currency,\n//       minimumFractionDigits,\n//       maximumFractionDigits\n//     });\n\n//   // Set font family on component mount\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Effect to handle context and fetch data\n//   useEffect(() => {\n//     const fetchAssociateData = async (month, year, projId) => {\n//       setLoading(true);\n//       setError(null);\n\n//       // Construct the request body as expected by your backend\n//       const requestBody = {\n//         month: month,\n//         year: year,\n//         projectId: projId // Pass the project ID\n//       };\n\n//       console.log(\"Fetching associate data with request body (POST):\", requestBody); // For debugging\n\n//       try {\n//         const response = await fetch(`${BACKEND_URL}/api/associate`, {\n//           method: 'POST', // As per your backend spec\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify(requestBody),\n//         });\n\n//         if (!response.ok) {\n//           const errorText = await response.text();\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\n//         }\n\n//         const data = await response.json();\n//         setAssociates(Array.isArray(data) ? data : [data].filter(Boolean));\n\n//         // Try to derive project and account names from fetched data if available\n//         if (data && data.length > 0) {\n//           if (data[0].projectName) setActiveProjectName(data[0].projectName);\n//           if (data[0].accountId) setActiveAccountId(data[0].accountId);\n//           if (data[0].accountName) setActiveAccountName(data[0].accountName);\n//         } else {\n//           // Fallback to stored names or IDs if data is empty or names are missing\n//           const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\n//           const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\n//           const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\n\n//           if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\n//           if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\n//           if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\n//         }\n\n//       } catch (err) {\n//         console.error(\"Error fetching associate data:\", err);\n//         setError(`Failed to load associate data: ${err.message || \"Network error\"}`);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     // Logic to determine context for fetching\n//     let monthToUse = location.state?.month;\n//     let yearToUse = location.state?.year;\n//     let projectIdToUse = urlProjectId; // Always get projectId from URL params\n//     let accountIdToUse = location.state?.accountId; // Get accountId from state for breadcrumbs\n//     let accountNameToUse = location.state?.accountName; // Get accountName from state for breadcrumbs\n//     let projectNameToUse = location.state?.projectName; // Get project name from state for breadcrumbs\n\n//     // If context is not in location.state (e.g., on back navigation), check sessionStorage\n//     if (!monthToUse || !yearToUse || !projectIdToUse || !accountIdToUse || !projectNameToUse) {\n//       const storedMonth = sessionStorage.getItem('lastFetchedAssociateMonth');\n//       const storedYear = sessionStorage.getItem('lastFetchedAssociateYear');\n//       const storedProjectId = sessionStorage.getItem('lastFetchedAssociateProjectId');\n//       const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\n//       const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\n//       const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\n\n//       if (storedMonth && storedYear && storedProjectId) {\n//         monthToUse = parseInt(storedMonth, 10);\n//         yearToUse = parseInt(storedYear, 10);\n//         projectIdToUse = storedProjectId;\n//         if (storedProjectName) projectNameToUse = storedProjectName;\n//         if (storedAccountId) accountIdToUse = storedAccountId;\n//         if (storedAccountName) accountNameToUse = storedAccountName;\n//       }\n//     }\n\n//     // If we have valid context, set active states and fetch data if needed\n//     if (monthToUse && yearToUse && projectIdToUse && accountIdToUse && projectNameToUse) {\n//       // Only fetch if the context has changed or if associates are empty\n//       if (\n//         monthToUse !== activeMonth ||\n//         yearToUse !== activeYear ||\n//         projectIdToUse !== activeProjectId ||\n//         associates.length === 0\n//       ) {\n//         setActiveMonth(monthToUse);\n//         setActiveYear(yearToUse);\n//         setActiveProjectId(projectIdToUse);\n//         setActiveProjectName(projectNameToUse); // Set project name from state\n//         setActiveAccountId(accountIdToUse);     // Set account ID from state\n//         setActiveAccountName(accountNameToUse); // Set account name from state\n\n//         // Store current context in sessionStorage\n//         sessionStorage.setItem('lastFetchedAssociateMonth', monthToUse.toString());\n//         sessionStorage.setItem('lastFetchedAssociateYear', yearToUse.toString());\n//         sessionStorage.setItem('lastFetchedAssociateProjectId', projectIdToUse);\n//         sessionStorage.setItem('lastFetchedAssociateProjectName', projectNameToUse);\n//         sessionStorage.setItem('lastFetchedAssociateAccountId', accountIdToUse);\n//         sessionStorage.setItem('lastFetchedAssociateAccountName', accountNameToUse);\n\n//         fetchAssociateData(monthToUse, yearToUse, projectIdToUse);\n//       } else {\n//         // Data is already present for the active context, no need to fetch\n//         setLoading(false);\n//       }\n//     } else {\n//       // No valid context found, show error\n//       setError(\"Missing associate context (month, year, project ID, or account ID). Please go back and select a project.\");\n//       setLoading(false);\n//     }\n\n//   }, [location.state, urlProjectId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAccountId, activeAccountName, activeProjectName, associates.length]); // Dependencies for useEffect\n\n//   // Adjust breadcrumb path based on active states\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' },\n//     { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\n//     { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` }\n//   ];\n\n//   // Placeholder function for Notify All\n//   const handleNotifyAll = () => {\n//     alert('Notifying all associates for this project!');\n//     // Implement your actual notification logic here\n//   };\n\n//   // Placeholder function for Download Data\n//   const handleDownloadData = () => {\n//     alert('Downloading associate data for this project!');\n//     // Implement your actual data download logic here\n//     // You might want to format 'associates' data into CSV or Excel and trigger a download\n//   };\n\n//   // Render loading state\n//   if (loading) {\n//     return (\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n//         <div className=\"spinner-border text-primary\" role=\"status\">\n//           <span className=\"visually-hidden\">Loading Associate Data...</span>\n//         </div>\n//         <p className=\"ms-3 text-primary\">Loading Associate Data...</p>\n//       </div>\n//     );\n//   }\n\n//   // Render error state\n//   if (error) {\n//     return (\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n//         <p className=\"fs-4\">Error: {error}</p>\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/accounts/${activeAccountId}/projects`)}>\n//           Go to Project Level\n//         </button>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 w-100\"\n//         style={{\n//           maxWidth: '1100px',\n//           backgroundColor: '#ffffffee',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\n//           <h2 className=\"mb-0 fw-semibold text-dark\">\n//             üë§ Associate Details ‚Äì Project: {activeProjectName}\n//           </h2>\n//           <div className=\"d-flex gap-2\">\n//             <button\n//               className=\"btn btn-outline-info rounded-pill px-3\"\n//               onClick={handleNotifyAll}\n//             >\n//               Notify All\n//             </button>\n//             <button\n//               className=\"btn btn-outline-success rounded-pill px-3\"\n//               onClick={handleDownloadData}\n//             >\n//               Download Data\n//             </button>\n//           </div>\n//         </div>\n\n//         <div className=\"table-responsive rounded\">\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\n//             <thead\n//               style={{\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\n//                 color: 'white'\n//               }}\n//             >\n//               <tr>\n//                 <th>Associate ID</th>\n//                 <th>Associate Name</th>\n//                 <th>Project ID</th>\n//                 <th>Project Name</th>\n//                 <th>PM ID</th>\n//                 <th>Total Company Hours (Monthly)</th>\n//                 <th>Total Client Hours (Monthly)</th>\n//                 <th>Variance Hours (Monthly)</th>\n//                 <th>Actual Revenue</th>\n//                 <th>Associate Rate</th>\n//                 <th className=\"text-center\">Notify</th>\n//                 <th className=\"text-center\">View Daily</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {associates.length > 0 ? (\n//                 associates.map((associate) => {\n//                   return (\n//                     <tr key={associate.associateId}>\n//                       <td>{associate.associateId}</td>\n//                       <td>{associate.associateName}</td>\n//                       <td>{associate.projectId}</td>\n//                       <td>{associate.projectName}</td>\n//                       <td>{associate.esaID}</td>\n//                       <td>{associate.totalCompanyHoursMonthly}</td>\n//                       <td>{associate.totalClientHoursMonthly}</td>\n//                       <td>{associate.varianceHoursMonthly}</td>\n//                       {/* Apply the formatCurrency function here */}\n//                       <td>{formatCurrency(associate.actualRevenue)}</td>\n//                       <td>{formatCurrency(associate.associateRtRate)}</td>\n//                       <td className=\"text-center\">\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\n//                           Notify\n//                         </button>\n//                       </td>\n//                       <td className=\"text-center\">\n//                         <button\n//                           // Navigate to DateLevel, passing full context\n//                           onClick={() => {\n//                             const targetPath = `/projects/${associate.projectId}/associates/${associate.associateId}/daily`;\n//                             const stateToPass = {\n//                               month: activeMonth,\n//                               year: activeYear,\n//                               projectId: associate.projectId, // Use from current associate object\n//                               projectName: associate.projectName, // Use from current associate object\n//                               accountId: activeAccountId, // Use from AssociateLevel's state\n//                               accountName: activeAccountName, // Use from AssociateLevel's state\n//                               associateId: associate.associateId,\n//                               associateName: associate.associateName\n//                             };\n//                             // ADD THIS LOG: Check the path and state before navigation\n//                             console.log(\"Navigating to DateLevel with path:\", targetPath, \"and state:\", stateToPass);\n//                             navigate(targetPath, { state: stateToPass });\n//                           }}\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                           title=\"View Daily Hours\"\n//                         >\n//                           üîç\n//                         </button>\n//                       </td>\n//                     </tr>\n//                   );\n//                 })\n//               ) : (\n//                 <tr>\n//                   <td colSpan=\"11\" className=\"text-center text-muted py-4\">\n//                     No associates found for this project and period.\n//                   </td>\n//                 </tr>\n//               )}\n//             </tbody>\n//           </table>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AssociateLevel;\n\n// src/components/Details/AssociateLevel.js\n\n// import React, { useRef, useEffect, useState } from 'react';\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\n// import $ from 'jquery';\n// import 'datatables.net';\n// import 'datatables.net-dt/css/dataTables.dataTables.min.css';\n// import Breadcrumbs from '../Breadcrumbs';\n// import commonData from '../../data/commonData.json';\n\n// const AssociateLevel = () => {\n//   const navigate = useNavigate();\n//   const { projectId: urlProjectId } = useParams();\n//   const location = useLocation();\n//   const tableRef = useRef(null);\n\n//   const [associates, setAssociates]           = useState([]);\n//   const [loading, setLoading]                 = useState(true);\n//   const [error, setError]                     = useState(null);\n//   const [activeMonth, setActiveMonth]         = useState(null);\n//   const [activeYear, setActiveYear]           = useState(null);\n//   const [activeProjectId, setActiveProjectId] = useState(null);\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\n//   const [activeAccountId, setActiveAccountId]     = useState(null);\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\n\n//   const BACKEND_URL = 'http://localhost:8081';\n\n//   // Currency formatter from commonData.json\n//   const {\n//     locale,\n//     currency,\n//     minimumFractionDigits,\n//     maximumFractionDigits\n//   } = commonData.currencySettings;\n//   const formatCurrency = (value = 0) =>\n//     value.toLocaleString(locale, {\n//       style: 'currency',\n//       currency,\n//       minimumFractionDigits,\n//       maximumFractionDigits\n//     });\n\n//   // Load Poppins font once\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href =\n//       'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // Fetch associates based on context\n//   useEffect(() => {\n//     const fetchAssociateData = async (month, year, projId) => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         const resp = await fetch(`${BACKEND_URL}/api/associate`, {\n//           method: 'POST',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify({ month, year, projectId: projId })\n//         });\n//         if (!resp.ok) {\n//           const msg = await resp.text();\n//           throw new Error(`status: ${resp.status}, message: ${msg || resp.statusText}`);\n//         }\n//         const data = await resp.json();\n//         const list = Array.isArray(data) ? data : [data].filter(Boolean);\n//         setAssociates(list);\n\n//         if (list.length > 0) {\n//           const first = list[0];\n//           setActiveProjectName(first.projectName || projId);\n//           setActiveAccountId(first.accountId || activeAccountId);\n//           setActiveAccountName(first.accountName || activeAccountName);\n//         }\n//       } catch (e) {\n//         console.error('Error fetching associate data:', e);\n//         setError(`Failed to load associate data: ${e.message}`);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     let month  = location.state?.month;\n//     let year   = location.state?.year;\n//     let projId = urlProjectId;\n//     let acctId = location.state?.accountId;\n//     let acctName = location.state?.accountName;\n//     let projName = location.state?.projectName;\n\n//     if (!month || !year || !acctId || !projName) {\n//       const sm = sessionStorage.getItem('lastFetchedAssociateMonth');\n//       const sy = sessionStorage.getItem('lastFetchedAssociateYear');\n//       const sp = sessionStorage.getItem('lastFetchedAssociateProjectId');\n//       const sn = sessionStorage.getItem('lastFetchedAssociateProjectName');\n//       const sa = sessionStorage.getItem('lastFetchedAssociateAccountId');\n//       const san= sessionStorage.getItem('lastFetchedAssociateAccountName');\n//       if (sm && sy && sp) {\n//         month = parseInt(sm, 10);\n//         year  = parseInt(sy, 10);\n//         projId = sp;\n//         projName = sn;\n//         acctId = sa;\n//         acctName = san;\n//       }\n//     }\n\n//     if (month && year && projId && acctId && projName) {\n//       if (\n//         month !== activeMonth ||\n//         year  !== activeYear ||\n//         projId !== activeProjectId ||\n//         associates.length === 0\n//       ) {\n//         setActiveMonth(month);\n//         setActiveYear(year);\n//         setActiveProjectId(projId);\n//         setActiveProjectName(projName);\n//         setActiveAccountId(acctId);\n//         setActiveAccountName(acctName);\n\n//         sessionStorage.setItem('lastFetchedAssociateMonth', month.toString());\n//         sessionStorage.setItem('lastFetchedAssociateYear', year.toString());\n//         sessionStorage.setItem('lastFetchedAssociateProjectId', projId);\n//         sessionStorage.setItem('lastFetchedAssociateProjectName', projName);\n//         sessionStorage.setItem('lastFetchedAssociateAccountId', acctId);\n//         sessionStorage.setItem('lastFetchedAssociateAccountName', acctName);\n\n//         fetchAssociateData(month, year, projId);\n//       } else {\n//         setLoading(false);\n//       }\n//     } else {\n//       setError(\n//         'Missing associate context (month, year, project, or account). Please go back.'\n//       );\n//       setLoading(false);\n//     }\n//   }, [\n//     location.state,\n//     urlProjectId,\n//     activeMonth,\n//     activeYear,\n//     activeProjectId,\n//     associates.length\n//   ]);\n\n//   // Initialize DataTables when associates load\n//   useEffect(() => {\n//     if (!loading && associates.length > 0 && tableRef.current) {\n//       const $tbl = $(tableRef.current);\n//       if ($.fn.DataTable.isDataTable($tbl)) {\n//         $tbl.DataTable().destroy();\n//       }\n//       $tbl.DataTable({\n//         paging:    true,\n//         searching: true,\n//         ordering:  true,\n//         info:      true,\n//         autoWidth: false\n//       });\n//     }\n//     return () => {\n//       if (tableRef.current) {\n//         const $tbl = $(tableRef.current);\n//         if ($.fn.DataTable.isDataTable($tbl)) {\n//           $tbl.DataTable().destroy();\n//         }\n//       }\n//     };\n//   }, [loading, associates]);\n\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' },\n//     {\n//       name: `Projects (${activeAccountName})`,\n//       page: `accounts/${activeAccountId}/projects`\n//     },\n//     {\n//       name: `Associates (${activeProjectName})`,\n//       page: `projects/${activeProjectId}/associates`\n//     }\n//   ];\n\n//   const handleNotifyAll = () => {\n//     alert('Notifying all associates for this project!');\n//   };\n\n//   const handleDownloadData = () => {\n//     alert('Downloading associate data for this project!');\n//   };\n\n//   if (loading) {\n//     return (\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\n//         <div className=\"spinner-border text-primary\" role=\"status\" />\n//         <p className=\"ms-3 text-primary\">Loading Associate Data...</p>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\n//         <p className=\"fs-4\">Error: {error}</p>\n//         <button\n//           className=\"btn btn-primary mt-3\"\n//           onClick={() =>\n//             navigate(`/accounts/${activeAccountId}/projects`)\n//           }\n//         >\n//           Go to Project Level\n//         </button>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//         fontFamily: \"'Poppins', sans-serif\"\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 w-100\"\n//         style={{\n//           maxWidth: '1100px',\n//           backgroundColor: '#ffffffee',\n//           borderRadius: '1rem'\n//         }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\n//           <h2 className=\"mb-0 fw-semibold text-dark\">\n//             üë§ Associate Details ‚Äì Project: {activeProjectName}\n//           </h2>\n//           <div className=\"d-flex gap-2\">\n//             <button\n//               className=\"btn btn-outline-info rounded-pill px-3\"\n//               onClick={handleNotifyAll}\n//             >\n//               Notify All\n//             </button>\n//             <button\n//               className=\"btn btn-outline-success rounded-pill px-3\"\n//               onClick={handleDownloadData}\n//             >\n//               Download Data\n//             </button>\n//           </div>\n//         </div>\n\n//         <div className=\"table-responsive rounded\">\n//           <table\n//             ref={tableRef}\n//             className=\"display table table-hover table-borderless align-middle mb-0\"\n//             style={{ width: '100%' }}\n//           >\n//             <thead\n//               style={{\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\n//                 color: 'white'\n//               }}\n//             >\n//               <tr>\n//                 <th>Associate ID</th>\n//                 <th>Associate Name</th>\n//                 <th>Project ID</th>\n//                 <th>Project Name</th>\n//                 <th>PM ID</th>\n//                 <th>Total Company Hours (Monthly)</th>\n//                 <th>Total Client Hours (Monthly)</th>\n//                 <th>Variance Hours (Monthly)</th>\n//                 <th>Actual Revenue</th>\n//                 <th>Associate Rate</th>\n//                 <th className=\"text-center\">Notify</th>\n//                 <th className=\"text-center\">View Daily</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {associates.map((associate) => (\n//                 <tr key={associate.associateId}>\n//                   <td>{associate.associateId}</td>\n//                   <td>{associate.associateName}</td>\n//                   <td>{associate.projectId}</td>\n//                   <td>{associate.projectName}</td>\n//                   <td>{associate.esaID}</td>\n//                   <td>{associate.totalCompanyHoursMonthly}</td>\n//                   <td>{associate.totalClientHoursMonthly}</td>\n//                   <td>{associate.varianceHoursMonthly}</td>\n//                   <td>{formatCurrency(associate.actualRevenue)}</td>\n//                   <td>{formatCurrency(associate.associateRtRate)}</td>\n//                   <td className=\"text-center\">\n//                     <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\n//                       Notify\n//                     </button>\n//                   </td>\n//                   <td className=\"text-center\">\n//                     <button\n//                       className=\"btn btn-sm btn-outline-primary rounded-circle\"\n//                       onClick={() => {\n//                         navigate(\n//                           `/projects/${associate.projectId}/associates/${associate.associateId}/daily`,\n//                           {\n//                             state: {\n//                               month: activeMonth,\n//                               year: activeYear,\n//                               projectId: associate.projectId,\n//                               projectName: associate.projectName,\n//                               accountId: activeAccountId,\n//                               accountName: activeAccountName,\n//                               associateId: associate.associateId,\n//                               associateName: associate.associateName\n//                             }\n//                           }\n//                         );\n//                       }}\n//                     >\n//                       üîç\n//                     </button>\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         </div>\n\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AssociateLevel;\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport $ from 'jquery';\nimport 'datatables.net';\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\nimport { Bell, Download, Search, Users, Filter } from 'lucide-react';\n\n// Corrected import paths for UI components\nimport { Button } from '../../components/ui/button';\nimport { Card, CardContent, CardHeader } from '../../components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';\n// Removed the import for Badge as it's not present\n// import { Badge } from '../../components/ui/badge'; \n\nimport Breadcrumbs from '../Breadcrumbs';\nimport commonData from '../../data/commonData.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssociateLevel = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    projectId: urlProjectId\n  } = useParams();\n  const location = useLocation();\n  const tableRef = useRef(null);\n  const dataTableInstance = useRef(null);\n  const [associates, setAssociates] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeMonth, setActiveMonth] = useState(null);\n  const [activeYear, setActiveYear] = useState(null);\n  const [activeProjectId, setActiveProjectId] = useState(null);\n  const [activeProjectName, setActiveProjectName] = useState('Loading...');\n  const [activeAccountId, setActiveAccountId] = useState(null);\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\n  const [filterOption, setFilterOption] = useState('showAll');\n  const BACKEND_URL = 'http://localhost:8081';\n\n  // Currency formatter from commonData.json\n  const {\n    locale,\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  } = commonData.currencySettings;\n  const formatCurrency = (value = 0) => value.toLocaleString(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits\n  });\n\n  // Load Poppins font once\n  useEffect(() => {\n    const link = document.createElement('link');\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n    link.rel = 'stylesheet';\n    document.head.appendChild(link);\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\n  }, []);\n\n  // Fetch associates based on context\n  useEffect(() => {\n    var _location$state, _location$state2, _location$state3, _location$state4, _location$state5;\n    const fetchAssociateData = async (month, year, projId) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const resp = await fetch(`${BACKEND_URL}/api/associate`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            month,\n            year,\n            projectId: projId\n          })\n        });\n        if (!resp.ok) {\n          const msg = await resp.text();\n          throw new Error(`status: ${resp.status}, message: ${msg || resp.statusText}`);\n        }\n        const data = await resp.json();\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\n        setAssociates(list);\n        if (list.length > 0) {\n          const first = list[0];\n          setActiveProjectName(first.projectName || projId);\n          setActiveAccountId(first.accountId || activeAccountId);\n          setActiveAccountName(first.accountName || activeAccountName);\n        }\n      } catch (e) {\n        console.error('Error fetching associate data:', e);\n        setError(`Failed to load associate data: ${e.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    let month = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.month;\n    let year = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.year;\n    let projId = urlProjectId;\n    let acctId = (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.accountId;\n    let acctName = (_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.accountName;\n    let projName = (_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.projectName;\n    if (!month || !year || !acctId || !projName) {\n      const sm = sessionStorage.getItem('lastFetchedAssociateMonth');\n      const sy = sessionStorage.getItem('lastFetchedAssociateYear');\n      const sp = sessionStorage.getItem('lastFetchedAssociateProjectId');\n      const sn = sessionStorage.getItem('lastFetchedAssociateProjectName');\n      const sa = sessionStorage.getItem('lastFetchedAssociateAccountId');\n      const san = sessionStorage.getItem('lastFetchedAssociateAccountName');\n      if (sm && sy && sp) {\n        month = parseInt(sm, 10);\n        year = parseInt(sy, 10);\n        projId = sp;\n        projName = sn;\n        acctId = sa;\n        acctName = san;\n      }\n    }\n    if (month && year && projId && acctId && projName) {\n      if (month !== activeMonth || year !== activeYear || projId !== activeProjectId || associates.length === 0) {\n        setActiveMonth(month);\n        setActiveYear(year);\n        setActiveProjectId(projId);\n        setActiveProjectName(projName);\n        setActiveAccountId(acctId);\n        setActiveAccountName(acctName);\n        sessionStorage.setItem('lastFetchedAssociateMonth', month.toString());\n        sessionStorage.setItem('lastFetchedAssociateYear', year.toString());\n        sessionStorage.setItem('lastFetchedAssociateProjectId', projId);\n        sessionStorage.setItem('lastFetchedAssociateProjectName', projName);\n        sessionStorage.setItem('lastFetchedAssociateAccountId', acctId);\n        sessionStorage.setItem('lastFetchedAssociateAccountName', acctName);\n        fetchAssociateData(month, year, projId);\n      } else {\n        setLoading(false);\n      }\n    } else {\n      setError('Missing associate context (month, year, project, or account). Please go back.');\n      setLoading(false);\n    }\n  }, [location.state, urlProjectId, activeMonth, activeYear, activeProjectId, associates.length]);\n\n  // Initialize DataTables when associates load or filter changes\n  useEffect(() => {\n    if (!loading && tableRef.current) {\n      const $tbl = $(tableRef.current);\n      if ($.fn.DataTable.isDataTable($tbl)) {\n        dataTableInstance.current.destroy(); // Destroy existing instance\n      }\n\n      // Remove any previously added custom search functions\n      $.fn.dataTable.ext.search.pop();\n\n      // Apply custom filter based on filterOption state\n      if (filterOption === 'varianceAboveZero') {\n        $.fn.dataTable.ext.search.push((settings, data, dataIndex) => {\n          // Assuming 'Variance Hours (Monthly)' is the 8th column (index 7)\n          const varianceHoursMonthly = parseFloat(data[7]) || 0;\n          return varianceHoursMonthly !== 0;\n        });\n      }\n\n      // Initialize DataTables with no column ordering\n      dataTableInstance.current = $tbl.DataTable({\n        paging: true,\n        searching: true,\n        ordering: false,\n        // Removed individual column sorting\n        info: true,\n        autoWidth: false\n      });\n    }\n\n    // Cleanup function for DataTables\n    return () => {\n      if (dataTableInstance.current) {\n        dataTableInstance.current.destroy();\n        dataTableInstance.current = null;\n      }\n      $.fn.dataTable.ext.search.pop(); // Clean up custom search on unmount\n    };\n  }, [loading, associates, filterOption]); // Re-run effect when filterOption changes\n\n  const breadcrumbPath = [{\n    name: 'PMO Dashboard',\n    page: ''\n  }, {\n    name: 'Revenue Forecast - Early View',\n    page: 'upload'\n  }, {\n    name: 'Account Level',\n    page: 'accounts'\n  }, {\n    name: `Projects (${activeAccountName})`,\n    page: `accounts/${activeAccountId}/projects`\n  }, {\n    name: `Associates (${activeProjectName})`,\n    page: `projects/${activeProjectId}/associates`\n  }];\n  const handleNotifyAll = () => {\n    // Replace alert with a custom modal/message box for better UX\n    console.log('Notifying all associates for this project!');\n  };\n  const handleDownloadData = () => {\n    // Replace alert with a custom modal/message box for better UX\n    console.log('Downloading associate data for this project!');\n  };\n\n  // Handler for the variance filter dropdown change\n  const handleFilterChange = value => {\n    setFilterOption(value);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2086,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-blue-600 font-medium\",\n          children: \"Loading Associate Data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2087,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2085,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2084,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-red-50 to-pink-100\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-600 text-lg font-medium\",\n          children: [\"Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2097,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => navigate(`/accounts/${activeAccountId}/projects`),\n          className: \"bg-blue-600 hover:bg-blue-700\",\n          children: \"Go to Project Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2098,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2096,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2095,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-4 font-sans\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"shadow-xl border-0 bg-white/95 backdrop-blur\",\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          className: \"border-b border-slate-200 bg-white/50\",\n          children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n            path: breadcrumbPath\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 pt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-2 bg-blue-100 rounded-lg\",\n                children: /*#__PURE__*/_jsxDEV(Users, {\n                  className: \"h-6 w-6 text-blue-600\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2120,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2119,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  className: \"text-2xl font-bold text-slate-900\",\n                  children: \"Associate Details\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2123,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-slate-600 text-sm\",\n                  children: [\"Project: \", activeProjectName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2124,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2122,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-col sm:flex-row items-start sm:items-center gap-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-2\",\n                children: [/*#__PURE__*/_jsxDEV(Filter, {\n                  className: \"h-4 w-4 text-slate-500\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2131,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-sm font-medium text-slate-700\",\n                  children: \"Filter Variance:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2132,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  value: filterOption,\n                  onValueChange: handleFilterChange,\n                  children: [/*#__PURE__*/_jsxDEV(SelectTrigger, {\n                    className: \"w-48 h-9\",\n                    children: /*#__PURE__*/_jsxDEV(SelectValue, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2135,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2134,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(SelectContent, {\n                    children: [/*#__PURE__*/_jsxDEV(SelectItem, {\n                      value: \"showAll\",\n                      children: \"Show All Variance\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2138,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(SelectItem, {\n                      value: \"varianceAboveZero\",\n                      children: \"Variance \\u2260 0\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2139,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2137,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2133,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2130,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center space-x-2\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outline\",\n                  size: \"sm\",\n                  onClick: handleNotifyAll,\n                  className: \"flex items-center space-x-2 border-blue-200 text-blue-700 hover:bg-blue-50\",\n                  children: [/*#__PURE__*/_jsxDEV(Bell, {\n                    className: \"h-4 w-4\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2151,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Notify All\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2152,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2145,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outline\",\n                  size: \"sm\",\n                  onClick: handleDownloadData,\n                  className: \"flex items-center space-x-2 border-green-200 text-green-700 hover:bg-green-50\",\n                  children: [/*#__PURE__*/_jsxDEV(Download, {\n                    className: \"h-4 w-4\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2160,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Download Data\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2161,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2154,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2144,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2129,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"p-0\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overflow-x-auto\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              ref: tableRef,\n              className: \"display table table-hover table-borderless align-middle mb-0 w-full\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                className: \"bg-gradient-to-r from-blue-600 to-blue-700 text-white\",\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-left text-sm font-semibold\",\n                    children: \"Associate ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2176,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-left text-sm font-semibold\",\n                    children: \"Associate Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2177,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-left text-sm font-semibold\",\n                    children: \"Project ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2178,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-left text-sm font-semibold\",\n                    children: \"Project Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2179,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-left text-sm font-semibold\",\n                    children: \"PM ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2180,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-left text-sm font-semibold\",\n                    children: \"Total Company Hours (Monthly)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2181,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-left text-sm font-semibold\",\n                    children: \"Total Client Hours (Monthly)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2182,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-left text-sm font-semibold\",\n                    children: \"Variance Hours (Monthly)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2183,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-left text-sm font-semibold\",\n                    children: \"Actual Revenue\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2184,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-left text-sm font-semibold\",\n                    children: \"Associate Rate\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2185,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-center text-sm font-semibold\",\n                    children: \"Notify\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2186,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    className: \"px-4 py-4 text-center text-sm font-semibold\",\n                    children: \"View Daily\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2187,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2175,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2174,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                className: \"divide-y divide-slate-200 bg-white\",\n                children: associates.map(associate => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  className: \"hover:bg-slate-50 transition-colors\",\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-sm font-medium text-slate-900\",\n                    children: associate.associateId\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2193,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-sm text-slate-700 font-medium\",\n                    children: associate.associateName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2196,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-sm text-slate-600\",\n                    children: associate.projectId\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2199,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-sm text-slate-700\",\n                    children: associate.projectName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2202,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-sm text-slate-600\",\n                    children: associate.esaID\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2205,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-sm text-slate-700 font-mono\",\n                    children: associate.totalCompanyHoursMonthly\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2208,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-sm text-slate-700 font-mono\",\n                    children: associate.totalClientHoursMonthly\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2211,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-sm font-mono\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: (associate.varianceHoursMonthly || 0) > 0 ? 'text-red-600 font-semibold' : (associate.varianceHoursMonthly || 0) < 0 ? 'text-green-600 font-semibold' : 'text-slate-700',\n                      children: associate.varianceHoursMonthly\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2215,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2214,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-sm text-slate-700 font-mono font-semibold\",\n                    children: formatCurrency(associate.actualRevenue)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2225,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-sm text-slate-700 font-mono\",\n                    children: formatCurrency(associate.associateRtRate)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2228,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-center\",\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"outline\",\n                      size: \"sm\",\n                      className: \"border-blue-200 text-blue-700 hover:bg-blue-50 h-8 px-3\",\n                      children: [/*#__PURE__*/_jsxDEV(Bell, {\n                        className: \"h-3 w-3 mr-1\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2237,\n                        columnNumber: 27\n                      }, this), \"Notify\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2232,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2231,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"px-4 py-4 text-center\",\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"outline\",\n                      size: \"sm\",\n                      onClick: () => {\n                        navigate(`/projects/${associate.projectId}/associates/${associate.associateId}/daily`, {\n                          state: {\n                            month: activeMonth,\n                            year: activeYear,\n                            projectId: associate.projectId,\n                            projectName: associate.projectName,\n                            accountId: activeAccountId,\n                            accountName: activeAccountName,\n                            associateId: associate.associateId,\n                            associateName: associate.associateName\n                          }\n                        });\n                      },\n                      className: \"border-slate-200 text-slate-700 hover:bg-slate-50 h-8 w-8 p-0\",\n                      children: /*#__PURE__*/_jsxDEV(Search, {\n                        className: \"h-3 w-3\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 2264,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2242,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2241,\n                    columnNumber: 23\n                  }, this)]\n                }, associate.associateId, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2192,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2190,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2170,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2169,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 2110,\n    columnNumber: 5\n  }, this);\n};\n_s(AssociateLevel, \"th1k2AU8sX5ScMmUJdAge/LjmcE=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = AssociateLevel;\nexport default AssociateLevel;\nvar _c;\n$RefreshReg$(_c, \"AssociateLevel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useNavigate","useParams","useLocation","$","Bell","Download","Search","Users","Filter","Button","Card","CardContent","CardHeader","Select","SelectContent","SelectItem","SelectTrigger","SelectValue","Breadcrumbs","commonData","jsxDEV","_jsxDEV","AssociateLevel","_s","navigate","projectId","urlProjectId","location","tableRef","dataTableInstance","associates","setAssociates","loading","setLoading","error","setError","activeMonth","setActiveMonth","activeYear","setActiveYear","activeProjectId","setActiveProjectId","activeProjectName","setActiveProjectName","activeAccountId","setActiveAccountId","activeAccountName","setActiveAccountName","filterOption","setFilterOption","BACKEND_URL","locale","currency","minimumFractionDigits","maximumFractionDigits","currencySettings","formatCurrency","value","toLocaleString","style","link","document","createElement","href","rel","head","appendChild","body","fontFamily","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","fetchAssociateData","month","year","projId","resp","fetch","method","headers","JSON","stringify","ok","msg","text","Error","status","statusText","data","json","list","Array","isArray","filter","Boolean","length","first","projectName","accountId","accountName","e","console","message","state","acctId","acctName","projName","sm","sessionStorage","getItem","sy","sp","sn","sa","san","parseInt","setItem","toString","current","$tbl","fn","DataTable","isDataTable","destroy","dataTable","ext","search","pop","push","settings","dataIndex","varianceHoursMonthly","parseFloat","paging","searching","ordering","info","autoWidth","breadcrumbPath","name","page","handleNotifyAll","log","handleDownloadData","handleFilterChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","path","onValueChange","variant","size","ref","map","associate","associateId","associateName","esaID","totalCompanyHoursMonthly","totalClientHoursMonthly","actualRevenue","associateRtRate","_c","$RefreshReg$"],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/AssociateLevel.js"],"sourcesContent":["// import React from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs';\r\n\r\n// const AssociateLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const { projectId } = useParams();\r\n\r\n//   const associates = [\r\n//     {\r\n//       id: 'A001',\r\n//       name: 'Alice',\r\n//       ctsHour: 160,\r\n//       clientHour: 155,\r\n//       managerId: 'M001',\r\n//       managerName: 'John Doe',\r\n//       rate: 50,\r\n//       projectId: 'P001'\r\n//     },\r\n//     {\r\n//       id: 'A002',\r\n//       name: 'Bob',\r\n//       ctsHour: 140,\r\n//       clientHour: 140,\r\n//       managerId: 'M002',\r\n//       managerName: 'Jane Smith',\r\n//       rate: 60,\r\n//       projectId: 'P001'\r\n//     }\r\n//   ].filter(a => a.projectId === projectId);\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 w-100\"\r\n//         style={{\r\n//           maxWidth: '1100px',\r\n//           backgroundColor: '#ffffffee',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs\r\n//           path={[\r\n//             { name: 'PMO Dashboard', page: '' },\r\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//             { name: 'Project Level', page: 'projects' },\r\n//             { name: `Associates (${projectId})`, page: `projects/${projectId}/associates` }\r\n//           ]}\r\n//         />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n//           üë§ Associate Details ‚Äì Project: {projectId}\r\n//         </h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n//             <thead\r\n//               style={{\r\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\r\n//                 color: 'white'\r\n//               }}\r\n//             >\r\n//               <tr>\r\n//                 <th>ID</th>\r\n//                 <th>Name</th>\r\n//                 <th>CTS Hours</th>\r\n//                 <th>Client Hours</th>\r\n//                 <th>Variance</th>\r\n//                 <th>Manager</th>\r\n//                 <th>Rate</th>\r\n//                 <th className=\"text-center\">Notify</th>\r\n//                 <th className=\"text-center\">View</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {associates.map((a) => (\r\n//                 <tr key={a.id}>\r\n//                   <td>{a.id}</td>\r\n//                   <td>{a.name}</td>\r\n//                   <td>{a.ctsHour}</td>\r\n//                   <td>{a.clientHour}</td>\r\n//                   <td\r\n//                     className={`fw-semibold ${\r\n//                       a.ctsHour - a.clientHour > 0\r\n//                         ? 'text-danger'\r\n//                         : a.ctsHour - a.clientHour < 0\r\n//                         ? 'text-primary'\r\n//                         : 'text-success'\r\n//                     }`}\r\n//                   >\r\n//                     {a.ctsHour - a.clientHour}\r\n//                   </td>\r\n//                   <td>{a.managerName}</td>\r\n//                   <td>${a.rate}</td>\r\n//                   <td className=\"text-center\">\r\n//                     <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\r\n//                       Notify\r\n//                     </button>\r\n//                   </td>\r\n//                   <td className=\"text-center\">\r\n//                     <button\r\n//                       onClick={() => navigate(`/projects/${projectId}/associates/${a.id}`)}\r\n//                       className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                       title=\"View Associate\"\r\n//                     >\r\n//                       üîç\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//               {associates.length === 0 && (\r\n//                 <tr>\r\n//                   <td colSpan=\"9\" className=\"text-center text-muted py-4\">\r\n//                     No associates found for this project.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AssociateLevel;\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs'; // CORRECTED PATH: Breadcrumbs is one level up\r\n// import associateData from '../../data/associateData.json'; // CORRECTED PATH: data is two levels up\r\n// import projectData from '../../data/projectData.json'; // CORRECTED PATH: data is two levels up\r\n\r\n// const AssociateLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const { projectId } = useParams(); // Get projectId from URL parameters\r\n\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Filter associates based on projectId\r\n//   const associates = associateData.associates.filter(a => a.projectId === projectId);\r\n\r\n//   // Get project name for breadcrumbs\r\n//   const currentProject = projectData.projects.find(p => p.id === projectId);\r\n//   const projectName = currentProject ? currentProject.name : projectId; // Fallback to ID if not found\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 w-100\"\r\n//         style={{\r\n//           maxWidth: '1100px',\r\n//           backgroundColor: '#ffffffee',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs\r\n//           path={[\r\n//             { name: 'PMO Dashboard', page: '' },\r\n//             { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//             { name: 'Account Level', page: 'accounts' }, // Added for full path\r\n//             { name: `Projects (${currentProject?.accountName})`, page: `accounts/${currentProject?.accountId}/projects` }, // Added for full path\r\n//             { name: `Associates (${projectName})`, page: `projects/${projectId}/associates` }\r\n//           ]}\r\n//         />\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n//           üë§ Associate Details ‚Äì Project: {projectName}\r\n//         </h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n//             <thead\r\n//               style={{\r\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\r\n//                 color: 'white'\r\n//               }}\r\n//             >\r\n//               <tr>\r\n//                 <th>ID</th>\r\n//                 <th>Name</th>\r\n//                 <th>CTS Hours</th>\r\n//                 <th>Client Hours</th>\r\n//                 <th>Variance</th>\r\n//                 <th>Manager</th>\r\n//                 <th>Rate</th>\r\n//                 <th className=\"text-center\">Notify</th>\r\n//                 <th className=\"text-center\">View Daily</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {associates.length > 0 ? (\r\n//                 associates.map((a) => {\r\n//                   const variance = a.ctsHour - a.clientHour;\r\n//                   return (\r\n//                     <tr key={a.id}>\r\n//                       <td>{a.id}</td>\r\n//                       <td>{a.name}</td>\r\n//                       <td>{a.ctsHour}</td>\r\n//                       <td>{a.clientHour}</td>\r\n//                       <td\r\n//                         className={`fw-semibold ${\r\n//                           variance > 0\r\n//                             ? 'text-danger'\r\n//                             : variance < 0\r\n//                             ? 'text-primary'\r\n//                             : 'text-success'\r\n//                         }`}\r\n//                       >\r\n//                         {variance}\r\n//                       </td>\r\n//                       <td>{a.managerName}</td>\r\n//                       <td>${a.rate}</td>\r\n//                       <td className=\"text-center\">\r\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\r\n//                           Notify\r\n//                         </button>\r\n//                       </td>\r\n//                       <td className=\"text-center\">\r\n//                         <button\r\n//                           onClick={() => navigate(`/projects/${projectId}/associates/${a.id}`)}\r\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                           title=\"View Daily Hours\"\r\n//                         >\r\n//                           üîç\r\n//                         </button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   );\r\n//                 })\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"9\" className=\"text-center text-muted py-4\">\r\n//                     No associates found for this project.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AssociateLevel;\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\r\n\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\n// const AssociateLevel = () => {\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   const { projectId: urlProjectId } = useParams(); // Get projectId from URL parameters\r\n\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State for fetched associate data\r\n\r\n//   const [associates, setAssociates] = useState([]);\r\n\r\n//   // State for loading indicator\r\n\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // State for error messages\r\n\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // States to keep track of the context (month, year, projectId, accountId) for which data was last fetched\r\n\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n\r\n//   const [activeProjectId, setActiveProjectId] = useState(null);\r\n\r\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\r\n\r\n//   const [activeAccountId, setActiveAccountId] = useState(null);\r\n\r\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n\r\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Set font family on component mount\r\n\r\n//   useEffect(() => {\r\n\r\n//     const link = document.createElement('link');\r\n\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n\r\n//     link.rel = 'stylesheet';\r\n\r\n//     document.head.appendChild(link);\r\n\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n\r\n//   }, []);\r\n\r\n//   // Effect to handle context and fetch data\r\n\r\n//   useEffect(() => {\r\n\r\n//     const fetchAssociateData = async (month, year, projId) => {\r\n\r\n//       setLoading(true);\r\n\r\n//       setError(null);\r\n\r\n//       // Construct the request body as expected by your backend\r\n\r\n//       const requestBody = {\r\n\r\n//         month: month,\r\n\r\n//         year: year,\r\n\r\n//         projectId: projId // Pass the project ID\r\n\r\n//       };\r\n\r\n//       console.log(\"Fetching associate data with request body (POST):\", requestBody); // For debugging\r\n\r\n//       try {\r\n\r\n//         const response = await fetch(`${BACKEND_URL}/api/associate`, {\r\n\r\n//           method: 'POST', // As per your backend spec\r\n\r\n//           headers: {\r\n\r\n//             'Content-Type': 'application/json',\r\n\r\n//           },\r\n\r\n//           body: JSON.stringify(requestBody),\r\n\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n\r\n//           const errorText = await response.text();\r\n\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n\r\n//         }\r\n\r\n//         const data = await response.json();\r\n\r\n//         setAssociates(Array.isArray(data) ? data : [data].filter(Boolean));\r\n\r\n//         // Try to derive project and account names from fetched data if available\r\n\r\n//         if (data && data.length > 0) {\r\n\r\n//           if (data[0].projectName) setActiveProjectName(data[0].projectName);\r\n\r\n//           if (data[0].accountName) setActiveAccountName(data[0].accountName);\r\n\r\n//           if (data[0].accountId) setActiveAccountId(data[0].accountId); // Ensure accountId is set\r\n\r\n//         } else {\r\n\r\n//           // Fallback to stored names or IDs if data is empty or names are missing\r\n\r\n//           const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n\r\n//           const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n\r\n//           const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n\r\n//           if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\r\n\r\n//           if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\r\n\r\n//           if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\r\n\r\n//         }\r\n\r\n//       } catch (err) {\r\n\r\n//         console.error(\"Error fetching associate data:\", err);\r\n\r\n//         setError(`Failed to load associate data: ${err.message || \"Network error\"}`);\r\n\r\n//       } finally {\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     };\r\n\r\n//     // Logic to determine context for fetching\r\n\r\n//     let monthToUse = location.state?.month;\r\n\r\n//     let yearToUse = location.state?.year;\r\n\r\n//     let projectIdToUse = urlProjectId; // Always get projectId from URL params\r\n\r\n//     let accountIdToUse = location.state?.accountId; // Get accountId from state for breadcrumbs\r\n\r\n//     let accountNameToUse = location.state?.accountName; // Get accountName from state for breadcrumbs\r\n\r\n//     let projectNameToUse = location.state?.projectName; // Get project name from state for breadcrumbs\r\n\r\n//     // If context is not in location.state (e.g., on back navigation), check sessionStorage\r\n\r\n//     if (!monthToUse || !yearToUse || !projectIdToUse || !accountIdToUse || !projectNameToUse) {\r\n\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAssociateMonth');\r\n\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAssociateYear');\r\n\r\n//       const storedProjectId = sessionStorage.getItem('lastFetchedAssociateProjectId');\r\n\r\n//       const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n\r\n//       const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n\r\n//       const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n\r\n//       if (storedMonth && storedYear && storedProjectId) {\r\n\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n\r\n//         yearToUse = parseInt(storedYear, 10);\r\n\r\n//         projectIdToUse = storedProjectId;\r\n\r\n//         if (storedProjectName) projectNameToUse = storedProjectName;\r\n\r\n//         if (storedAccountId) accountIdToUse = storedAccountId;\r\n\r\n//         if (storedAccountName) accountNameToUse = storedAccountName;\r\n\r\n//       }\r\n\r\n//     }\r\n\r\n//     // If we have valid context, set active states and fetch data if needed\r\n\r\n//     if (monthToUse && yearToUse && projectIdToUse && accountIdToUse && projectNameToUse) {\r\n\r\n//       // Only fetch if the context has changed or if associates are empty\r\n\r\n//       if (\r\n\r\n//         monthToUse !== activeMonth ||\r\n\r\n//         yearToUse !== activeYear ||\r\n\r\n//         projectIdToUse !== activeProjectId ||\r\n\r\n//         associates.length === 0\r\n\r\n//       ) {\r\n\r\n//         setActiveMonth(monthToUse);\r\n\r\n//         setActiveYear(yearToUse);\r\n\r\n//         setActiveProjectId(projectIdToUse);\r\n\r\n//         setActiveProjectName(projectNameToUse); // Set project name from state\r\n\r\n//         setActiveAccountId(accountIdToUse); // Set account ID from state\r\n\r\n//         setActiveAccountName(accountNameToUse); // Set account name from state\r\n\r\n//         // Store current context in sessionStorage\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateMonth', monthToUse.toString());\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateYear', yearToUse.toString());\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateProjectId', projectIdToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateProjectName', projectNameToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateAccountId', accountIdToUse);\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateAccountName', accountNameToUse);\r\n\r\n//         fetchAssociateData(monthToUse, yearToUse, projectIdToUse);\r\n\r\n//       } else {\r\n\r\n//         // Data is already present for the active context, no need to fetch\r\n\r\n//         setLoading(false);\r\n\r\n//       }\r\n\r\n//     } else {\r\n\r\n//       // No valid context found, show error\r\n\r\n//       setError(\"Missing associate context (month, year, project ID, or account ID). Please go back and select a project.\");\r\n\r\n//       setLoading(false);\r\n\r\n//     }\r\n\r\n//   }, [location.state, urlProjectId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAccountId, activeAccountName, activeProjectName, associates.length]); // Dependencies for useEffect\r\n\r\n//   // Adjust breadcrumb path based on active states\r\n\r\n//   const breadcrumbPath = [\r\n\r\n//     { name: 'PMO Dashboard', page: '' },\r\n\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n\r\n//     { name: 'Account Level', page: 'accounts' },\r\n\r\n//     { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\r\n\r\n//     { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` }\r\n\r\n//   ];\r\n\r\n//   // Render loading state\r\n\r\n//   if (loading) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n\r\n//           <span className=\"visually-hidden\">Loading Associate Data...</span>\r\n\r\n//         </div>\r\n\r\n//         <p className=\"ms-3 text-primary\">Loading Associate Data...</p>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   // Render error state\r\n\r\n//   if (error) {\r\n\r\n//     return (\r\n\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/accounts/${activeAccountId}/projects`)}>\r\n\r\n//           Go to Project Level\r\n\r\n//         </button>\r\n\r\n//       </div>\r\n\r\n//     );\r\n\r\n//   }\r\n\r\n//   return (\r\n\r\n//     <div\r\n\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n\r\n//       style={{\r\n\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n\r\n//       }}\r\n\r\n//     >\r\n\r\n//       <div\r\n\r\n//         className=\"card shadow p-4 w-100\"\r\n\r\n//         style={{\r\n\r\n//           maxWidth: '1100px',\r\n\r\n//           backgroundColor: '#ffffffee',\r\n\r\n//           borderRadius: '1rem'\r\n\r\n//         }}\r\n\r\n//       >\r\n\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n\r\n//           üë§ Associate Details ‚Äì Project: {activeProjectName}\r\n\r\n//         </h2>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n\r\n//             <thead\r\n\r\n//               style={{\r\n\r\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\r\n\r\n//                 color: 'white'\r\n\r\n//               }}\r\n\r\n//             >\r\n\r\n//               <tr>\r\n\r\n//                 <th>Associate ID</th>\r\n\r\n//                 <th>Associate Name</th>\r\n\r\n//                 <th>Project ID</th>\r\n\r\n//                 <th>Project Name</th>\r\n\r\n//                 <th>PM ID</th>\r\n\r\n//                 <th>Total Company Hours (Monthly)</th>\r\n\r\n//                 <th>Total Client Hours (Monthly)</th>\r\n\r\n//                 <th>Variance Hours (Monthly)</th>\r\n\r\n//                 <th>Actual Revenue</th>\r\n\r\n//                 <th>Associate Rate</th>\r\n\r\n//                 <th className=\"text-center\">Notify</th>\r\n\r\n//                 <th className=\"text-center\">View Daily</th>\r\n\r\n//               </tr>\r\n\r\n//             </thead>\r\n\r\n//             <tbody>\r\n\r\n//               {associates.length > 0 ? (\r\n\r\n//                 associates.map((associate) => {\r\n\r\n//                   // const variance = associate.totalCompanyHoursMonthly - associate.totalClientHoursMonthly; // Assuming variance is Company - Client\r\n\r\n//                   return (\r\n\r\n//                     <tr key={associate.associateId}>\r\n\r\n//                       <td>{associate.associateId}</td>\r\n\r\n//                       <td>{associate.associateName}</td>\r\n\r\n//                       <td>{associate.projectId}</td>\r\n\r\n//                       <td>{associate.projectName}</td>\r\n\r\n//                       <td>{associate.esaID}</td>\r\n\r\n//                       <td>{associate.totalCompanyHoursMonthly}</td>\r\n\r\n//                       <td>{associate.totalClientHoursMonthly}</td>\r\n\r\n//                       <td>{associate.varianceHoursMonthly}</td>\r\n\r\n//                       {/* <td\r\n\r\n//             className={`fw-semibold ${\r\n\r\n//              variance > 0\r\n\r\n//               ? 'text-danger'\r\n\r\n//               : variance < 0\r\n\r\n//               ? 'text-primary'\r\n\r\n//               : 'text-success'\r\n\r\n//             }`}\r\n\r\n//            >\r\n\r\n//             {variance}\r\n\r\n//            </td> */}\r\n\r\n//                       <td>${associate.actualRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n\r\n//                       <td>${associate.associateRtRate.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n\r\n//                       <td className=\"text-center\">\r\n\r\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\r\n\r\n//                           Notify\r\n\r\n//                         </button>\r\n\r\n//                       </td>\r\n\r\n//                       <td className=\"text-center\">\r\n\r\n//                         <button\r\n\r\n//                           // Navigate to DateLevel, passing full context\r\n\r\n//                           onClick={() => {\r\n\r\n//                             const targetPath = `/projects/${associate.projectId}/associates/${associate.associateId}/daily`;\r\n\r\n//                             const stateToPass = {\r\n\r\n//                               month: activeMonth,\r\n\r\n//                               year: activeYear,\r\n\r\n//                               projectId: associate.projectId, // Use from current associate object\r\n\r\n//                               projectName: associate.projectName, // Use from current associate object\r\n\r\n//                               accountId: activeAccountId, // Use from AssociateLevel's state\r\n\r\n//                               accountName: activeAccountName, // Use from AssociateLevel's state\r\n\r\n//                               associateId: associate.associateId,\r\n\r\n//                               associateName: associate.associateName\r\n\r\n//                             };\r\n\r\n//                             // ADD THIS LOG: Check the path and state before navigation\r\n\r\n//                             console.log(\"Navigating to DateLevel with path:\", targetPath, \"and state:\", stateToPass);\r\n\r\n//                             navigate(targetPath, { state: stateToPass });\r\n\r\n//                           }}\r\n\r\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n\r\n//                           title=\"View Daily Hours\"\r\n\r\n//                         >\r\n\r\n//                           üîç\r\n\r\n//                         </button>\r\n\r\n//                       </td>\r\n\r\n//                     </tr>\r\n\r\n//                   );\r\n\r\n//                 })\r\n\r\n//               ) : (\r\n\r\n//                 <tr>\r\n\r\n//                   <td colSpan=\"11\" className=\"text-center text-muted py-4\">\r\n\r\n//                     No associates found for this project and period.\r\n\r\n//                   </td>\r\n\r\n//                 </tr>\r\n\r\n//               )}\r\n\r\n//             </tbody>\r\n\r\n//           </table>\r\n\r\n//         </div>\r\n\r\n//       </div>\r\n\r\n//     </div>\r\n\r\n//   );\r\n\r\n// };\r\n\r\n// export default AssociateLevel;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\n// const AssociateLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const { projectId: urlProjectId } = useParams(); // Get projectId from URL parameters\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State for fetched associate data\r\n//   const [associates, setAssociates] = useState([]);\r\n//   // State for loading indicator\r\n//   const [loading, setLoading] = useState(true);\r\n//   // State for error messages\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // States to keep track of the context (month, year, projectId, accountId) for which data was last fetched\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n//   const [activeProjectId, setActiveProjectId] = useState(null);\r\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\r\n//   const [activeAccountId, setActiveAccountId] = useState(null);\r\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n\r\n//   // **IMPORTANT**: Ensure this matches your actual Spring Boot backend URL\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Set font family on component mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Effect to handle context and fetch data\r\n//   useEffect(() => {\r\n//     const fetchAssociateData = async (month, year, projId) => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n\r\n//       // Construct the request body as expected by your backend\r\n//       const requestBody = {\r\n//         month: month,\r\n//         year: year,\r\n//         projectId: projId // Pass the project ID\r\n//       };\r\n\r\n//       console.log(\"Fetching associate data with request body (POST):\", requestBody); // For debugging\r\n\r\n//       try {\r\n//         const response = await fetch(`${BACKEND_URL}/api/associate`, {\r\n//           method: 'POST', // As per your backend spec\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//           body: JSON.stringify(requestBody),\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n//           const errorText = await response.text();\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n//         }\r\n\r\n//         const data = await response.json();\r\n//         setAssociates(Array.isArray(data) ? data : [data].filter(Boolean));\r\n        \r\n//         // Try to derive project and account names from fetched data if available\r\n//         if (data && data.length > 0) {\r\n//           if (data[0].projectName) setActiveProjectName(data[0].projectName);\r\n//           if (data[0].accountName) setActiveAccountName(data[0].accountName);\r\n//           if (data[0].accountId) setActiveAccountId(data[0].accountId); // Ensure accountId is set\r\n//         } else {\r\n//           // Fallback to stored names or IDs if data is empty or names are missing\r\n//           const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n//           const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n//           const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n\r\n//           if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\r\n//           if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\r\n//           if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\r\n//         }\r\n\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching associate data:\", err);\r\n//         setError(`Failed to load associate data: ${err.message || \"Network error\"}`);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     // Logic to determine context for fetching\r\n//     let monthToUse = location.state?.month;\r\n//     let yearToUse = location.state?.year;\r\n//     let projectIdToUse = urlProjectId; // Always get projectId from URL params\r\n//     let accountIdToUse = location.state?.accountId; // Get accountId from state for breadcrumbs\r\n//     let accountNameToUse = location.state?.accountName; // Get accountName from state for breadcrumbs\r\n//     let projectNameToUse = location.state?.projectName; // Get project name from state for breadcrumbs\r\n\r\n//     // If context is not in location.state (e.g., on back navigation), check sessionStorage\r\n//     if (!monthToUse || !yearToUse || !projectIdToUse || !accountIdToUse || !projectNameToUse) {\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAssociateMonth');\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAssociateYear');\r\n//       const storedProjectId = sessionStorage.getItem('lastFetchedAssociateProjectId');\r\n//       const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n//       const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n//       const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n\r\n//       if (storedMonth && storedYear && storedProjectId) {\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n//         yearToUse = parseInt(storedYear, 10);\r\n//         projectIdToUse = storedProjectId;\r\n//         if (storedProjectName) projectNameToUse = storedProjectName;\r\n//         if (storedAccountId) accountIdToUse = storedAccountId;\r\n//         if (storedAccountName) accountNameToUse = storedAccountName;\r\n//       }\r\n//     }\r\n\r\n//     // If we have valid context, set active states and fetch data if needed\r\n//     if (monthToUse && yearToUse && projectIdToUse && accountIdToUse && projectNameToUse) {\r\n//       // Only fetch if the context has changed or if associates are empty\r\n//       if (\r\n//         monthToUse !== activeMonth || \r\n//         yearToUse !== activeYear || \r\n//         projectIdToUse !== activeProjectId || \r\n//         associates.length === 0\r\n//       ) {\r\n//         setActiveMonth(monthToUse);\r\n//         setActiveYear(yearToUse);\r\n//         setActiveProjectId(projectIdToUse);\r\n//         setActiveProjectName(projectNameToUse); // Set project name from state\r\n//         setActiveAccountId(accountIdToUse);     // Set account ID from state\r\n//         setActiveAccountName(accountNameToUse); // Set account name from state\r\n        \r\n//         // Store current context in sessionStorage\r\n//         sessionStorage.setItem('lastFetchedAssociateMonth', monthToUse.toString());\r\n//         sessionStorage.setItem('lastFetchedAssociateYear', yearToUse.toString());\r\n//         sessionStorage.setItem('lastFetchedAssociateProjectId', projectIdToUse);\r\n//         sessionStorage.setItem('lastFetchedAssociateProjectName', projectNameToUse);\r\n//         sessionStorage.setItem('lastFetchedAssociateAccountId', accountIdToUse);\r\n//         sessionStorage.setItem('lastFetchedAssociateAccountName', accountNameToUse);\r\n\r\n//         fetchAssociateData(monthToUse, yearToUse, projectIdToUse);\r\n//       } else {\r\n//         // Data is already present for the active context, no need to fetch\r\n//         setLoading(false);\r\n//       }\r\n//     } else {\r\n//       // No valid context found, show error\r\n//       setError(\"Missing associate context (month, year, project ID, or account ID). Please go back and select a project.\");\r\n//       setLoading(false);\r\n//     }\r\n\r\n//   }, [location.state, urlProjectId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAccountId, activeAccountName, activeProjectName, associates.length]); // Dependencies for useEffect\r\n\r\n//   // Adjust breadcrumb path based on active states\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' },\r\n//     { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\r\n//     { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` }\r\n//   ];\r\n\r\n//   // Placeholder function for Notify All\r\n//   const handleNotifyAll = () => {\r\n//     alert('Notifying all associates for this project!');\r\n//     // Implement your actual notification logic here\r\n//   };\r\n\r\n//   // Placeholder function for Download Data\r\n//   const handleDownloadData = () => {\r\n//     alert('Downloading associate data for this project!');\r\n//     // Implement your actual data download logic here\r\n//     // You might want to format 'associates' data into CSV or Excel and trigger a download\r\n//   };\r\n\r\n//   // Render loading state\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n//           <span className=\"visually-hidden\">Loading Associate Data...</span>\r\n//         </div>\r\n//         <p className=\"ms-3 text-primary\">Loading Associate Data...</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // Render error state\r\n//   if (error) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/accounts/${activeAccountId}/projects`)}>\r\n//           Go to Project Level\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 w-100\"\r\n//         style={{\r\n//           maxWidth: '1100px',\r\n//           backgroundColor: '#ffffffee',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n\r\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n//           <h2 className=\"mb-0 fw-semibold text-dark\">\r\n//             üë§ Associate Details ‚Äì Project: {activeProjectName}\r\n//           </h2>\r\n//           <div className=\"d-flex gap-2\">\r\n//             <button \r\n//               className=\"btn btn-outline-info rounded-pill px-3\"\r\n//               onClick={handleNotifyAll}\r\n//             >\r\n//               Notify All\r\n//             </button>\r\n//             <button \r\n//               className=\"btn btn-outline-success rounded-pill px-3\"\r\n//               onClick={handleDownloadData}\r\n//             >\r\n//               Download Data\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n//             <thead\r\n//               style={{\r\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\r\n//                 color: 'white'\r\n//               }}\r\n//             >\r\n//               <tr>\r\n//                 <th>Associate ID</th>\r\n//                 <th>Associate Name</th>\r\n//                 <th>Project ID</th>\r\n//                 <th>Project Name</th>\r\n//                 <th>PM ID</th>\r\n//                 <th>Total Company Hours (Monthly)</th>\r\n//                 <th>Total Client Hours (Monthly)</th>\r\n//                 <th>Variance Hours (Monthly)</th>\r\n//                 <th>Actual Revenue</th>\r\n//                 <th>Associate Rate</th>\r\n//                 <th className=\"text-center\">Notify</th>\r\n//                 <th className=\"text-center\">View Daily</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {associates.length > 0 ? (\r\n//                 associates.map((associate) => {\r\n//                   // const variance = associate.totalCompanyHoursMonthly - associate.totalClientHoursMonthly; // Assuming variance is Company - Client\r\n//                   return (\r\n//                     <tr key={associate.associateId}>\r\n//                       <td>{associate.associateId}</td>\r\n//                       <td>{associate.associateName}</td>\r\n//                       <td>{associate.projectId}</td>\r\n//                       <td>{associate.projectName}</td>\r\n//                       <td>{associate.esaID}</td>\r\n//                       <td>{associate.totalCompanyHoursMonthly}</td>\r\n//                       <td>{associate.totalClientHoursMonthly}</td>\r\n//                       <td>{associate.varianceHoursMonthly}</td>\r\n//                       {/* <td\r\n//             className={`fw-semibold ${\r\n//               variance > 0\r\n//                 ? 'text-danger'\r\n//                 : variance < 0\r\n//                 ? 'text-primary'\r\n//                 : 'text-success'\r\n//             }`}\r\n//            >\r\n//             {variance}\r\n//            </td> */}\r\n//                       <td>${associate.actualRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n//                       <td>${associate.associateRtRate.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>\r\n//                       <td className=\"text-center\">\r\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\r\n//                           Notify\r\n//                         </button>\r\n//                       </td>\r\n//                       <td className=\"text-center\">\r\n//                         <button\r\n//                           // Navigate to DateLevel, passing full context\r\n//                           onClick={() => {\r\n//                             const targetPath = `/projects/${associate.projectId}/associates/${associate.associateId}/daily`;\r\n//                             const stateToPass = {\r\n//                               month: activeMonth,\r\n//                               year: activeYear,\r\n//                               projectId: associate.projectId, // Use from current associate object\r\n//                               projectName: associate.projectName, // Use from current associate object\r\n//                               accountId: activeAccountId, // Use from AssociateLevel's state\r\n//                               accountName: activeAccountName, // Use from AssociateLevel's state\r\n//                               associateId: associate.associateId,\r\n//                               associateName: associate.associateName\r\n//                             };\r\n//                             // ADD THIS LOG: Check the path and state before navigation\r\n//                             console.log(\"Navigating to DateLevel with path:\", targetPath, \"and state:\", stateToPass);\r\n//                             navigate(targetPath, { state: stateToPass });\r\n//                           }}\r\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                           title=\"View Daily Hours\"\r\n//                         >\r\n//                           üîç\r\n//                         </button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   );\r\n//                 })\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"11\" className=\"text-center text-muted py-4\">\r\n//                     No associates found for this project and period.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AssociateLevel;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\r\n// import Breadcrumbs from '../Breadcrumbs'; // Corrected path as per your project structure\r\n\r\n// // 1) Import your commonData.json\r\n// import commonData from '../../data/commonData.json';\r\n\r\n// const AssociateLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const { projectId: urlProjectId } = useParams(); // Get projectId from URL parameters\r\n//   const location = useLocation(); // Hook to access location state\r\n\r\n//   // State for fetched associate data\r\n//   const [associates, setAssociates] = useState([]);\r\n//   // State for loading indicator\r\n//   const [loading, setLoading] = useState(true);\r\n//   // State for error messages\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // States to keep track of the context (month, year, projectId, accountId) for which data was last fetched\r\n//   const [activeMonth, setActiveMonth] = useState(null);\r\n//   const [activeYear, setActiveYear] = useState(null);\r\n//   const [activeProjectId, setActiveProjectId] = useState(null);\r\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\r\n//   const [activeAccountId, setActiveAccountId] = useState(null);\r\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   //Destructure your currency settings\r\n//   const {\r\n//     locale,\r\n//     currency,\r\n//     minimumFractionDigits,\r\n//     maximumFractionDigits\r\n//   } = commonData.currencySettings;\r\n\r\n//   // 3) Utility to format any number to your centralized currency format\r\n//   const formatCurrency = (value = 0) =>\r\n//     value.toLocaleString(locale, {\r\n//       style: 'currency',\r\n//       currency,\r\n//       minimumFractionDigits,\r\n//       maximumFractionDigits\r\n//     });\r\n\r\n//   // Set font family on component mount\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Effect to handle context and fetch data\r\n//   useEffect(() => {\r\n//     const fetchAssociateData = async (month, year, projId) => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n\r\n//       // Construct the request body as expected by your backend\r\n//       const requestBody = {\r\n//         month: month,\r\n//         year: year,\r\n//         projectId: projId // Pass the project ID\r\n//       };\r\n\r\n//       console.log(\"Fetching associate data with request body (POST):\", requestBody); // For debugging\r\n\r\n//       try {\r\n//         const response = await fetch(`${BACKEND_URL}/api/associate`, {\r\n//           method: 'POST', // As per your backend spec\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//           },\r\n//           body: JSON.stringify(requestBody),\r\n//         });\r\n\r\n//         if (!response.ok) {\r\n//           const errorText = await response.text();\r\n//           throw new Error(`HTTP error! status: ${response.status}, message: ${errorText || response.statusText}`);\r\n//         }\r\n\r\n//         const data = await response.json();\r\n//         setAssociates(Array.isArray(data) ? data : [data].filter(Boolean));\r\n\r\n//         // Try to derive project and account names from fetched data if available\r\n//         if (data && data.length > 0) {\r\n//           if (data[0].projectName) setActiveProjectName(data[0].projectName);\r\n//           if (data[0].accountId) setActiveAccountId(data[0].accountId);\r\n//           if (data[0].accountName) setActiveAccountName(data[0].accountName);\r\n//         } else {\r\n//           // Fallback to stored names or IDs if data is empty or names are missing\r\n//           const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n//           const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n//           const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n\r\n//           if (storedProjectName) setActiveProjectName(storedProjectName); else setActiveProjectName(projId);\r\n//           if (storedAccountName) setActiveAccountName(storedAccountName); else setActiveAccountName('Unknown Account');\r\n//           if (storedAccountId) setActiveAccountId(storedAccountId); else setActiveAccountId('Unknown Account ID');\r\n//         }\r\n\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching associate data:\", err);\r\n//         setError(`Failed to load associate data: ${err.message || \"Network error\"}`);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     // Logic to determine context for fetching\r\n//     let monthToUse = location.state?.month;\r\n//     let yearToUse = location.state?.year;\r\n//     let projectIdToUse = urlProjectId; // Always get projectId from URL params\r\n//     let accountIdToUse = location.state?.accountId; // Get accountId from state for breadcrumbs\r\n//     let accountNameToUse = location.state?.accountName; // Get accountName from state for breadcrumbs\r\n//     let projectNameToUse = location.state?.projectName; // Get project name from state for breadcrumbs\r\n\r\n//     // If context is not in location.state (e.g., on back navigation), check sessionStorage\r\n//     if (!monthToUse || !yearToUse || !projectIdToUse || !accountIdToUse || !projectNameToUse) {\r\n//       const storedMonth = sessionStorage.getItem('lastFetchedAssociateMonth');\r\n//       const storedYear = sessionStorage.getItem('lastFetchedAssociateYear');\r\n//       const storedProjectId = sessionStorage.getItem('lastFetchedAssociateProjectId');\r\n//       const storedProjectName = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n//       const storedAccountId = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n//       const storedAccountName = sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n\r\n//       if (storedMonth && storedYear && storedProjectId) {\r\n//         monthToUse = parseInt(storedMonth, 10);\r\n//         yearToUse = parseInt(storedYear, 10);\r\n//         projectIdToUse = storedProjectId;\r\n//         if (storedProjectName) projectNameToUse = storedProjectName;\r\n//         if (storedAccountId) accountIdToUse = storedAccountId;\r\n//         if (storedAccountName) accountNameToUse = storedAccountName;\r\n//       }\r\n//     }\r\n\r\n//     // If we have valid context, set active states and fetch data if needed\r\n//     if (monthToUse && yearToUse && projectIdToUse && accountIdToUse && projectNameToUse) {\r\n//       // Only fetch if the context has changed or if associates are empty\r\n//       if (\r\n//         monthToUse !== activeMonth ||\r\n//         yearToUse !== activeYear ||\r\n//         projectIdToUse !== activeProjectId ||\r\n//         associates.length === 0\r\n//       ) {\r\n//         setActiveMonth(monthToUse);\r\n//         setActiveYear(yearToUse);\r\n//         setActiveProjectId(projectIdToUse);\r\n//         setActiveProjectName(projectNameToUse); // Set project name from state\r\n//         setActiveAccountId(accountIdToUse);     // Set account ID from state\r\n//         setActiveAccountName(accountNameToUse); // Set account name from state\r\n\r\n//         // Store current context in sessionStorage\r\n//         sessionStorage.setItem('lastFetchedAssociateMonth', monthToUse.toString());\r\n//         sessionStorage.setItem('lastFetchedAssociateYear', yearToUse.toString());\r\n//         sessionStorage.setItem('lastFetchedAssociateProjectId', projectIdToUse);\r\n//         sessionStorage.setItem('lastFetchedAssociateProjectName', projectNameToUse);\r\n//         sessionStorage.setItem('lastFetchedAssociateAccountId', accountIdToUse);\r\n//         sessionStorage.setItem('lastFetchedAssociateAccountName', accountNameToUse);\r\n\r\n//         fetchAssociateData(monthToUse, yearToUse, projectIdToUse);\r\n//       } else {\r\n//         // Data is already present for the active context, no need to fetch\r\n//         setLoading(false);\r\n//       }\r\n//     } else {\r\n//       // No valid context found, show error\r\n//       setError(\"Missing associate context (month, year, project ID, or account ID). Please go back and select a project.\");\r\n//       setLoading(false);\r\n//     }\r\n\r\n//   }, [location.state, urlProjectId, BACKEND_URL, activeMonth, activeYear, activeProjectId, activeAccountId, activeAccountName, activeProjectName, associates.length]); // Dependencies for useEffect\r\n\r\n//   // Adjust breadcrumb path based on active states\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' },\r\n//     { name: `Projects (${activeAccountName})`, page: `accounts/${activeAccountId}/projects` },\r\n//     { name: `Associates (${activeProjectName})`, page: `projects/${activeProjectId}/associates` }\r\n//   ];\r\n\r\n//   // Placeholder function for Notify All\r\n//   const handleNotifyAll = () => {\r\n//     alert('Notifying all associates for this project!');\r\n//     // Implement your actual notification logic here\r\n//   };\r\n\r\n//   // Placeholder function for Download Data\r\n//   const handleDownloadData = () => {\r\n//     alert('Downloading associate data for this project!');\r\n//     // Implement your actual data download logic here\r\n//     // You might want to format 'associates' data into CSV or Excel and trigger a download\r\n//   };\r\n\r\n//   // Render loading state\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n//         <div className=\"spinner-border text-primary\" role=\"status\">\r\n//           <span className=\"visually-hidden\">Loading Associate Data...</span>\r\n//         </div>\r\n//         <p className=\"ms-3 text-primary\">Loading Associate Data...</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   // Render error state\r\n//   if (error) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n//         <button className=\"btn btn-primary mt-3\" onClick={() => navigate(`/accounts/${activeAccountId}/projects`)}>\r\n//           Go to Project Level\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 w-100\"\r\n//         style={{\r\n//           maxWidth: '1100px',\r\n//           backgroundColor: '#ffffffee',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n\r\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n//           <h2 className=\"mb-0 fw-semibold text-dark\">\r\n//             üë§ Associate Details ‚Äì Project: {activeProjectName}\r\n//           </h2>\r\n//           <div className=\"d-flex gap-2\">\r\n//             <button\r\n//               className=\"btn btn-outline-info rounded-pill px-3\"\r\n//               onClick={handleNotifyAll}\r\n//             >\r\n//               Notify All\r\n//             </button>\r\n//             <button\r\n//               className=\"btn btn-outline-success rounded-pill px-3\"\r\n//               onClick={handleDownloadData}\r\n//             >\r\n//               Download Data\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table className=\"table table-hover table-borderless align-middle mb-0\">\r\n//             <thead\r\n//               style={{\r\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\r\n//                 color: 'white'\r\n//               }}\r\n//             >\r\n//               <tr>\r\n//                 <th>Associate ID</th>\r\n//                 <th>Associate Name</th>\r\n//                 <th>Project ID</th>\r\n//                 <th>Project Name</th>\r\n//                 <th>PM ID</th>\r\n//                 <th>Total Company Hours (Monthly)</th>\r\n//                 <th>Total Client Hours (Monthly)</th>\r\n//                 <th>Variance Hours (Monthly)</th>\r\n//                 <th>Actual Revenue</th>\r\n//                 <th>Associate Rate</th>\r\n//                 <th className=\"text-center\">Notify</th>\r\n//                 <th className=\"text-center\">View Daily</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {associates.length > 0 ? (\r\n//                 associates.map((associate) => {\r\n//                   return (\r\n//                     <tr key={associate.associateId}>\r\n//                       <td>{associate.associateId}</td>\r\n//                       <td>{associate.associateName}</td>\r\n//                       <td>{associate.projectId}</td>\r\n//                       <td>{associate.projectName}</td>\r\n//                       <td>{associate.esaID}</td>\r\n//                       <td>{associate.totalCompanyHoursMonthly}</td>\r\n//                       <td>{associate.totalClientHoursMonthly}</td>\r\n//                       <td>{associate.varianceHoursMonthly}</td>\r\n//                       {/* Apply the formatCurrency function here */}\r\n//                       <td>{formatCurrency(associate.actualRevenue)}</td>\r\n//                       <td>{formatCurrency(associate.associateRtRate)}</td>\r\n//                       <td className=\"text-center\">\r\n//                         <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\r\n//                           Notify\r\n//                         </button>\r\n//                       </td>\r\n//                       <td className=\"text-center\">\r\n//                         <button\r\n//                           // Navigate to DateLevel, passing full context\r\n//                           onClick={() => {\r\n//                             const targetPath = `/projects/${associate.projectId}/associates/${associate.associateId}/daily`;\r\n//                             const stateToPass = {\r\n//                               month: activeMonth,\r\n//                               year: activeYear,\r\n//                               projectId: associate.projectId, // Use from current associate object\r\n//                               projectName: associate.projectName, // Use from current associate object\r\n//                               accountId: activeAccountId, // Use from AssociateLevel's state\r\n//                               accountName: activeAccountName, // Use from AssociateLevel's state\r\n//                               associateId: associate.associateId,\r\n//                               associateName: associate.associateName\r\n//                             };\r\n//                             // ADD THIS LOG: Check the path and state before navigation\r\n//                             console.log(\"Navigating to DateLevel with path:\", targetPath, \"and state:\", stateToPass);\r\n//                             navigate(targetPath, { state: stateToPass });\r\n//                           }}\r\n//                           className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                           title=\"View Daily Hours\"\r\n//                         >\r\n//                           üîç\r\n//                         </button>\r\n//                       </td>\r\n//                     </tr>\r\n//                   );\r\n//                 })\r\n//               ) : (\r\n//                 <tr>\r\n//                   <td colSpan=\"11\" className=\"text-center text-muted py-4\">\r\n//                     No associates found for this project and period.\r\n//                   </td>\r\n//                 </tr>\r\n//               )}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AssociateLevel;\r\n\r\n// src/components/Details/AssociateLevel.js\r\n\r\n// import React, { useRef, useEffect, useState } from 'react';\r\n// import { useNavigate, useParams, useLocation } from 'react-router-dom';\r\n// import $ from 'jquery';\r\n// import 'datatables.net';\r\n// import 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\n// import Breadcrumbs from '../Breadcrumbs';\r\n// import commonData from '../../data/commonData.json';\r\n\r\n// const AssociateLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const { projectId: urlProjectId } = useParams();\r\n//   const location = useLocation();\r\n//   const tableRef = useRef(null);\r\n\r\n//   const [associates, setAssociates]           = useState([]);\r\n//   const [loading, setLoading]                 = useState(true);\r\n//   const [error, setError]                     = useState(null);\r\n//   const [activeMonth, setActiveMonth]         = useState(null);\r\n//   const [activeYear, setActiveYear]           = useState(null);\r\n//   const [activeProjectId, setActiveProjectId] = useState(null);\r\n//   const [activeProjectName, setActiveProjectName] = useState('Loading...');\r\n//   const [activeAccountId, setActiveAccountId]     = useState(null);\r\n//   const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n\r\n//   const BACKEND_URL = 'http://localhost:8081';\r\n\r\n//   // Currency formatter from commonData.json\r\n//   const {\r\n//     locale,\r\n//     currency,\r\n//     minimumFractionDigits,\r\n//     maximumFractionDigits\r\n//   } = commonData.currencySettings;\r\n//   const formatCurrency = (value = 0) =>\r\n//     value.toLocaleString(locale, {\r\n//       style: 'currency',\r\n//       currency,\r\n//       minimumFractionDigits,\r\n//       maximumFractionDigits\r\n//     });\r\n\r\n//   // Load Poppins font once\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href =\r\n//       'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // Fetch associates based on context\r\n//   useEffect(() => {\r\n//     const fetchAssociateData = async (month, year, projId) => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         const resp = await fetch(`${BACKEND_URL}/api/associate`, {\r\n//           method: 'POST',\r\n//           headers: { 'Content-Type': 'application/json' },\r\n//           body: JSON.stringify({ month, year, projectId: projId })\r\n//         });\r\n//         if (!resp.ok) {\r\n//           const msg = await resp.text();\r\n//           throw new Error(`status: ${resp.status}, message: ${msg || resp.statusText}`);\r\n//         }\r\n//         const data = await resp.json();\r\n//         const list = Array.isArray(data) ? data : [data].filter(Boolean);\r\n//         setAssociates(list);\r\n\r\n//         if (list.length > 0) {\r\n//           const first = list[0];\r\n//           setActiveProjectName(first.projectName || projId);\r\n//           setActiveAccountId(first.accountId || activeAccountId);\r\n//           setActiveAccountName(first.accountName || activeAccountName);\r\n//         }\r\n//       } catch (e) {\r\n//         console.error('Error fetching associate data:', e);\r\n//         setError(`Failed to load associate data: ${e.message}`);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     let month  = location.state?.month;\r\n//     let year   = location.state?.year;\r\n//     let projId = urlProjectId;\r\n//     let acctId = location.state?.accountId;\r\n//     let acctName = location.state?.accountName;\r\n//     let projName = location.state?.projectName;\r\n\r\n//     if (!month || !year || !acctId || !projName) {\r\n//       const sm = sessionStorage.getItem('lastFetchedAssociateMonth');\r\n//       const sy = sessionStorage.getItem('lastFetchedAssociateYear');\r\n//       const sp = sessionStorage.getItem('lastFetchedAssociateProjectId');\r\n//       const sn = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n//       const sa = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n//       const san= sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n//       if (sm && sy && sp) {\r\n//         month = parseInt(sm, 10);\r\n//         year  = parseInt(sy, 10);\r\n//         projId = sp;\r\n//         projName = sn;\r\n//         acctId = sa;\r\n//         acctName = san;\r\n//       }\r\n//     }\r\n\r\n//     if (month && year && projId && acctId && projName) {\r\n//       if (\r\n//         month !== activeMonth ||\r\n//         year  !== activeYear ||\r\n//         projId !== activeProjectId ||\r\n//         associates.length === 0\r\n//       ) {\r\n//         setActiveMonth(month);\r\n//         setActiveYear(year);\r\n//         setActiveProjectId(projId);\r\n//         setActiveProjectName(projName);\r\n//         setActiveAccountId(acctId);\r\n//         setActiveAccountName(acctName);\r\n\r\n//         sessionStorage.setItem('lastFetchedAssociateMonth', month.toString());\r\n//         sessionStorage.setItem('lastFetchedAssociateYear', year.toString());\r\n//         sessionStorage.setItem('lastFetchedAssociateProjectId', projId);\r\n//         sessionStorage.setItem('lastFetchedAssociateProjectName', projName);\r\n//         sessionStorage.setItem('lastFetchedAssociateAccountId', acctId);\r\n//         sessionStorage.setItem('lastFetchedAssociateAccountName', acctName);\r\n\r\n//         fetchAssociateData(month, year, projId);\r\n//       } else {\r\n//         setLoading(false);\r\n//       }\r\n//     } else {\r\n//       setError(\r\n//         'Missing associate context (month, year, project, or account). Please go back.'\r\n//       );\r\n//       setLoading(false);\r\n//     }\r\n//   }, [\r\n//     location.state,\r\n//     urlProjectId,\r\n//     activeMonth,\r\n//     activeYear,\r\n//     activeProjectId,\r\n//     associates.length\r\n//   ]);\r\n\r\n//   // Initialize DataTables when associates load\r\n//   useEffect(() => {\r\n//     if (!loading && associates.length > 0 && tableRef.current) {\r\n//       const $tbl = $(tableRef.current);\r\n//       if ($.fn.DataTable.isDataTable($tbl)) {\r\n//         $tbl.DataTable().destroy();\r\n//       }\r\n//       $tbl.DataTable({\r\n//         paging:    true,\r\n//         searching: true,\r\n//         ordering:  true,\r\n//         info:      true,\r\n//         autoWidth: false\r\n//       });\r\n//     }\r\n//     return () => {\r\n//       if (tableRef.current) {\r\n//         const $tbl = $(tableRef.current);\r\n//         if ($.fn.DataTable.isDataTable($tbl)) {\r\n//           $tbl.DataTable().destroy();\r\n//         }\r\n//       }\r\n//     };\r\n//   }, [loading, associates]);\r\n\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' },\r\n//     {\r\n//       name: `Projects (${activeAccountName})`,\r\n//       page: `accounts/${activeAccountId}/projects`\r\n//     },\r\n//     {\r\n//       name: `Associates (${activeProjectName})`,\r\n//       page: `projects/${activeProjectId}/associates`\r\n//     }\r\n//   ];\r\n\r\n//   const handleNotifyAll = () => {\r\n//     alert('Notifying all associates for this project!');\r\n//   };\r\n\r\n//   const handleDownloadData = () => {\r\n//     alert('Downloading associate data for this project!');\r\n//   };\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex justify-content-center align-items-center\">\r\n//         <div className=\"spinner-border text-primary\" role=\"status\" />\r\n//         <p className=\"ms-3 text-primary\">Loading Associate Data...</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (error) {\r\n//     return (\r\n//       <div className=\"min-vh-100 d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//         <p className=\"fs-4\">Error: {error}</p>\r\n//         <button\r\n//           className=\"btn btn-primary mt-3\"\r\n//           onClick={() =>\r\n//             navigate(`/accounts/${activeAccountId}/projects`)\r\n//           }\r\n//         >\r\n//           Go to Project Level\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//         fontFamily: \"'Poppins', sans-serif\"\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 w-100\"\r\n//         style={{\r\n//           maxWidth: '1100px',\r\n//           backgroundColor: '#ffffffee',\r\n//           borderRadius: '1rem'\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n\r\n//         <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n//           <h2 className=\"mb-0 fw-semibold text-dark\">\r\n//             üë§ Associate Details ‚Äì Project: {activeProjectName}\r\n//           </h2>\r\n//           <div className=\"d-flex gap-2\">\r\n//             <button\r\n//               className=\"btn btn-outline-info rounded-pill px-3\"\r\n//               onClick={handleNotifyAll}\r\n//             >\r\n//               Notify All\r\n//             </button>\r\n//             <button\r\n//               className=\"btn btn-outline-success rounded-pill px-3\"\r\n//               onClick={handleDownloadData}\r\n//             >\r\n//               Download Data\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"table-responsive rounded\">\r\n//           <table\r\n//             ref={tableRef}\r\n//             className=\"display table table-hover table-borderless align-middle mb-0\"\r\n//             style={{ width: '100%' }}\r\n//           >\r\n//             <thead\r\n//               style={{\r\n//                 background: 'linear-gradient(to right, #0ea5e9, #2563eb)',\r\n//                 color: 'white'\r\n//               }}\r\n//             >\r\n//               <tr>\r\n//                 <th>Associate ID</th>\r\n//                 <th>Associate Name</th>\r\n//                 <th>Project ID</th>\r\n//                 <th>Project Name</th>\r\n//                 <th>PM ID</th>\r\n//                 <th>Total Company Hours (Monthly)</th>\r\n//                 <th>Total Client Hours (Monthly)</th>\r\n//                 <th>Variance Hours (Monthly)</th>\r\n//                 <th>Actual Revenue</th>\r\n//                 <th>Associate Rate</th>\r\n//                 <th className=\"text-center\">Notify</th>\r\n//                 <th className=\"text-center\">View Daily</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {associates.map((associate) => (\r\n//                 <tr key={associate.associateId}>\r\n//                   <td>{associate.associateId}</td>\r\n//                   <td>{associate.associateName}</td>\r\n//                   <td>{associate.projectId}</td>\r\n//                   <td>{associate.projectName}</td>\r\n//                   <td>{associate.esaID}</td>\r\n//                   <td>{associate.totalCompanyHoursMonthly}</td>\r\n//                   <td>{associate.totalClientHoursMonthly}</td>\r\n//                   <td>{associate.varianceHoursMonthly}</td>\r\n//                   <td>{formatCurrency(associate.actualRevenue)}</td>\r\n//                   <td>{formatCurrency(associate.associateRtRate)}</td>\r\n//                   <td className=\"text-center\">\r\n//                     <button className=\"btn btn-sm btn-outline-info rounded-pill px-3\">\r\n//                       Notify\r\n//                     </button>\r\n//                   </td>\r\n//                   <td className=\"text-center\">\r\n//                     <button\r\n//                       className=\"btn btn-sm btn-outline-primary rounded-circle\"\r\n//                       onClick={() => {\r\n//                         navigate(\r\n//                           `/projects/${associate.projectId}/associates/${associate.associateId}/daily`,\r\n//                           {\r\n//                             state: {\r\n//                               month: activeMonth,\r\n//                               year: activeYear,\r\n//                               projectId: associate.projectId,\r\n//                               projectName: associate.projectName,\r\n//                               accountId: activeAccountId,\r\n//                               accountName: activeAccountName,\r\n//                               associateId: associate.associateId,\r\n//                               associateName: associate.associateName\r\n//                             }\r\n//                           }\r\n//                         );\r\n//                       }}\r\n//                     >\r\n//                       üîç\r\n//                     </button>\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         </div>\r\n\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AssociateLevel;\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport $ from 'jquery';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\nimport { Bell, Download, Search, Users, Filter } from 'lucide-react';\r\n\r\n// Corrected import paths for UI components\r\nimport { Button } from '../../components/ui/button';\r\nimport { Card, CardContent, CardHeader } from '../../components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';\r\n// Removed the import for Badge as it's not present\r\n// import { Badge } from '../../components/ui/badge'; \r\n\r\nimport Breadcrumbs from '../Breadcrumbs';\r\nimport commonData from '../../data/commonData.json';\r\n\r\nconst AssociateLevel = () => {\r\n  const navigate = useNavigate();\r\n  const { projectId: urlProjectId } = useParams();\r\n  const location = useLocation();\r\n  const tableRef = useRef(null);\r\n  const dataTableInstance = useRef(null);\r\n\r\n  const [associates, setAssociates] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [activeMonth, setActiveMonth] = useState(null);\r\n  const [activeYear, setActiveYear] = useState(null);\r\n  const [activeProjectId, setActiveProjectId] = useState(null);\r\n  const [activeProjectName, setActiveProjectName] = useState('Loading...');\r\n  const [activeAccountId, setActiveAccountId] = useState(null);\r\n  const [activeAccountName, setActiveAccountName] = useState('Loading...');\r\n  const [filterOption, setFilterOption] = useState('showAll');\r\n\r\n  const BACKEND_URL = 'http://localhost:8081';\r\n\r\n  // Currency formatter from commonData.json\r\n  const {\r\n    locale,\r\n    currency,\r\n    minimumFractionDigits,\r\n    maximumFractionDigits\r\n  } = commonData.currencySettings;\r\n\r\n  const formatCurrency = (value = 0) =>\r\n    value.toLocaleString(locale, {\r\n      style: 'currency',\r\n      currency,\r\n      minimumFractionDigits,\r\n      maximumFractionDigits\r\n    });\r\n\r\n  // Load Poppins font once\r\n  useEffect(() => {\r\n    const link = document.createElement('link');\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n    link.rel = 'stylesheet';\r\n    document.head.appendChild(link);\r\n    document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n  }, []);\r\n\r\n  // Fetch associates based on context\r\n  useEffect(() => {\r\n    const fetchAssociateData = async (month, year, projId) => {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const resp = await fetch(`${BACKEND_URL}/api/associate`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ month, year, projectId: projId })\r\n        });\r\n\r\n        if (!resp.ok) {\r\n          const msg = await resp.text();\r\n          throw new Error(`status: ${resp.status}, message: ${msg || resp.statusText}`);\r\n        }\r\n\r\n        const data = await resp.json();\r\n        const list = Array.isArray(data) ? data : [data].filter(Boolean);\r\n        setAssociates(list);\r\n\r\n        if (list.length > 0) {\r\n          const first = list[0];\r\n          setActiveProjectName(first.projectName || projId);\r\n          setActiveAccountId(first.accountId || activeAccountId);\r\n          setActiveAccountName(first.accountName || activeAccountName);\r\n        }\r\n      } catch (e) {\r\n        console.error('Error fetching associate data:', e);\r\n        setError(`Failed to load associate data: ${e.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    let month = location.state?.month;\r\n    let year = location.state?.year;\r\n    let projId = urlProjectId;\r\n    let acctId = location.state?.accountId;\r\n    let acctName = location.state?.accountName;\r\n    let projName = location.state?.projectName;\r\n\r\n    if (!month || !year || !acctId || !projName) {\r\n      const sm = sessionStorage.getItem('lastFetchedAssociateMonth');\r\n      const sy = sessionStorage.getItem('lastFetchedAssociateYear');\r\n      const sp = sessionStorage.getItem('lastFetchedAssociateProjectId');\r\n      const sn = sessionStorage.getItem('lastFetchedAssociateProjectName');\r\n      const sa = sessionStorage.getItem('lastFetchedAssociateAccountId');\r\n      const san = sessionStorage.getItem('lastFetchedAssociateAccountName');\r\n\r\n      if (sm && sy && sp) {\r\n        month = parseInt(sm, 10);\r\n        year = parseInt(sy, 10);\r\n        projId = sp;\r\n        projName = sn;\r\n        acctId = sa;\r\n        acctName = san;\r\n      }\r\n    }\r\n\r\n    if (month && year && projId && acctId && projName) {\r\n      if (\r\n        month !== activeMonth ||\r\n        year !== activeYear ||\r\n        projId !== activeProjectId ||\r\n        associates.length === 0\r\n      ) {\r\n        setActiveMonth(month);\r\n        setActiveYear(year);\r\n        setActiveProjectId(projId);\r\n        setActiveProjectName(projName);\r\n        setActiveAccountId(acctId);\r\n        setActiveAccountName(acctName);\r\n\r\n        sessionStorage.setItem('lastFetchedAssociateMonth', month.toString());\r\n        sessionStorage.setItem('lastFetchedAssociateYear', year.toString());\r\n        sessionStorage.setItem('lastFetchedAssociateProjectId', projId);\r\n        sessionStorage.setItem('lastFetchedAssociateProjectName', projName);\r\n        sessionStorage.setItem('lastFetchedAssociateAccountId', acctId);\r\n        sessionStorage.setItem('lastFetchedAssociateAccountName', acctName);\r\n\r\n        fetchAssociateData(month, year, projId);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setError('Missing associate context (month, year, project, or account). Please go back.');\r\n      setLoading(false);\r\n    }\r\n  }, [location.state, urlProjectId, activeMonth, activeYear, activeProjectId, associates.length]);\r\n\r\n  // Initialize DataTables when associates load or filter changes\r\n  useEffect(() => {\r\n    if (!loading && tableRef.current) {\r\n      const $tbl = $(tableRef.current);\r\n      if ($.fn.DataTable.isDataTable($tbl)) {\r\n        dataTableInstance.current.destroy(); // Destroy existing instance\r\n      }\r\n\r\n      // Remove any previously added custom search functions\r\n      $.fn.dataTable.ext.search.pop(); \r\n\r\n      // Apply custom filter based on filterOption state\r\n      if (filterOption === 'varianceAboveZero') {\r\n        $.fn.dataTable.ext.search.push(\r\n          (settings, data, dataIndex) => {\r\n            // Assuming 'Variance Hours (Monthly)' is the 8th column (index 7)\r\n            const varianceHoursMonthly = parseFloat(data[7]) || 0; \r\n            return varianceHoursMonthly !== 0;\r\n          }\r\n        );\r\n      }\r\n\r\n      // Initialize DataTables with no column ordering\r\n      dataTableInstance.current = $tbl.DataTable({\r\n        paging: true,\r\n        searching: true,\r\n        ordering: false, // Removed individual column sorting\r\n        info: true,\r\n        autoWidth: false\r\n      });\r\n    }\r\n\r\n    // Cleanup function for DataTables\r\n    return () => {\r\n      if (dataTableInstance.current) {\r\n        dataTableInstance.current.destroy();\r\n        dataTableInstance.current = null;\r\n      }\r\n      $.fn.dataTable.ext.search.pop(); // Clean up custom search on unmount\r\n    };\r\n  }, [loading, associates, filterOption]); // Re-run effect when filterOption changes\r\n\r\n  const breadcrumbPath = [\r\n    { name: 'PMO Dashboard', page: '' },\r\n    { name: 'Revenue Forecast - Early View', page: 'upload' },\r\n    { name: 'Account Level', page: 'accounts' },\r\n    {\r\n      name: `Projects (${activeAccountName})`,\r\n      page: `accounts/${activeAccountId}/projects`\r\n    },\r\n    {\r\n      name: `Associates (${activeProjectName})`,\r\n      page: `projects/${activeProjectId}/associates`\r\n    }\r\n  ];\r\n\r\n  const handleNotifyAll = () => {\r\n    // Replace alert with a custom modal/message box for better UX\r\n    console.log('Notifying all associates for this project!');\r\n  };\r\n\r\n  const handleDownloadData = () => {\r\n    // Replace alert with a custom modal/message box for better UX\r\n    console.log('Downloading associate data for this project!');\r\n  };\r\n\r\n  // Handler for the variance filter dropdown change\r\n  const handleFilterChange = (value) => {\r\n    setFilterOption(value);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100\">\r\n        <div className=\"flex flex-col items-center space-y-4\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\r\n          <p className=\"text-blue-600 font-medium\">Loading Associate Data...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-red-50 to-pink-100\">\r\n        <div className=\"text-center space-y-4\">\r\n          <p className=\"text-red-600 text-lg font-medium\">Error: {error}</p>\r\n          <Button\r\n            onClick={() => navigate(`/accounts/${activeAccountId}/projects`)}\r\n            className=\"bg-blue-600 hover:bg-blue-700\"\r\n          >\r\n            Go to Project Level\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-4 font-sans\">\r\n      <div className=\"max-w-7xl mx-auto\">\r\n        <Card className=\"shadow-xl border-0 bg-white/95 backdrop-blur\">\r\n          <CardHeader className=\"border-b border-slate-200 bg-white/50\">\r\n            <Breadcrumbs path={breadcrumbPath} />\r\n            \r\n            {/* Header Section with improved alignment */}\r\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 pt-4\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                  <Users className=\"h-6 w-6 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <h1 className=\"text-2xl font-bold text-slate-900\">Associate Details</h1>\r\n                  <p className=\"text-slate-600 text-sm\">Project: {activeProjectName}</p>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Action buttons with professional alignment */}\r\n              <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Filter className=\"h-4 w-4 text-slate-500\" />\r\n                  <span className=\"text-sm font-medium text-slate-700\">Filter Variance:</span>\r\n                  <Select value={filterOption} onValueChange={handleFilterChange}>\r\n                    <SelectTrigger className=\"w-48 h-9\">\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"showAll\">Show All Variance</SelectItem>\r\n                      <SelectItem value=\"varianceAboveZero\">Variance ‚â† 0</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={handleNotifyAll}\r\n                    className=\"flex items-center space-x-2 border-blue-200 text-blue-700 hover:bg-blue-50\"\r\n                  >\r\n                    <Bell className=\"h-4 w-4\" />\r\n                    <span>Notify All</span>\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={handleDownloadData}\r\n                    className=\"flex items-center space-x-2 border-green-200 text-green-700 hover:bg-green-50\"\r\n                  >\r\n                    <Download className=\"h-4 w-4\" />\r\n                    <span>Download Data</span>\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardHeader>\r\n\r\n          <CardContent className=\"p-0\">\r\n            <div className=\"overflow-x-auto\">\r\n              <table\r\n                ref={tableRef}\r\n                className=\"display table table-hover table-borderless align-middle mb-0 w-full\"\r\n              >\r\n                <thead className=\"bg-gradient-to-r from-blue-600 to-blue-700 text-white\">\r\n                  <tr>\r\n                    <th className=\"px-4 py-4 text-left text-sm font-semibold\">Associate ID</th>\r\n                    <th className=\"px-4 py-4 text-left text-sm font-semibold\">Associate Name</th>\r\n                    <th className=\"px-4 py-4 text-left text-sm font-semibold\">Project ID</th>\r\n                    <th className=\"px-4 py-4 text-left text-sm font-semibold\">Project Name</th>\r\n                    <th className=\"px-4 py-4 text-left text-sm font-semibold\">PM ID</th>\r\n                    <th className=\"px-4 py-4 text-left text-sm font-semibold\">Total Company Hours (Monthly)</th>\r\n                    <th className=\"px-4 py-4 text-left text-sm font-semibold\">Total Client Hours (Monthly)</th>\r\n                    <th className=\"px-4 py-4 text-left text-sm font-semibold\">Variance Hours (Monthly)</th>\r\n                    <th className=\"px-4 py-4 text-left text-sm font-semibold\">Actual Revenue</th>\r\n                    <th className=\"px-4 py-4 text-left text-sm font-semibold\">Associate Rate</th>\r\n                    <th className=\"px-4 py-4 text-center text-sm font-semibold\">Notify</th>\r\n                    <th className=\"px-4 py-4 text-center text-sm font-semibold\">View Daily</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"divide-y divide-slate-200 bg-white\">\r\n                  {associates.map((associate) => (\r\n                    <tr key={associate.associateId} className=\"hover:bg-slate-50 transition-colors\">\r\n                      <td className=\"px-4 py-4 text-sm font-medium text-slate-900\">\r\n                        {associate.associateId}\r\n                      </td>\r\n                      <td className=\"px-4 py-4 text-sm text-slate-700 font-medium\">\r\n                        {associate.associateName}\r\n                      </td>\r\n                      <td className=\"px-4 py-4 text-sm text-slate-600\">\r\n                        {associate.projectId}\r\n                      </td>\r\n                      <td className=\"px-4 py-4 text-sm text-slate-700\">\r\n                        {associate.projectName}\r\n                      </td>\r\n                      <td className=\"px-4 py-4 text-sm text-slate-600\">\r\n                        {associate.esaID}\r\n                      </td>\r\n                      <td className=\"px-4 py-4 text-sm text-slate-700 font-mono\">\r\n                        {associate.totalCompanyHoursMonthly}\r\n                      </td>\r\n                      <td className=\"px-4 py-4 text-sm text-slate-700 font-mono\">\r\n                        {associate.totalClientHoursMonthly}\r\n                      </td>\r\n                      <td className=\"px-4 py-4 text-sm font-mono\">\r\n                        <span className={\r\n                          (associate.varianceHoursMonthly || 0) > 0 \r\n                           ? 'text-red-600 font-semibold' \r\n                           : (associate.varianceHoursMonthly || 0) < 0\r\n                           ? 'text-green-600 font-semibold'\r\n                           : 'text-slate-700'\r\n                        }>\r\n                          {associate.varianceHoursMonthly}\r\n                        </span>\r\n                      </td>\r\n                      <td className=\"px-4 py-4 text-sm text-slate-700 font-mono font-semibold\">\r\n                        {formatCurrency(associate.actualRevenue)}\r\n                      </td>\r\n                      <td className=\"px-4 py-4 text-sm text-slate-700 font-mono\">\r\n                        {formatCurrency(associate.associateRtRate)}\r\n                      </td>\r\n                      <td className=\"px-4 py-4 text-center\">\r\n                        <Button\r\n                          variant=\"outline\"\r\n                          size=\"sm\"\r\n                          className=\"border-blue-200 text-blue-700 hover:bg-blue-50 h-8 px-3\"\r\n                        >\r\n                          <Bell className=\"h-3 w-3 mr-1\" />\r\n                          Notify\r\n                        </Button>\r\n                      </td>\r\n                      <td className=\"px-4 py-4 text-center\">\r\n                        <Button\r\n                          variant=\"outline\"\r\n                          size=\"sm\"\r\n                          onClick={() => {\r\n                            navigate(\r\n                              `/projects/${associate.projectId}/associates/${associate.associateId}/daily`,\r\n                              {\r\n                                state: {\r\n                                  month: activeMonth,\r\n                                  year: activeYear,\r\n                                  projectId: associate.projectId,\r\n                                  projectName: associate.projectName,\r\n                                  accountId: activeAccountId,\r\n                                  accountName: activeAccountName,\r\n                                  associateId: associate.associateId,\r\n                                  associateName: associate.associateName\r\n                                }\r\n                              }\r\n                            );\r\n                          }}\r\n                          className=\"border-slate-200 text-slate-700 hover:bg-slate-50 h-8 w-8 p-0\"\r\n                        >\r\n                          <Search className=\"h-3 w-3\" />\r\n                        </Button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssociateLevel;\r\n\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}