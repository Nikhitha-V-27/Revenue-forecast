{"ast":null,"code":"// // src/components/ProjectTypeLevel.js\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import $ from 'jquery';\n// import 'datatables.net';\n// import 'datatables.net-dt/css/dataTables.dataTables.min.css';\n// import Breadcrumbs from '../Breadcrumbs';\n// import commonData from '../../data/commonData.json';\n\n// // Utility for currency formatting\n// const ProjectTypeLevel = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const tableRef = useRef(null);\n\n//   // grab state from navigate in AccountLevel\n//   const { accountId, month, year, monthName } = location.state || {};\n\n//   // local UI state\n//   const [rows, setRows] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   // currency settings\n//   const {\n//     locale,\n//     currency,\n//     minimumFractionDigits,\n//     maximumFractionDigits,\n//   } = commonData.currencySettings;\n\n//   const formatCurrency = v =>\n//     v.toLocaleString(locale, {\n//       style: 'currency',\n//       currency,\n//       minimumFractionDigits,\n//       maximumFractionDigits,\n//     });\n\n//   // load Poppins\n//   useEffect(() => {\n//     const link = document.createElement('link');\n//     link.href =\n//       'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\n//     link.rel = 'stylesheet';\n//     document.head.appendChild(link);\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\n//   }, []);\n\n//   // fetch data\n//   useEffect(() => {\n//     if (!accountId || !month || !year) {\n//       setError('Missing account or date info. Go back.');\n//       setLoading(false);\n//       return;\n//     }\n\n//     const fetchData = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         const resp = await fetch(\n//           'http://localhost:8081/api/project‐type‐level',\n//           {\n//             method: 'POST',\n//             headers: { 'Content-Type': 'application/json' },\n//             body: JSON.stringify({\n//               accId: accountId,\n//               month,\n//               year,\n//             }),\n//           }\n//         );\n//         if (!resp.ok) {\n//           const text = await resp.text();\n//           throw new Error(text || resp.statusText);\n//         }\n//         const data = await resp.json();\n//         setRows(Array.isArray(data) ? data : []);\n//       } catch (e) {\n//         console.error(e);\n//         setError('Failed to load project‐type data: ' + e.message);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchData();\n//   }, [accountId, month, year]);\n\n//   // initialize & destroy DataTable\n//   useEffect(() => {\n//     if (!loading && rows.length && tableRef.current) {\n//       const $tbl = $(tableRef.current);\n//       if ($.fn.DataTable.isDataTable($tbl)) {\n//         $tbl.DataTable().destroy();\n//       }\n//       $tbl.DataTable({\n//         paging: true,\n//         searching: true,\n//         ordering: true,\n//         info: true,\n//         autoWidth: false,\n//       });\n//     }\n//     return () => {\n//       if (tableRef.current) {\n//         const $tbl = $(tableRef.current);\n//         if ($.fn.DataTable.isDataTable($tbl)) {\n//           $tbl.DataTable().destroy();\n//         }\n//       }\n//     };\n//   }, [loading, rows]);\n\n//   const breadcrumbPath = [\n//     { name: 'PMO Dashboard', page: '' },\n//     { name: 'Revenue Forecast – Early View', page: 'upload' },\n//     { name: 'Account Level', page: 'accounts' },\n//     { name: 'Project Type Level', page: '' },\n//   ];\n\n//   return (\n//     <div\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\n//       style={{\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\n//       }}\n//     >\n//       <div\n//         className=\"card shadow p-4 p-md-5 w-100\"\n//         style={{\n//           maxWidth: '1100px',\n//           backgroundColor: '#ffffffdd',\n//           borderRadius: '1rem',\n//         }}\n//       >\n//         <Breadcrumbs path={breadcrumbPath} />\n\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\n//           📊 Project Type Overview for {accountId}\n//           {monthName && year && (\n//             <span className=\"ms-2 text-primary\">\n//               ({monthName} {year})\n//             </span>\n//           )}\n//         </h2>\n\n//         {loading ? (\n//           <div className=\"d-flex justify-content-center align-items-center\">\n//             <div className=\"spinner-border text-primary\" role=\"status\" />\n//             <p className=\"ms-3 text-primary\">Loading...</p>\n//           </div>\n//         ) : error ? (\n//           <div className=\"d-flex flex-column justify-content-center align-items-center text-danger\">\n//             <p className=\"fs-4\">{error}</p>\n//             <button\n//               className=\"btn btn-primary mt-3\"\n//               onClick={() => navigate(-1)}\n//             >\n//               Go Back\n//             </button>\n//           </div>\n//         ) : (\n//           <div className=\"table-responsive rounded\">\n//             <table\n//               ref={tableRef}\n//               className=\"display table table-hover align-middle table-bordered mb-0\"\n//               style={{ width: '100%' }}\n//             >\n//               <thead\n//                 className=\"text-white\"\n//                 style={{\n//                   background: 'linear-gradient(to right, #1d4ed8, #2563eb)',\n//                 }}\n//               >\n//                 <tr>\n//                   <th>Project Type</th>\n//                   <th>Total Revenue</th>\n//                   <th>Forecast Revenue</th>\n//                   <th>Difference</th>\n//                   <th className=\"text-center\">Action</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {rows.map((r) => (\n//                   <tr key={r.projectType}>\n//                     <td>{r.projectType}</td>\n//                     <td>{formatCurrency(r.totalRevenue)}</td>\n//                     <td>{formatCurrency(r.forecastedRevenue)}</td>\n//                     <td\n//                       className={\n//                         r.difference < 0 ? 'text-danger' : 'text-success'\n//                       }\n//                     >\n//                       {r.difference > 0 ? '+' : ''}\n//                       {r.difference.toFixed(2)}\n//                     </td>\n//                     <td className=\"text-center\">\n//                       <button\n//                         className=\"btn btn-sm btn-outline-primary rounded-pill px-3\"\n//                         onClick={() =>\n//                           navigate(\n//                             `/accounts/${accountId}/project‐type/${r.projectType}/projects`,\n//                             {\n//                               state: {\n//                                 accountId,\n//                                 projectType: r.projectType,\n//                                 month,\n//                                 year,\n//                                 monthName,\n//                               },\n//                             }\n//                           )\n//                         }\n//                       >\n//                         View Projects\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ProjectTypeLevel;","map":{"version":3,"names":[],"sources":["C:/Users/2374927/OneDrive - Cognizant/Desktop/earlyview/revenue-forecast-ui/timesheet-comparison/src/components/Details/ProjectTypeLevel.js"],"sourcesContent":["// // src/components/ProjectTypeLevel.js\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import $ from 'jquery';\r\n// import 'datatables.net';\r\n// import 'datatables.net-dt/css/dataTables.dataTables.min.css';\r\n// import Breadcrumbs from '../Breadcrumbs';\r\n// import commonData from '../../data/commonData.json';\r\n\r\n// // Utility for currency formatting\r\n// const ProjectTypeLevel = () => {\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n//   const tableRef = useRef(null);\r\n\r\n//   // grab state from navigate in AccountLevel\r\n//   const { accountId, month, year, monthName } = location.state || {};\r\n\r\n//   // local UI state\r\n//   const [rows, setRows] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // currency settings\r\n//   const {\r\n//     locale,\r\n//     currency,\r\n//     minimumFractionDigits,\r\n//     maximumFractionDigits,\r\n//   } = commonData.currencySettings;\r\n\r\n//   const formatCurrency = v =>\r\n//     v.toLocaleString(locale, {\r\n//       style: 'currency',\r\n//       currency,\r\n//       minimumFractionDigits,\r\n//       maximumFractionDigits,\r\n//     });\r\n\r\n//   // load Poppins\r\n//   useEffect(() => {\r\n//     const link = document.createElement('link');\r\n//     link.href =\r\n//       'https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap';\r\n//     link.rel = 'stylesheet';\r\n//     document.head.appendChild(link);\r\n//     document.body.style.fontFamily = \"'Poppins', sans-serif\";\r\n//   }, []);\r\n\r\n//   // fetch data\r\n//   useEffect(() => {\r\n//     if (!accountId || !month || !year) {\r\n//       setError('Missing account or date info. Go back.');\r\n//       setLoading(false);\r\n//       return;\r\n//     }\r\n\r\n//     const fetchData = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         const resp = await fetch(\r\n//           'http://localhost:8081/api/project‐type‐level',\r\n//           {\r\n//             method: 'POST',\r\n//             headers: { 'Content-Type': 'application/json' },\r\n//             body: JSON.stringify({\r\n//               accId: accountId,\r\n//               month,\r\n//               year,\r\n//             }),\r\n//           }\r\n//         );\r\n//         if (!resp.ok) {\r\n//           const text = await resp.text();\r\n//           throw new Error(text || resp.statusText);\r\n//         }\r\n//         const data = await resp.json();\r\n//         setRows(Array.isArray(data) ? data : []);\r\n//       } catch (e) {\r\n//         console.error(e);\r\n//         setError('Failed to load project‐type data: ' + e.message);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, [accountId, month, year]);\r\n\r\n//   // initialize & destroy DataTable\r\n//   useEffect(() => {\r\n//     if (!loading && rows.length && tableRef.current) {\r\n//       const $tbl = $(tableRef.current);\r\n//       if ($.fn.DataTable.isDataTable($tbl)) {\r\n//         $tbl.DataTable().destroy();\r\n//       }\r\n//       $tbl.DataTable({\r\n//         paging: true,\r\n//         searching: true,\r\n//         ordering: true,\r\n//         info: true,\r\n//         autoWidth: false,\r\n//       });\r\n//     }\r\n//     return () => {\r\n//       if (tableRef.current) {\r\n//         const $tbl = $(tableRef.current);\r\n//         if ($.fn.DataTable.isDataTable($tbl)) {\r\n//           $tbl.DataTable().destroy();\r\n//         }\r\n//       }\r\n//     };\r\n//   }, [loading, rows]);\r\n\r\n//   const breadcrumbPath = [\r\n//     { name: 'PMO Dashboard', page: '' },\r\n//     { name: 'Revenue Forecast – Early View', page: 'upload' },\r\n//     { name: 'Account Level', page: 'accounts' },\r\n//     { name: 'Project Type Level', page: '' },\r\n//   ];\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"min-vh-100 d-flex flex-column align-items-center px-3 py-4\"\r\n//       style={{\r\n//         background: 'linear-gradient(to bottom right, #f5f7fa, #e9ecef)',\r\n//       }}\r\n//     >\r\n//       <div\r\n//         className=\"card shadow p-4 p-md-5 w-100\"\r\n//         style={{\r\n//           maxWidth: '1100px',\r\n//           backgroundColor: '#ffffffdd',\r\n//           borderRadius: '1rem',\r\n//         }}\r\n//       >\r\n//         <Breadcrumbs path={breadcrumbPath} />\r\n\r\n//         <h2 className=\"text-center mb-4 fw-semibold text-dark\">\r\n//           📊 Project Type Overview for {accountId}\r\n//           {monthName && year && (\r\n//             <span className=\"ms-2 text-primary\">\r\n//               ({monthName} {year})\r\n//             </span>\r\n//           )}\r\n//         </h2>\r\n\r\n//         {loading ? (\r\n//           <div className=\"d-flex justify-content-center align-items-center\">\r\n//             <div className=\"spinner-border text-primary\" role=\"status\" />\r\n//             <p className=\"ms-3 text-primary\">Loading...</p>\r\n//           </div>\r\n//         ) : error ? (\r\n//           <div className=\"d-flex flex-column justify-content-center align-items-center text-danger\">\r\n//             <p className=\"fs-4\">{error}</p>\r\n//             <button\r\n//               className=\"btn btn-primary mt-3\"\r\n//               onClick={() => navigate(-1)}\r\n//             >\r\n//               Go Back\r\n//             </button>\r\n//           </div>\r\n//         ) : (\r\n//           <div className=\"table-responsive rounded\">\r\n//             <table\r\n//               ref={tableRef}\r\n//               className=\"display table table-hover align-middle table-bordered mb-0\"\r\n//               style={{ width: '100%' }}\r\n//             >\r\n//               <thead\r\n//                 className=\"text-white\"\r\n//                 style={{\r\n//                   background: 'linear-gradient(to right, #1d4ed8, #2563eb)',\r\n//                 }}\r\n//               >\r\n//                 <tr>\r\n//                   <th>Project Type</th>\r\n//                   <th>Total Revenue</th>\r\n//                   <th>Forecast Revenue</th>\r\n//                   <th>Difference</th>\r\n//                   <th className=\"text-center\">Action</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {rows.map((r) => (\r\n//                   <tr key={r.projectType}>\r\n//                     <td>{r.projectType}</td>\r\n//                     <td>{formatCurrency(r.totalRevenue)}</td>\r\n//                     <td>{formatCurrency(r.forecastedRevenue)}</td>\r\n//                     <td\r\n//                       className={\r\n//                         r.difference < 0 ? 'text-danger' : 'text-success'\r\n//                       }\r\n//                     >\r\n//                       {r.difference > 0 ? '+' : ''}\r\n//                       {r.difference.toFixed(2)}\r\n//                     </td>\r\n//                     <td className=\"text-center\">\r\n//                       <button\r\n//                         className=\"btn btn-sm btn-outline-primary rounded-pill px-3\"\r\n//                         onClick={() =>\r\n//                           navigate(\r\n//                             `/accounts/${accountId}/project‐type/${r.projectType}/projects`,\r\n//                             {\r\n//                               state: {\r\n//                                 accountId,\r\n//                                 projectType: r.projectType,\r\n//                                 month,\r\n//                                 year,\r\n//                                 monthName,\r\n//                               },\r\n//                             }\r\n//                           )\r\n//                         }\r\n//                       >\r\n//                         View Projects\r\n//                       </button>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ProjectTypeLevel;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}